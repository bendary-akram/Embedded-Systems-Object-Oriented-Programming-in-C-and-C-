
1_uart_driver_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002508  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000030  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000a0  200000a0  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00005beb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001151  00000000  00000000  00025c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004a0  00000000  00000000  00026de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000408  00000000  00000000  00027280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001ea7  00000000  00000000  00027688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001f8d  00000000  00000000  0002952f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002b4bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001868  00000000  00000000  0002b538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002680 	.word	0x08002680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002680 	.word	0x08002680

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000584:	f000 fac6 	bl	8000b14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000588:	f000 f82c 	bl	80005e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	uart2_Init();
 800058c:	f000 f9d6 	bl	800093c <uart2_Init>

	/*1024bytes had been buffered, then write() was called! so i have flush the buffer*/
	setbuf(stdout, NULL);
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <main+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f8d3 	bl	8001744 <setbuf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("Hello, world!");
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <main+0x34>)
 80005a0:	f001 f8b8 	bl	8001714 <iprintf>
		udelay(2000);
 80005a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a8:	f000 f806 	bl	80005b8 <udelay>
		printf("Hello, world!");
 80005ac:	e7f7      	b.n	800059e <main+0x1e>
 80005ae:	bf00      	nop
 80005b0:	2000000c 	.word	0x2000000c
 80005b4:	08002698 	.word	0x08002698

080005b8 <udelay>:
	}
	/* USER CODE END 3 */
}

void udelay(uint32_t timeout_millisecond)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	/* Init tickstart for timeout managment */
	tickstart = HAL_GetTick();
 80005c0:	f000 fb0e 	bl	8000be0 <HAL_GetTick>
 80005c4:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - tickstart) < timeout_millisecond);
 80005c6:	bf00      	nop
 80005c8:	f000 fb0a 	bl	8000be0 <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	1ad2      	subs	r2, r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f7      	bcc.n	80005c8 <udelay+0x10>

	tickstart=0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f886 	bl	8001704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fba8 	bl	8000dc0 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000676:	f000 f81f 	bl	80006b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fe01 	bl	80012a0 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80006a4:	f000 f808 	bl	80006b8 <Error_Handler>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000706:	2007      	movs	r0, #7
 8000708:	f000 fb26 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 fa24 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e00a      	b.n	800079c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000786:	68bc      	ldr	r4, [r7, #8]
 8000788:	1c63      	adds	r3, r4, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	f3af 8000 	nop.w
 8000790:	4603      	mov	r3, r0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3301      	adds	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dbf0      	blt.n	8000786 <_read+0x12>
	}

return len;
 80007a4:	687b      	ldr	r3, [r7, #4]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}

080007ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e009      	b.n	80007d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f993 	bl	8000af4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dbf1      	blt.n	80007c0 <_write+0x12>
	}
	return len;
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x50>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <_sbrk+0x16>
		heap_end = &end;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <_sbrk+0x50>)
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <_sbrk+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <_sbrk+0x50>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <_sbrk+0x50>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	466a      	mov	r2, sp
 800080e:	4293      	cmp	r3, r2
 8000810:	d907      	bls.n	8000822 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000812:	f000 ff4d 	bl	80016b0 <__errno>
 8000816:	4602      	mov	r2, r0
 8000818:	230c      	movs	r3, #12
 800081a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000820:	e006      	b.n	8000830 <_sbrk+0x48>
	}

	heap_end += incr;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <_sbrk+0x50>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	4a03      	ldr	r2, [pc, #12]	; (8000838 <_sbrk+0x50>)
 800082c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000008c 	.word	0x2000008c
 800083c:	200000a0 	.word	0x200000a0

08000840 <_close>:

int _close(int file)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	return -1;
 8000848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000868:	605a      	str	r2, [r3, #4]
	return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_isatty>:

int _isatty(int file)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	return 1;
 8000880:	2301      	movs	r3, #1
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800088e:	b480      	push	{r7}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
	return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <SystemInit+0x28>)
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x28>)
 80008b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SystemInit+0x28>)
 80008be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <uart_gpio_init>:
 */
#include "uart_driver.h"
#include "stm32f4xx_hal.h"

static void uart_gpio_init(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
	/*GPIO clock init */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <uart_gpio_init+0x60>)
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <uart_gpio_init+0x60>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <uart_gpio_init+0x60>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

	/*init gpio as alternative function*/
	GPIOA->MODER|= (0x02UL<<GPIO_MODER_MODER2_Pos)|(0x02UL<<GPIO_MODER_MODER3_Pos);	//alternative function
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <uart_gpio_init+0x64>)
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <uart_gpio_init+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000900:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR|= (3<<GPIO_OSPEEDR_OSPEED2_Pos)|(3<<GPIO_OSPEEDR_OSPEED3_Pos);	//Very high speed
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <uart_gpio_init+0x64>)
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <uart_gpio_init+0x64>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800090c:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR|= (1<<GPIO_PUPDR_PUPD2_Pos)|(1<<GPIO_PUPDR_PUPD3_Pos);	//PUll up
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <uart_gpio_init+0x64>)
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <uart_gpio_init+0x64>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000918:	60d3      	str	r3, [r2, #12]
	GPIOA->AFR[0]|= (7<<GPIO_AFRL_AFSEL2_Pos)|(7<<GPIO_AFRL_AFSEL3_Pos);	//AF7 as uart2
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <uart_gpio_init+0x64>)
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <uart_gpio_init+0x64>)
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000924:	6213      	str	r3, [r2, #32]

}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <uart2_Init>:

void uart2_Init(void)
{
 800093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
	uint32_t pclk=0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
	/*inir uart pins*/
	uart_gpio_init();
 8000948:	f7ff ffc4 	bl	80008d4 <uart_gpio_init>
	/*uart clock init */
	__HAL_RCC_USART2_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4a59      	ldr	r2, [pc, #356]	; (8000ab8 <uart2_Init+0x17c>)
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <uart2_Init+0x17c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <uart2_Init+0x17c>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
	// tx and rx enable
	USART2->CR1|=USART_CR1_RE|USART_CR1_TE;
 8000968:	4a54      	ldr	r2, [pc, #336]	; (8000abc <uart2_Init+0x180>)
 800096a:	4b54      	ldr	r3, [pc, #336]	; (8000abc <uart2_Init+0x180>)
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	f043 030c 	orr.w	r3, r3, #12
 8000972:	60d3      	str	r3, [r2, #12]
	//baud rate
	pclk = HAL_RCC_GetPCLK1Freq();
 8000974:	f000 fe5e 	bl	8001634 <HAL_RCC_GetPCLK1Freq>
 8000978:	60f8      	str	r0, [r7, #12]
	USART2->BRR  = UART_BRR_SAMPLING16(pclk, 115200);
 800097a:	4b50      	ldr	r3, [pc, #320]	; (8000abc <uart2_Init+0x180>)
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 0200 	mov.w	r2, #0
 8000986:	460b      	mov	r3, r1
 8000988:	4614      	mov	r4, r2
 800098a:	18db      	adds	r3, r3, r3
 800098c:	eb44 0404 	adc.w	r4, r4, r4
 8000990:	185b      	adds	r3, r3, r1
 8000992:	eb44 0402 	adc.w	r4, r4, r2
 8000996:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800099a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800099e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80009a2:	4653      	mov	r3, sl
 80009a4:	465c      	mov	r4, fp
 80009a6:	eb13 0a01 	adds.w	sl, r3, r1
 80009aa:	eb44 0b02 	adc.w	fp, r4, r2
 80009ae:	4650      	mov	r0, sl
 80009b0:	4659      	mov	r1, fp
 80009b2:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	f7ff fc59 	bl	8000270 <__aeabi_uldivmod>
 80009be:	4603      	mov	r3, r0
 80009c0:	460c      	mov	r4, r1
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <uart2_Init+0x184>)
 80009c6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 0200 	mov.w	r2, #0
 80009d8:	460b      	mov	r3, r1
 80009da:	4614      	mov	r4, r2
 80009dc:	18db      	adds	r3, r3, r3
 80009de:	eb44 0404 	adc.w	r4, r4, r4
 80009e2:	185b      	adds	r3, r3, r1
 80009e4:	eb44 0402 	adc.w	r4, r4, r2
 80009e8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80009ec:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80009f0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80009f4:	4643      	mov	r3, r8
 80009f6:	464c      	mov	r4, r9
 80009f8:	eb13 0801 	adds.w	r8, r3, r1
 80009fc:	eb44 0902 	adc.w	r9, r4, r2
 8000a00:	4640      	mov	r0, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	f7ff fc30 	bl	8000270 <__aeabi_uldivmod>
 8000a10:	4603      	mov	r3, r0
 8000a12:	460c      	mov	r4, r1
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <uart2_Init+0x184>)
 8000a18:	fba3 1302 	umull	r1, r3, r3, r2
 8000a1c:	095b      	lsrs	r3, r3, #5
 8000a1e:	2164      	movs	r1, #100	; 0x64
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	3332      	adds	r3, #50	; 0x32
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <uart2_Init+0x184>)
 8000a2c:	fba2 1303 	umull	r1, r3, r2, r3
 8000a30:	095b      	lsrs	r3, r3, #5
 8000a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a36:	eb0a 0803 	add.w	r8, sl, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	460b      	mov	r3, r1
 8000a44:	4614      	mov	r4, r2
 8000a46:	18db      	adds	r3, r3, r3
 8000a48:	eb44 0404 	adc.w	r4, r4, r4
 8000a4c:	185b      	adds	r3, r3, r1
 8000a4e:	eb44 0402 	adc.w	r4, r4, r2
 8000a52:	00e6      	lsls	r6, r4, #3
 8000a54:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8000a58:	00dd      	lsls	r5, r3, #3
 8000a5a:	462b      	mov	r3, r5
 8000a5c:	4634      	mov	r4, r6
 8000a5e:	185d      	adds	r5, r3, r1
 8000a60:	eb44 0602 	adc.w	r6, r4, r2
 8000a64:	4628      	mov	r0, r5
 8000a66:	4631      	mov	r1, r6
 8000a68:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000a6c:	f04f 0300 	mov.w	r3, #0
 8000a70:	f7ff fbfe 	bl	8000270 <__aeabi_uldivmod>
 8000a74:	4603      	mov	r3, r0
 8000a76:	460c      	mov	r4, r1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <uart2_Init+0x184>)
 8000a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	2164      	movs	r1, #100	; 0x64
 8000a84:	fb01 f303 	mul.w	r3, r1, r3
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	3332      	adds	r3, #50	; 0x32
 8000a8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <uart2_Init+0x184>)
 8000a90:	fba2 1303 	umull	r1, r3, r2, r3
 8000a94:	095b      	lsrs	r3, r3, #5
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	4443      	add	r3, r8
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6093      	str	r3, [r2, #8]
	/*uart enable*/
	USART2->CR1|=USART_CR1_UE;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <uart2_Init+0x180>)
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <uart2_Init+0x180>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	51eb851f 	.word	0x51eb851f

08000ac4 <uart_send_byte>:


uint8_t uart_send_byte(uint8_t ch)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (USART_SR_TXE))){} //TXE
 8000ace:	bf00      	nop
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <uart_send_byte+0x2c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f9      	beq.n	8000ad0 <uart_send_byte+0xc>
	USART2->DR=ch;
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <uart_send_byte+0x2c>)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	6053      	str	r3, [r2, #4]
	return ch;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40004400 	.word	0x40004400

08000af4 <__io_putchar>:
	return USART2->DR;
}

/* You need this if you want use to redirect printf to uart */
int __io_putchar(int ch)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	733b      	strb	r3, [r7, #12]
	uart_send_byte(c[0]);
 8000b02:	7b3b      	ldrb	r3, [r7, #12]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffdd 	bl	8000ac4 <uart_send_byte>

	return ch;
 8000b0a:	687b      	ldr	r3, [r7, #4]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f90b 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fdbe 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f915 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b94:	f000 f8eb 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000098 	.word	0x20000098

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000098 	.word	0x20000098

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	4909      	ldr	r1, [pc, #36]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	1e5a      	subs	r2, r3, #1
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	1e59      	subs	r1, r3, #1
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	f7ff ff90 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff49 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5e 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff90 	bl	8000cb0 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5f 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e25b      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d075      	beq.n	8000eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dde:	4ba3      	ldr	r3, [pc, #652]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d00c      	beq.n	8000e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dea:	4ba0      	ldr	r3, [pc, #640]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d112      	bne.n	8000e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df6:	4b9d      	ldr	r3, [pc, #628]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e02:	d10b      	bne.n	8000e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	4b99      	ldr	r3, [pc, #612]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d05b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x108>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d157      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e236      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e24:	d106      	bne.n	8000e34 <HAL_RCC_OscConfig+0x74>
 8000e26:	4a91      	ldr	r2, [pc, #580]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	4b90      	ldr	r3, [pc, #576]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e01d      	b.n	8000e70 <HAL_RCC_OscConfig+0xb0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x98>
 8000e3e:	4a8b      	ldr	r2, [pc, #556]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	4b8a      	ldr	r3, [pc, #552]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4a88      	ldr	r2, [pc, #544]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	4b87      	ldr	r3, [pc, #540]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0xb0>
 8000e58:	4a84      	ldr	r2, [pc, #528]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e5a:	4b84      	ldr	r3, [pc, #528]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4a81      	ldr	r2, [pc, #516]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e66:	4b81      	ldr	r3, [pc, #516]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff feb2 	bl	8000be0 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff feae 	bl	8000be0 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e1fb      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	4b76      	ldr	r3, [pc, #472]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0xc0>
 8000e9e:	e014      	b.n	8000eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fe9e 	bl	8000be0 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fe9a 	bl	8000be0 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e1e7      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	4b6c      	ldr	r3, [pc, #432]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0xe8>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d063      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ed6:	4b65      	ldr	r3, [pc, #404]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ee2:	4b62      	ldr	r3, [pc, #392]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d11c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <HAL_RCC_OscConfig+0x152>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1bb      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	4956      	ldr	r1, [pc, #344]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	4b55      	ldr	r3, [pc, #340]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e03a      	b.n	8000f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d020      	beq.n	8000f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f30:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <HAL_RCC_OscConfig+0x2b0>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fe53 	bl	8000be0 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fe4f 	bl	8000be0 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e19c      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4943      	ldr	r1, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e015      	b.n	8000f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_RCC_OscConfig+0x2b0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fe32 	bl	8000be0 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fe2e 	bl	8000be0 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e17b      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d030      	beq.n	800100c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d016      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_RCC_OscConfig+0x2b4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fe12 	bl	8000be0 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fe0e 	bl	8000be0 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e15b      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x200>
 8000fde:	e015      	b.n	800100c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <HAL_RCC_OscConfig+0x2b4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fdfb 	bl	8000be0 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fee:	f7ff fdf7 	bl	8000be0 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e144      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8001002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a0 	beq.w	800115a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10f      	bne.n	800104a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_RCC_OscConfig+0x2ac>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_RCC_OscConfig+0x2b8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001052:	2b00      	cmp	r3, #0
 8001054:	d121      	bne.n	800109a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_RCC_OscConfig+0x2b8>)
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_RCC_OscConfig+0x2b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001062:	f7ff fdbd 	bl	8000be0 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	e011      	b.n	800108e <HAL_RCC_OscConfig+0x2ce>
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	42470000 	.word	0x42470000
 8001074:	42470e80 	.word	0x42470e80
 8001078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107c:	f7ff fdb0 	bl	8000be0 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e0fd      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_RCC_OscConfig+0x4d4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2f0>
 80010a2:	4a7d      	ldr	r2, [pc, #500]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6713      	str	r3, [r2, #112]	; 0x70
 80010ae:	e01c      	b.n	80010ea <HAL_RCC_OscConfig+0x32a>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x312>
 80010b8:	4a77      	ldr	r2, [pc, #476]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010ba:	4b77      	ldr	r3, [pc, #476]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6713      	str	r3, [r2, #112]	; 0x70
 80010c4:	4a74      	ldr	r2, [pc, #464]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010c6:	4b74      	ldr	r3, [pc, #464]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6713      	str	r3, [r2, #112]	; 0x70
 80010d0:	e00b      	b.n	80010ea <HAL_RCC_OscConfig+0x32a>
 80010d2:	4a71      	ldr	r2, [pc, #452]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010d4:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6713      	str	r3, [r2, #112]	; 0x70
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010e0:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80010e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d015      	beq.n	800111e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f2:	f7ff fd75 	bl	8000be0 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fd71 	bl	8000be0 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e0bc      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	4b61      	ldr	r3, [pc, #388]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 8001112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0ee      	beq.n	80010fa <HAL_RCC_OscConfig+0x33a>
 800111c:	e014      	b.n	8001148 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111e:	f7ff fd5f 	bl	8000be0 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001124:	e00a      	b.n	800113c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fd5b 	bl	8000be0 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f241 3288 	movw	r2, #5000	; 0x1388
 8001134:	4293      	cmp	r3, r2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e0a6      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	4b56      	ldr	r3, [pc, #344]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 800113e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ee      	bne.n	8001126 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d105      	bne.n	800115a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 8001150:	4b51      	ldr	r3, [pc, #324]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8092 	beq.w	8001288 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001164:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d05c      	beq.n	800122a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d141      	bne.n	80011fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001178:	4b48      	ldr	r3, [pc, #288]	; (800129c <HAL_RCC_OscConfig+0x4dc>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fd2f 	bl	8000be0 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fd2b 	bl	8000be0 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e078      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001198:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011a4:	493c      	ldr	r1, [pc, #240]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	3b01      	subs	r3, #1
 80011c0:	041b      	lsls	r3, r3, #16
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <HAL_RCC_OscConfig+0x4dc>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fd04 	bl	8000be0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fd00 	bl	8000be0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e04d      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x41c>
 80011fa:	e045      	b.n	8001288 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_RCC_OscConfig+0x4dc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fced 	bl	8000be0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fce9 	bl	8000be0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e036      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x44a>
 8001228:	e02e      	b.n	8001288 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e029      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_RCC_OscConfig+0x4d8>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	429a      	cmp	r2, r3
 8001248:	d11c      	bne.n	8001284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d115      	bne.n	8001284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800125e:	4013      	ands	r3, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001264:	4293      	cmp	r3, r2
 8001266:	d10d      	bne.n	8001284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001272:	429a      	cmp	r2, r3
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000
 8001298:	40023800 	.word	0x40023800
 800129c:	42470060 	.word	0x42470060

080012a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0cc      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 020f 	and.w	r2, r3, #15
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d20c      	bcs.n	80012dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 020f 	and.w	r2, r3, #15
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4a59      	ldr	r2, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4a53      	ldr	r2, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4950      	ldr	r1, [pc, #320]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d044      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d119      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d003      	beq.n	800135e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800135a:	2b03      	cmp	r3, #3
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e06f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e067      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137e:	4937      	ldr	r1, [pc, #220]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 0203 	bic.w	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001390:	f7ff fc26 	bl	8000be0 <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	e00a      	b.n	80013ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff fc22 	bl	8000be0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e04f      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 020c 	and.w	r2, r3, #12
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	429a      	cmp	r2, r3
 80013be:	d1eb      	bne.n	8001398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d90c      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 020f 	and.w	r2, r3, #15
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4919      	ldr	r1, [pc, #100]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001412:	4912      	ldr	r1, [pc, #72]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4601      	mov	r1, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	fa21 f303 	lsr.w	r3, r1, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_ClockConfig+0x1c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb86 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00
 800145c:	40023800 	.word	0x40023800
 8001460:	080026a8 	.word	0x080026a8
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001470:	b08f      	sub	sp, #60	; 0x3c
 8001472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001484:	4b62      	ldr	r3, [pc, #392]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b04      	cmp	r3, #4
 800148e:	d007      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001490:	2b08      	cmp	r3, #8
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001494:	2b00      	cmp	r3, #0
 8001496:	f040 80b2 	bne.w	80015fe <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800149a:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800149e:	e0b1      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a0:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014a4:	e0ae      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a6:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b0:	4b57      	ldr	r3, [pc, #348]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d04e      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	f04f 0400 	mov.w	r4, #0
 80014c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	ea01 0103 	and.w	r1, r1, r3
 80014d2:	ea02 0204 	and.w	r2, r2, r4
 80014d6:	460b      	mov	r3, r1
 80014d8:	4614      	mov	r4, r2
 80014da:	0160      	lsls	r0, r4, #5
 80014dc:	6278      	str	r0, [r7, #36]	; 0x24
 80014de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014e0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80014e4:	6278      	str	r0, [r7, #36]	; 0x24
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	623b      	str	r3, [r7, #32]
 80014ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80014ee:	1a5b      	subs	r3, r3, r1
 80014f0:	eb64 0402 	sbc.w	r4, r4, r2
 80014f4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80014f8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80014fc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001500:	ebb8 0803 	subs.w	r8, r8, r3
 8001504:	eb69 0904 	sbc.w	r9, r9, r4
 8001508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001520:	eb18 0801 	adds.w	r8, r8, r1
 8001524:	eb49 0902 	adc.w	r9, r9, r2
 8001528:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001540:	4640      	mov	r0, r8
 8001542:	4649      	mov	r1, r9
 8001544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001546:	f04f 0400 	mov.w	r4, #0
 800154a:	461a      	mov	r2, r3
 800154c:	4623      	mov	r3, r4
 800154e:	f7fe fe8f 	bl	8000270 <__aeabi_uldivmod>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
 8001558:	e043      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	099b      	lsrs	r3, r3, #6
 8001560:	f04f 0400 	mov.w	r4, #0
 8001564:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	ea01 0103 	and.w	r1, r1, r3
 8001570:	ea02 0204 	and.w	r2, r2, r4
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	0160      	lsls	r0, r4, #5
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800158c:	1a5b      	subs	r3, r3, r1
 800158e:	eb64 0402 	sbc.w	r4, r4, r2
 8001592:	01a6      	lsls	r6, r4, #6
 8001594:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001598:	019d      	lsls	r5, r3, #6
 800159a:	1aed      	subs	r5, r5, r3
 800159c:	eb66 0604 	sbc.w	r6, r6, r4
 80015a0:	00f3      	lsls	r3, r6, #3
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	00eb      	lsls	r3, r5, #3
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80015b4:	186d      	adds	r5, r5, r1
 80015b6:	eb46 0602 	adc.w	r6, r6, r2
 80015ba:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80015be:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80015c2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80015c6:	4655      	mov	r5, sl
 80015c8:	465e      	mov	r6, fp
 80015ca:	4628      	mov	r0, r5
 80015cc:	4631      	mov	r1, r6
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	f04f 0400 	mov.w	r4, #0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4623      	mov	r3, r4
 80015d8:	f7fe fe4a 	bl	8000270 <__aeabi_uldivmod>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	3301      	adds	r3, #1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80015f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015fc:	e002      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001602:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001606:	4618      	mov	r0, r3
 8001608:	373c      	adds	r7, #60	; 0x3c
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	00f42400 	.word	0x00f42400
 8001618:	007a1200 	.word	0x007a1200

0800161c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_RCC_GetHCLKFreq+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001638:	f7ff fff0 	bl	800161c <HAL_RCC_GetHCLKFreq>
 800163c:	4601      	mov	r1, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	080026b8 	.word	0x080026b8

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001662:	e003      	b.n	800166c <LoopCopyDataInit>

08001664 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800166a:	3104      	adds	r1, #4

0800166c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001674:	d3f6      	bcc.n	8001664 <CopyDataInit>
  ldr  r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001678:	e002      	b.n	8001680 <LoopFillZerobss>

0800167a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800167a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800167c:	f842 3b04 	str.w	r3, [r2], #4

08001680 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001684:	d3f9      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff f90f 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f000 f817 	bl	80016bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7fe ff77 	bl	8000580 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001694:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001698:	08002768 	.word	0x08002768
  ldr  r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016a0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80016a4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80016a8:	200000a0 	.word	0x200000a0

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <__errno>:
 80016b0:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <__errno+0x8>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000000c 	.word	0x2000000c

080016bc <__libc_init_array>:
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	4e0d      	ldr	r6, [pc, #52]	; (80016f4 <__libc_init_array+0x38>)
 80016c0:	4c0d      	ldr	r4, [pc, #52]	; (80016f8 <__libc_init_array+0x3c>)
 80016c2:	1ba4      	subs	r4, r4, r6
 80016c4:	10a4      	asrs	r4, r4, #2
 80016c6:	2500      	movs	r5, #0
 80016c8:	42a5      	cmp	r5, r4
 80016ca:	d109      	bne.n	80016e0 <__libc_init_array+0x24>
 80016cc:	4e0b      	ldr	r6, [pc, #44]	; (80016fc <__libc_init_array+0x40>)
 80016ce:	4c0c      	ldr	r4, [pc, #48]	; (8001700 <__libc_init_array+0x44>)
 80016d0:	f000 ffd6 	bl	8002680 <_init>
 80016d4:	1ba4      	subs	r4, r4, r6
 80016d6:	10a4      	asrs	r4, r4, #2
 80016d8:	2500      	movs	r5, #0
 80016da:	42a5      	cmp	r5, r4
 80016dc:	d105      	bne.n	80016ea <__libc_init_array+0x2e>
 80016de:	bd70      	pop	{r4, r5, r6, pc}
 80016e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016e4:	4798      	blx	r3
 80016e6:	3501      	adds	r5, #1
 80016e8:	e7ee      	b.n	80016c8 <__libc_init_array+0xc>
 80016ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ee:	4798      	blx	r3
 80016f0:	3501      	adds	r5, #1
 80016f2:	e7f2      	b.n	80016da <__libc_init_array+0x1e>
 80016f4:	08002760 	.word	0x08002760
 80016f8:	08002760 	.word	0x08002760
 80016fc:	08002760 	.word	0x08002760
 8001700:	08002764 	.word	0x08002764

08001704 <memset>:
 8001704:	4402      	add	r2, r0
 8001706:	4603      	mov	r3, r0
 8001708:	4293      	cmp	r3, r2
 800170a:	d100      	bne.n	800170e <memset+0xa>
 800170c:	4770      	bx	lr
 800170e:	f803 1b01 	strb.w	r1, [r3], #1
 8001712:	e7f9      	b.n	8001708 <memset+0x4>

08001714 <iprintf>:
 8001714:	b40f      	push	{r0, r1, r2, r3}
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <iprintf+0x2c>)
 8001718:	b513      	push	{r0, r1, r4, lr}
 800171a:	681c      	ldr	r4, [r3, #0]
 800171c:	b124      	cbz	r4, 8001728 <iprintf+0x14>
 800171e:	69a3      	ldr	r3, [r4, #24]
 8001720:	b913      	cbnz	r3, 8001728 <iprintf+0x14>
 8001722:	4620      	mov	r0, r4
 8001724:	f000 f9b6 	bl	8001a94 <__sinit>
 8001728:	ab05      	add	r3, sp, #20
 800172a:	9a04      	ldr	r2, [sp, #16]
 800172c:	68a1      	ldr	r1, [r4, #8]
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	4620      	mov	r0, r4
 8001732:	f000 fb7b 	bl	8001e2c <_vfiprintf_r>
 8001736:	b002      	add	sp, #8
 8001738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800173c:	b004      	add	sp, #16
 800173e:	4770      	bx	lr
 8001740:	2000000c 	.word	0x2000000c

08001744 <setbuf>:
 8001744:	2900      	cmp	r1, #0
 8001746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174a:	bf0c      	ite	eq
 800174c:	2202      	moveq	r2, #2
 800174e:	2200      	movne	r2, #0
 8001750:	f000 b800 	b.w	8001754 <setvbuf>

08001754 <setvbuf>:
 8001754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001758:	461d      	mov	r5, r3
 800175a:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <setvbuf+0x14c>)
 800175c:	681e      	ldr	r6, [r3, #0]
 800175e:	4604      	mov	r4, r0
 8001760:	460f      	mov	r7, r1
 8001762:	4690      	mov	r8, r2
 8001764:	b126      	cbz	r6, 8001770 <setvbuf+0x1c>
 8001766:	69b3      	ldr	r3, [r6, #24]
 8001768:	b913      	cbnz	r3, 8001770 <setvbuf+0x1c>
 800176a:	4630      	mov	r0, r6
 800176c:	f000 f992 	bl	8001a94 <__sinit>
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <setvbuf+0x150>)
 8001772:	429c      	cmp	r4, r3
 8001774:	d152      	bne.n	800181c <setvbuf+0xc8>
 8001776:	6874      	ldr	r4, [r6, #4]
 8001778:	f1b8 0f02 	cmp.w	r8, #2
 800177c:	d006      	beq.n	800178c <setvbuf+0x38>
 800177e:	f1b8 0f01 	cmp.w	r8, #1
 8001782:	f200 8089 	bhi.w	8001898 <setvbuf+0x144>
 8001786:	2d00      	cmp	r5, #0
 8001788:	f2c0 8086 	blt.w	8001898 <setvbuf+0x144>
 800178c:	4621      	mov	r1, r4
 800178e:	4630      	mov	r0, r6
 8001790:	f000 f916 	bl	80019c0 <_fflush_r>
 8001794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001796:	b141      	cbz	r1, 80017aa <setvbuf+0x56>
 8001798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800179c:	4299      	cmp	r1, r3
 800179e:	d002      	beq.n	80017a6 <setvbuf+0x52>
 80017a0:	4630      	mov	r0, r6
 80017a2:	f000 fa6d 	bl	8001c80 <_free_r>
 80017a6:	2300      	movs	r3, #0
 80017a8:	6363      	str	r3, [r4, #52]	; 0x34
 80017aa:	2300      	movs	r3, #0
 80017ac:	61a3      	str	r3, [r4, #24]
 80017ae:	6063      	str	r3, [r4, #4]
 80017b0:	89a3      	ldrh	r3, [r4, #12]
 80017b2:	061b      	lsls	r3, r3, #24
 80017b4:	d503      	bpl.n	80017be <setvbuf+0x6a>
 80017b6:	6921      	ldr	r1, [r4, #16]
 80017b8:	4630      	mov	r0, r6
 80017ba:	f000 fa61 	bl	8001c80 <_free_r>
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80017c4:	f023 0303 	bic.w	r3, r3, #3
 80017c8:	f1b8 0f02 	cmp.w	r8, #2
 80017cc:	81a3      	strh	r3, [r4, #12]
 80017ce:	d05d      	beq.n	800188c <setvbuf+0x138>
 80017d0:	ab01      	add	r3, sp, #4
 80017d2:	466a      	mov	r2, sp
 80017d4:	4621      	mov	r1, r4
 80017d6:	4630      	mov	r0, r6
 80017d8:	f000 f9e6 	bl	8001ba8 <__swhatbuf_r>
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	4318      	orrs	r0, r3
 80017e0:	81a0      	strh	r0, [r4, #12]
 80017e2:	bb2d      	cbnz	r5, 8001830 <setvbuf+0xdc>
 80017e4:	9d00      	ldr	r5, [sp, #0]
 80017e6:	4628      	mov	r0, r5
 80017e8:	f000 fa42 	bl	8001c70 <malloc>
 80017ec:	4607      	mov	r7, r0
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d14e      	bne.n	8001890 <setvbuf+0x13c>
 80017f2:	f8dd 9000 	ldr.w	r9, [sp]
 80017f6:	45a9      	cmp	r9, r5
 80017f8:	d13c      	bne.n	8001874 <setvbuf+0x120>
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	81a3      	strh	r3, [r4, #12]
 8001806:	2300      	movs	r3, #0
 8001808:	60a3      	str	r3, [r4, #8]
 800180a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800180e:	6023      	str	r3, [r4, #0]
 8001810:	6123      	str	r3, [r4, #16]
 8001812:	2301      	movs	r3, #1
 8001814:	6163      	str	r3, [r4, #20]
 8001816:	b003      	add	sp, #12
 8001818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <setvbuf+0x154>)
 800181e:	429c      	cmp	r4, r3
 8001820:	d101      	bne.n	8001826 <setvbuf+0xd2>
 8001822:	68b4      	ldr	r4, [r6, #8]
 8001824:	e7a8      	b.n	8001778 <setvbuf+0x24>
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <setvbuf+0x158>)
 8001828:	429c      	cmp	r4, r3
 800182a:	bf08      	it	eq
 800182c:	68f4      	ldreq	r4, [r6, #12]
 800182e:	e7a3      	b.n	8001778 <setvbuf+0x24>
 8001830:	2f00      	cmp	r7, #0
 8001832:	d0d8      	beq.n	80017e6 <setvbuf+0x92>
 8001834:	69b3      	ldr	r3, [r6, #24]
 8001836:	b913      	cbnz	r3, 800183e <setvbuf+0xea>
 8001838:	4630      	mov	r0, r6
 800183a:	f000 f92b 	bl	8001a94 <__sinit>
 800183e:	f1b8 0f01 	cmp.w	r8, #1
 8001842:	bf08      	it	eq
 8001844:	89a3      	ldrheq	r3, [r4, #12]
 8001846:	6027      	str	r7, [r4, #0]
 8001848:	bf04      	itt	eq
 800184a:	f043 0301 	orreq.w	r3, r3, #1
 800184e:	81a3      	strheq	r3, [r4, #12]
 8001850:	89a3      	ldrh	r3, [r4, #12]
 8001852:	6127      	str	r7, [r4, #16]
 8001854:	f013 0008 	ands.w	r0, r3, #8
 8001858:	6165      	str	r5, [r4, #20]
 800185a:	d01b      	beq.n	8001894 <setvbuf+0x140>
 800185c:	f013 0001 	ands.w	r0, r3, #1
 8001860:	bf18      	it	ne
 8001862:	426d      	negne	r5, r5
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	bf1d      	ittte	ne
 800186a:	60a3      	strne	r3, [r4, #8]
 800186c:	61a5      	strne	r5, [r4, #24]
 800186e:	4618      	movne	r0, r3
 8001870:	60a5      	streq	r5, [r4, #8]
 8001872:	e7d0      	b.n	8001816 <setvbuf+0xc2>
 8001874:	4648      	mov	r0, r9
 8001876:	f000 f9fb 	bl	8001c70 <malloc>
 800187a:	4607      	mov	r7, r0
 800187c:	2800      	cmp	r0, #0
 800187e:	d0bc      	beq.n	80017fa <setvbuf+0xa6>
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001886:	81a3      	strh	r3, [r4, #12]
 8001888:	464d      	mov	r5, r9
 800188a:	e7d3      	b.n	8001834 <setvbuf+0xe0>
 800188c:	2000      	movs	r0, #0
 800188e:	e7b6      	b.n	80017fe <setvbuf+0xaa>
 8001890:	46a9      	mov	r9, r5
 8001892:	e7f5      	b.n	8001880 <setvbuf+0x12c>
 8001894:	60a0      	str	r0, [r4, #8]
 8001896:	e7be      	b.n	8001816 <setvbuf+0xc2>
 8001898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800189c:	e7bb      	b.n	8001816 <setvbuf+0xc2>
 800189e:	bf00      	nop
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	080026e4 	.word	0x080026e4
 80018a8:	08002704 	.word	0x08002704
 80018ac:	080026c4 	.word	0x080026c4

080018b0 <__sflush_r>:
 80018b0:	898a      	ldrh	r2, [r1, #12]
 80018b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b6:	4605      	mov	r5, r0
 80018b8:	0710      	lsls	r0, r2, #28
 80018ba:	460c      	mov	r4, r1
 80018bc:	d45a      	bmi.n	8001974 <__sflush_r+0xc4>
 80018be:	684b      	ldr	r3, [r1, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dc05      	bgt.n	80018d0 <__sflush_r+0x20>
 80018c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dc02      	bgt.n	80018d0 <__sflush_r+0x20>
 80018ca:	2000      	movs	r0, #0
 80018cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018d2:	2e00      	cmp	r6, #0
 80018d4:	d0f9      	beq.n	80018ca <__sflush_r+0x1a>
 80018d6:	2300      	movs	r3, #0
 80018d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80018dc:	682f      	ldr	r7, [r5, #0]
 80018de:	602b      	str	r3, [r5, #0]
 80018e0:	d033      	beq.n	800194a <__sflush_r+0x9a>
 80018e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	075a      	lsls	r2, r3, #29
 80018e8:	d505      	bpl.n	80018f6 <__sflush_r+0x46>
 80018ea:	6863      	ldr	r3, [r4, #4]
 80018ec:	1ac0      	subs	r0, r0, r3
 80018ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018f0:	b10b      	cbz	r3, 80018f6 <__sflush_r+0x46>
 80018f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f4:	1ac0      	subs	r0, r0, r3
 80018f6:	2300      	movs	r3, #0
 80018f8:	4602      	mov	r2, r0
 80018fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018fc:	6a21      	ldr	r1, [r4, #32]
 80018fe:	4628      	mov	r0, r5
 8001900:	47b0      	blx	r6
 8001902:	1c43      	adds	r3, r0, #1
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	d106      	bne.n	8001916 <__sflush_r+0x66>
 8001908:	6829      	ldr	r1, [r5, #0]
 800190a:	291d      	cmp	r1, #29
 800190c:	d84b      	bhi.n	80019a6 <__sflush_r+0xf6>
 800190e:	4a2b      	ldr	r2, [pc, #172]	; (80019bc <__sflush_r+0x10c>)
 8001910:	40ca      	lsrs	r2, r1
 8001912:	07d6      	lsls	r6, r2, #31
 8001914:	d547      	bpl.n	80019a6 <__sflush_r+0xf6>
 8001916:	2200      	movs	r2, #0
 8001918:	6062      	str	r2, [r4, #4]
 800191a:	04d9      	lsls	r1, r3, #19
 800191c:	6922      	ldr	r2, [r4, #16]
 800191e:	6022      	str	r2, [r4, #0]
 8001920:	d504      	bpl.n	800192c <__sflush_r+0x7c>
 8001922:	1c42      	adds	r2, r0, #1
 8001924:	d101      	bne.n	800192a <__sflush_r+0x7a>
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	b903      	cbnz	r3, 800192c <__sflush_r+0x7c>
 800192a:	6560      	str	r0, [r4, #84]	; 0x54
 800192c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800192e:	602f      	str	r7, [r5, #0]
 8001930:	2900      	cmp	r1, #0
 8001932:	d0ca      	beq.n	80018ca <__sflush_r+0x1a>
 8001934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001938:	4299      	cmp	r1, r3
 800193a:	d002      	beq.n	8001942 <__sflush_r+0x92>
 800193c:	4628      	mov	r0, r5
 800193e:	f000 f99f 	bl	8001c80 <_free_r>
 8001942:	2000      	movs	r0, #0
 8001944:	6360      	str	r0, [r4, #52]	; 0x34
 8001946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800194a:	6a21      	ldr	r1, [r4, #32]
 800194c:	2301      	movs	r3, #1
 800194e:	4628      	mov	r0, r5
 8001950:	47b0      	blx	r6
 8001952:	1c41      	adds	r1, r0, #1
 8001954:	d1c6      	bne.n	80018e4 <__sflush_r+0x34>
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0c3      	beq.n	80018e4 <__sflush_r+0x34>
 800195c:	2b1d      	cmp	r3, #29
 800195e:	d001      	beq.n	8001964 <__sflush_r+0xb4>
 8001960:	2b16      	cmp	r3, #22
 8001962:	d101      	bne.n	8001968 <__sflush_r+0xb8>
 8001964:	602f      	str	r7, [r5, #0]
 8001966:	e7b0      	b.n	80018ca <__sflush_r+0x1a>
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196e:	81a3      	strh	r3, [r4, #12]
 8001970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001974:	690f      	ldr	r7, [r1, #16]
 8001976:	2f00      	cmp	r7, #0
 8001978:	d0a7      	beq.n	80018ca <__sflush_r+0x1a>
 800197a:	0793      	lsls	r3, r2, #30
 800197c:	680e      	ldr	r6, [r1, #0]
 800197e:	bf08      	it	eq
 8001980:	694b      	ldreq	r3, [r1, #20]
 8001982:	600f      	str	r7, [r1, #0]
 8001984:	bf18      	it	ne
 8001986:	2300      	movne	r3, #0
 8001988:	eba6 0807 	sub.w	r8, r6, r7
 800198c:	608b      	str	r3, [r1, #8]
 800198e:	f1b8 0f00 	cmp.w	r8, #0
 8001992:	dd9a      	ble.n	80018ca <__sflush_r+0x1a>
 8001994:	4643      	mov	r3, r8
 8001996:	463a      	mov	r2, r7
 8001998:	6a21      	ldr	r1, [r4, #32]
 800199a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800199c:	4628      	mov	r0, r5
 800199e:	47b0      	blx	r6
 80019a0:	2800      	cmp	r0, #0
 80019a2:	dc07      	bgt.n	80019b4 <__sflush_r+0x104>
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019aa:	81a3      	strh	r3, [r4, #12]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019b4:	4407      	add	r7, r0
 80019b6:	eba8 0800 	sub.w	r8, r8, r0
 80019ba:	e7e8      	b.n	800198e <__sflush_r+0xde>
 80019bc:	20400001 	.word	0x20400001

080019c0 <_fflush_r>:
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	690b      	ldr	r3, [r1, #16]
 80019c4:	4605      	mov	r5, r0
 80019c6:	460c      	mov	r4, r1
 80019c8:	b1db      	cbz	r3, 8001a02 <_fflush_r+0x42>
 80019ca:	b118      	cbz	r0, 80019d4 <_fflush_r+0x14>
 80019cc:	6983      	ldr	r3, [r0, #24]
 80019ce:	b90b      	cbnz	r3, 80019d4 <_fflush_r+0x14>
 80019d0:	f000 f860 	bl	8001a94 <__sinit>
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <_fflush_r+0x48>)
 80019d6:	429c      	cmp	r4, r3
 80019d8:	d109      	bne.n	80019ee <_fflush_r+0x2e>
 80019da:	686c      	ldr	r4, [r5, #4]
 80019dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019e0:	b17b      	cbz	r3, 8001a02 <_fflush_r+0x42>
 80019e2:	4621      	mov	r1, r4
 80019e4:	4628      	mov	r0, r5
 80019e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ea:	f7ff bf61 	b.w	80018b0 <__sflush_r>
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_fflush_r+0x4c>)
 80019f0:	429c      	cmp	r4, r3
 80019f2:	d101      	bne.n	80019f8 <_fflush_r+0x38>
 80019f4:	68ac      	ldr	r4, [r5, #8]
 80019f6:	e7f1      	b.n	80019dc <_fflush_r+0x1c>
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <_fflush_r+0x50>)
 80019fa:	429c      	cmp	r4, r3
 80019fc:	bf08      	it	eq
 80019fe:	68ec      	ldreq	r4, [r5, #12]
 8001a00:	e7ec      	b.n	80019dc <_fflush_r+0x1c>
 8001a02:	2000      	movs	r0, #0
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
 8001a06:	bf00      	nop
 8001a08:	080026e4 	.word	0x080026e4
 8001a0c:	08002704 	.word	0x08002704
 8001a10:	080026c4 	.word	0x080026c4

08001a14 <_cleanup_r>:
 8001a14:	4901      	ldr	r1, [pc, #4]	; (8001a1c <_cleanup_r+0x8>)
 8001a16:	f000 b8a9 	b.w	8001b6c <_fwalk_reent>
 8001a1a:	bf00      	nop
 8001a1c:	080019c1 	.word	0x080019c1

08001a20 <std.isra.0>:
 8001a20:	2300      	movs	r3, #0
 8001a22:	b510      	push	{r4, lr}
 8001a24:	4604      	mov	r4, r0
 8001a26:	6003      	str	r3, [r0, #0]
 8001a28:	6043      	str	r3, [r0, #4]
 8001a2a:	6083      	str	r3, [r0, #8]
 8001a2c:	8181      	strh	r1, [r0, #12]
 8001a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8001a30:	81c2      	strh	r2, [r0, #14]
 8001a32:	6103      	str	r3, [r0, #16]
 8001a34:	6143      	str	r3, [r0, #20]
 8001a36:	6183      	str	r3, [r0, #24]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	305c      	adds	r0, #92	; 0x5c
 8001a3e:	f7ff fe61 	bl	8001704 <memset>
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <std.isra.0+0x38>)
 8001a44:	6263      	str	r3, [r4, #36]	; 0x24
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <std.isra.0+0x3c>)
 8001a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <std.isra.0+0x40>)
 8001a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <std.isra.0+0x44>)
 8001a50:	6224      	str	r4, [r4, #32]
 8001a52:	6323      	str	r3, [r4, #48]	; 0x30
 8001a54:	bd10      	pop	{r4, pc}
 8001a56:	bf00      	nop
 8001a58:	080023a5 	.word	0x080023a5
 8001a5c:	080023c7 	.word	0x080023c7
 8001a60:	080023ff 	.word	0x080023ff
 8001a64:	08002423 	.word	0x08002423

08001a68 <__sfmoreglue>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	1e4a      	subs	r2, r1, #1
 8001a6c:	2568      	movs	r5, #104	; 0x68
 8001a6e:	4355      	muls	r5, r2
 8001a70:	460e      	mov	r6, r1
 8001a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a76:	f000 f951 	bl	8001d1c <_malloc_r>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b140      	cbz	r0, 8001a90 <__sfmoreglue+0x28>
 8001a7e:	2100      	movs	r1, #0
 8001a80:	e880 0042 	stmia.w	r0, {r1, r6}
 8001a84:	300c      	adds	r0, #12
 8001a86:	60a0      	str	r0, [r4, #8]
 8001a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a8c:	f7ff fe3a 	bl	8001704 <memset>
 8001a90:	4620      	mov	r0, r4
 8001a92:	bd70      	pop	{r4, r5, r6, pc}

08001a94 <__sinit>:
 8001a94:	6983      	ldr	r3, [r0, #24]
 8001a96:	b510      	push	{r4, lr}
 8001a98:	4604      	mov	r4, r0
 8001a9a:	bb33      	cbnz	r3, 8001aea <__sinit+0x56>
 8001a9c:	6483      	str	r3, [r0, #72]	; 0x48
 8001a9e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001aa0:	6503      	str	r3, [r0, #80]	; 0x50
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <__sinit+0x58>)
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <__sinit+0x5c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6282      	str	r2, [r0, #40]	; 0x28
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	bf04      	itt	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	6183      	streq	r3, [r0, #24]
 8001ab2:	f000 f81f 	bl	8001af4 <__sfp>
 8001ab6:	6060      	str	r0, [r4, #4]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f000 f81b 	bl	8001af4 <__sfp>
 8001abe:	60a0      	str	r0, [r4, #8]
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 f817 	bl	8001af4 <__sfp>
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60e0      	str	r0, [r4, #12]
 8001aca:	2104      	movs	r1, #4
 8001acc:	6860      	ldr	r0, [r4, #4]
 8001ace:	f7ff ffa7 	bl	8001a20 <std.isra.0>
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2109      	movs	r1, #9
 8001ad6:	68a0      	ldr	r0, [r4, #8]
 8001ad8:	f7ff ffa2 	bl	8001a20 <std.isra.0>
 8001adc:	2202      	movs	r2, #2
 8001ade:	2112      	movs	r1, #18
 8001ae0:	68e0      	ldr	r0, [r4, #12]
 8001ae2:	f7ff ff9d 	bl	8001a20 <std.isra.0>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61a3      	str	r3, [r4, #24]
 8001aea:	bd10      	pop	{r4, pc}
 8001aec:	080026c0 	.word	0x080026c0
 8001af0:	08001a15 	.word	0x08001a15

08001af4 <__sfp>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <__sfp+0x74>)
 8001af8:	681e      	ldr	r6, [r3, #0]
 8001afa:	69b3      	ldr	r3, [r6, #24]
 8001afc:	4607      	mov	r7, r0
 8001afe:	b913      	cbnz	r3, 8001b06 <__sfp+0x12>
 8001b00:	4630      	mov	r0, r6
 8001b02:	f7ff ffc7 	bl	8001a94 <__sinit>
 8001b06:	3648      	adds	r6, #72	; 0x48
 8001b08:	68b4      	ldr	r4, [r6, #8]
 8001b0a:	6873      	ldr	r3, [r6, #4]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	d503      	bpl.n	8001b18 <__sfp+0x24>
 8001b10:	6833      	ldr	r3, [r6, #0]
 8001b12:	b133      	cbz	r3, 8001b22 <__sfp+0x2e>
 8001b14:	6836      	ldr	r6, [r6, #0]
 8001b16:	e7f7      	b.n	8001b08 <__sfp+0x14>
 8001b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b1c:	b16d      	cbz	r5, 8001b3a <__sfp+0x46>
 8001b1e:	3468      	adds	r4, #104	; 0x68
 8001b20:	e7f4      	b.n	8001b0c <__sfp+0x18>
 8001b22:	2104      	movs	r1, #4
 8001b24:	4638      	mov	r0, r7
 8001b26:	f7ff ff9f 	bl	8001a68 <__sfmoreglue>
 8001b2a:	6030      	str	r0, [r6, #0]
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d1f1      	bne.n	8001b14 <__sfp+0x20>
 8001b30:	230c      	movs	r3, #12
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	4604      	mov	r4, r0
 8001b36:	4620      	mov	r0, r4
 8001b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3e:	81e3      	strh	r3, [r4, #14]
 8001b40:	2301      	movs	r3, #1
 8001b42:	81a3      	strh	r3, [r4, #12]
 8001b44:	6665      	str	r5, [r4, #100]	; 0x64
 8001b46:	6025      	str	r5, [r4, #0]
 8001b48:	60a5      	str	r5, [r4, #8]
 8001b4a:	6065      	str	r5, [r4, #4]
 8001b4c:	6125      	str	r5, [r4, #16]
 8001b4e:	6165      	str	r5, [r4, #20]
 8001b50:	61a5      	str	r5, [r4, #24]
 8001b52:	2208      	movs	r2, #8
 8001b54:	4629      	mov	r1, r5
 8001b56:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b5a:	f7ff fdd3 	bl	8001704 <memset>
 8001b5e:	6365      	str	r5, [r4, #52]	; 0x34
 8001b60:	63a5      	str	r5, [r4, #56]	; 0x38
 8001b62:	64a5      	str	r5, [r4, #72]	; 0x48
 8001b64:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001b66:	e7e6      	b.n	8001b36 <__sfp+0x42>
 8001b68:	080026c0 	.word	0x080026c0

08001b6c <_fwalk_reent>:
 8001b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b70:	4680      	mov	r8, r0
 8001b72:	4689      	mov	r9, r1
 8001b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b78:	2600      	movs	r6, #0
 8001b7a:	b914      	cbnz	r4, 8001b82 <_fwalk_reent+0x16>
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b82:	68a5      	ldr	r5, [r4, #8]
 8001b84:	6867      	ldr	r7, [r4, #4]
 8001b86:	3f01      	subs	r7, #1
 8001b88:	d501      	bpl.n	8001b8e <_fwalk_reent+0x22>
 8001b8a:	6824      	ldr	r4, [r4, #0]
 8001b8c:	e7f5      	b.n	8001b7a <_fwalk_reent+0xe>
 8001b8e:	89ab      	ldrh	r3, [r5, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d907      	bls.n	8001ba4 <_fwalk_reent+0x38>
 8001b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	d003      	beq.n	8001ba4 <_fwalk_reent+0x38>
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	4640      	mov	r0, r8
 8001ba0:	47c8      	blx	r9
 8001ba2:	4306      	orrs	r6, r0
 8001ba4:	3568      	adds	r5, #104	; 0x68
 8001ba6:	e7ee      	b.n	8001b86 <_fwalk_reent+0x1a>

08001ba8 <__swhatbuf_r>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	460e      	mov	r6, r1
 8001bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	da07      	bge.n	8001bca <__swhatbuf_r+0x22>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	602b      	str	r3, [r5, #0]
 8001bbe:	89b3      	ldrh	r3, [r6, #12]
 8001bc0:	061a      	lsls	r2, r3, #24
 8001bc2:	d410      	bmi.n	8001be6 <__swhatbuf_r+0x3e>
 8001bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc8:	e00e      	b.n	8001be8 <__swhatbuf_r+0x40>
 8001bca:	aa01      	add	r2, sp, #4
 8001bcc:	f000 fd10 	bl	80025f0 <_fstat_r>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	dbf2      	blt.n	8001bba <__swhatbuf_r+0x12>
 8001bd4:	9a02      	ldr	r2, [sp, #8]
 8001bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001bde:	425a      	negs	r2, r3
 8001be0:	415a      	adcs	r2, r3
 8001be2:	602a      	str	r2, [r5, #0]
 8001be4:	e7ee      	b.n	8001bc4 <__swhatbuf_r+0x1c>
 8001be6:	2340      	movs	r3, #64	; 0x40
 8001be8:	2000      	movs	r0, #0
 8001bea:	6023      	str	r3, [r4, #0]
 8001bec:	b010      	add	sp, #64	; 0x40
 8001bee:	bd70      	pop	{r4, r5, r6, pc}

08001bf0 <__smakebuf_r>:
 8001bf0:	898b      	ldrh	r3, [r1, #12]
 8001bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001bf4:	079d      	lsls	r5, r3, #30
 8001bf6:	4606      	mov	r6, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	d507      	bpl.n	8001c0c <__smakebuf_r+0x1c>
 8001bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c00:	6023      	str	r3, [r4, #0]
 8001c02:	6123      	str	r3, [r4, #16]
 8001c04:	2301      	movs	r3, #1
 8001c06:	6163      	str	r3, [r4, #20]
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	ab01      	add	r3, sp, #4
 8001c0e:	466a      	mov	r2, sp
 8001c10:	f7ff ffca 	bl	8001ba8 <__swhatbuf_r>
 8001c14:	9900      	ldr	r1, [sp, #0]
 8001c16:	4605      	mov	r5, r0
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f000 f87f 	bl	8001d1c <_malloc_r>
 8001c1e:	b948      	cbnz	r0, 8001c34 <__smakebuf_r+0x44>
 8001c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c24:	059a      	lsls	r2, r3, #22
 8001c26:	d4ef      	bmi.n	8001c08 <__smakebuf_r+0x18>
 8001c28:	f023 0303 	bic.w	r3, r3, #3
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	81a3      	strh	r3, [r4, #12]
 8001c32:	e7e3      	b.n	8001bfc <__smakebuf_r+0xc>
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <__smakebuf_r+0x7c>)
 8001c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c38:	89a3      	ldrh	r3, [r4, #12]
 8001c3a:	6020      	str	r0, [r4, #0]
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	81a3      	strh	r3, [r4, #12]
 8001c42:	9b00      	ldr	r3, [sp, #0]
 8001c44:	6163      	str	r3, [r4, #20]
 8001c46:	9b01      	ldr	r3, [sp, #4]
 8001c48:	6120      	str	r0, [r4, #16]
 8001c4a:	b15b      	cbz	r3, 8001c64 <__smakebuf_r+0x74>
 8001c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c50:	4630      	mov	r0, r6
 8001c52:	f000 fcdf 	bl	8002614 <_isatty_r>
 8001c56:	b128      	cbz	r0, 8001c64 <__smakebuf_r+0x74>
 8001c58:	89a3      	ldrh	r3, [r4, #12]
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	81a3      	strh	r3, [r4, #12]
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	431d      	orrs	r5, r3
 8001c68:	81a5      	strh	r5, [r4, #12]
 8001c6a:	e7cd      	b.n	8001c08 <__smakebuf_r+0x18>
 8001c6c:	08001a15 	.word	0x08001a15

08001c70 <malloc>:
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <malloc+0xc>)
 8001c72:	4601      	mov	r1, r0
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	f000 b851 	b.w	8001d1c <_malloc_r>
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <_free_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4605      	mov	r5, r0
 8001c84:	2900      	cmp	r1, #0
 8001c86:	d045      	beq.n	8001d14 <_free_r+0x94>
 8001c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c8c:	1f0c      	subs	r4, r1, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bfb8      	it	lt
 8001c92:	18e4      	addlt	r4, r4, r3
 8001c94:	f000 fce0 	bl	8002658 <__malloc_lock>
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <_free_r+0x98>)
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	b933      	cbnz	r3, 8001cae <_free_r+0x2e>
 8001ca0:	6063      	str	r3, [r4, #4]
 8001ca2:	6014      	str	r4, [r2, #0]
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001caa:	f000 bcd6 	b.w	800265a <__malloc_unlock>
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	d90c      	bls.n	8001ccc <_free_r+0x4c>
 8001cb2:	6821      	ldr	r1, [r4, #0]
 8001cb4:	1862      	adds	r2, r4, r1
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	bf04      	itt	eq
 8001cba:	681a      	ldreq	r2, [r3, #0]
 8001cbc:	685b      	ldreq	r3, [r3, #4]
 8001cbe:	6063      	str	r3, [r4, #4]
 8001cc0:	bf04      	itt	eq
 8001cc2:	1852      	addeq	r2, r2, r1
 8001cc4:	6022      	streq	r2, [r4, #0]
 8001cc6:	6004      	str	r4, [r0, #0]
 8001cc8:	e7ec      	b.n	8001ca4 <_free_r+0x24>
 8001cca:	4613      	mov	r3, r2
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	b10a      	cbz	r2, 8001cd4 <_free_r+0x54>
 8001cd0:	42a2      	cmp	r2, r4
 8001cd2:	d9fa      	bls.n	8001cca <_free_r+0x4a>
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	1858      	adds	r0, r3, r1
 8001cd8:	42a0      	cmp	r0, r4
 8001cda:	d10b      	bne.n	8001cf4 <_free_r+0x74>
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	4401      	add	r1, r0
 8001ce0:	1858      	adds	r0, r3, r1
 8001ce2:	4282      	cmp	r2, r0
 8001ce4:	6019      	str	r1, [r3, #0]
 8001ce6:	d1dd      	bne.n	8001ca4 <_free_r+0x24>
 8001ce8:	6810      	ldr	r0, [r2, #0]
 8001cea:	6852      	ldr	r2, [r2, #4]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	4401      	add	r1, r0
 8001cf0:	6019      	str	r1, [r3, #0]
 8001cf2:	e7d7      	b.n	8001ca4 <_free_r+0x24>
 8001cf4:	d902      	bls.n	8001cfc <_free_r+0x7c>
 8001cf6:	230c      	movs	r3, #12
 8001cf8:	602b      	str	r3, [r5, #0]
 8001cfa:	e7d3      	b.n	8001ca4 <_free_r+0x24>
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	1821      	adds	r1, r4, r0
 8001d00:	428a      	cmp	r2, r1
 8001d02:	bf04      	itt	eq
 8001d04:	6811      	ldreq	r1, [r2, #0]
 8001d06:	6852      	ldreq	r2, [r2, #4]
 8001d08:	6062      	str	r2, [r4, #4]
 8001d0a:	bf04      	itt	eq
 8001d0c:	1809      	addeq	r1, r1, r0
 8001d0e:	6021      	streq	r1, [r4, #0]
 8001d10:	605c      	str	r4, [r3, #4]
 8001d12:	e7c7      	b.n	8001ca4 <_free_r+0x24>
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	bf00      	nop
 8001d18:	20000090 	.word	0x20000090

08001d1c <_malloc_r>:
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	1ccd      	adds	r5, r1, #3
 8001d20:	f025 0503 	bic.w	r5, r5, #3
 8001d24:	3508      	adds	r5, #8
 8001d26:	2d0c      	cmp	r5, #12
 8001d28:	bf38      	it	cc
 8001d2a:	250c      	movcc	r5, #12
 8001d2c:	2d00      	cmp	r5, #0
 8001d2e:	4606      	mov	r6, r0
 8001d30:	db01      	blt.n	8001d36 <_malloc_r+0x1a>
 8001d32:	42a9      	cmp	r1, r5
 8001d34:	d903      	bls.n	8001d3e <_malloc_r+0x22>
 8001d36:	230c      	movs	r3, #12
 8001d38:	6033      	str	r3, [r6, #0]
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
 8001d3e:	f000 fc8b 	bl	8002658 <__malloc_lock>
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <_malloc_r+0xb4>)
 8001d44:	6814      	ldr	r4, [r2, #0]
 8001d46:	4621      	mov	r1, r4
 8001d48:	b991      	cbnz	r1, 8001d70 <_malloc_r+0x54>
 8001d4a:	4c22      	ldr	r4, [pc, #136]	; (8001dd4 <_malloc_r+0xb8>)
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	b91b      	cbnz	r3, 8001d58 <_malloc_r+0x3c>
 8001d50:	4630      	mov	r0, r6
 8001d52:	f000 fb17 	bl	8002384 <_sbrk_r>
 8001d56:	6020      	str	r0, [r4, #0]
 8001d58:	4629      	mov	r1, r5
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f000 fb12 	bl	8002384 <_sbrk_r>
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	d126      	bne.n	8001db2 <_malloc_r+0x96>
 8001d64:	230c      	movs	r3, #12
 8001d66:	6033      	str	r3, [r6, #0]
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f000 fc76 	bl	800265a <__malloc_unlock>
 8001d6e:	e7e4      	b.n	8001d3a <_malloc_r+0x1e>
 8001d70:	680b      	ldr	r3, [r1, #0]
 8001d72:	1b5b      	subs	r3, r3, r5
 8001d74:	d41a      	bmi.n	8001dac <_malloc_r+0x90>
 8001d76:	2b0b      	cmp	r3, #11
 8001d78:	d90f      	bls.n	8001d9a <_malloc_r+0x7e>
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	50cd      	str	r5, [r1, r3]
 8001d7e:	18cc      	adds	r4, r1, r3
 8001d80:	4630      	mov	r0, r6
 8001d82:	f000 fc6a 	bl	800265a <__malloc_unlock>
 8001d86:	f104 000b 	add.w	r0, r4, #11
 8001d8a:	1d23      	adds	r3, r4, #4
 8001d8c:	f020 0007 	bic.w	r0, r0, #7
 8001d90:	1ac3      	subs	r3, r0, r3
 8001d92:	d01b      	beq.n	8001dcc <_malloc_r+0xb0>
 8001d94:	425a      	negs	r2, r3
 8001d96:	50e2      	str	r2, [r4, r3]
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	428c      	cmp	r4, r1
 8001d9c:	bf0d      	iteet	eq
 8001d9e:	6863      	ldreq	r3, [r4, #4]
 8001da0:	684b      	ldrne	r3, [r1, #4]
 8001da2:	6063      	strne	r3, [r4, #4]
 8001da4:	6013      	streq	r3, [r2, #0]
 8001da6:	bf18      	it	ne
 8001da8:	460c      	movne	r4, r1
 8001daa:	e7e9      	b.n	8001d80 <_malloc_r+0x64>
 8001dac:	460c      	mov	r4, r1
 8001dae:	6849      	ldr	r1, [r1, #4]
 8001db0:	e7ca      	b.n	8001d48 <_malloc_r+0x2c>
 8001db2:	1cc4      	adds	r4, r0, #3
 8001db4:	f024 0403 	bic.w	r4, r4, #3
 8001db8:	42a0      	cmp	r0, r4
 8001dba:	d005      	beq.n	8001dc8 <_malloc_r+0xac>
 8001dbc:	1a21      	subs	r1, r4, r0
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f000 fae0 	bl	8002384 <_sbrk_r>
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	d0cd      	beq.n	8001d64 <_malloc_r+0x48>
 8001dc8:	6025      	str	r5, [r4, #0]
 8001dca:	e7d9      	b.n	8001d80 <_malloc_r+0x64>
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000090 	.word	0x20000090
 8001dd4:	20000094 	.word	0x20000094

08001dd8 <__sfputc_r>:
 8001dd8:	6893      	ldr	r3, [r2, #8]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	b410      	push	{r4}
 8001de0:	6093      	str	r3, [r2, #8]
 8001de2:	da09      	bge.n	8001df8 <__sfputc_r+0x20>
 8001de4:	6994      	ldr	r4, [r2, #24]
 8001de6:	42a3      	cmp	r3, r4
 8001de8:	db02      	blt.n	8001df0 <__sfputc_r+0x18>
 8001dea:	b2cb      	uxtb	r3, r1
 8001dec:	2b0a      	cmp	r3, #10
 8001dee:	d103      	bne.n	8001df8 <__sfputc_r+0x20>
 8001df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001df4:	f000 bb1a 	b.w	800242c <__swbuf_r>
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	1c58      	adds	r0, r3, #1
 8001dfc:	6010      	str	r0, [r2, #0]
 8001dfe:	7019      	strb	r1, [r3, #0]
 8001e00:	b2c8      	uxtb	r0, r1
 8001e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <__sfputs_r>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	4606      	mov	r6, r0
 8001e0c:	460f      	mov	r7, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	18d5      	adds	r5, r2, r3
 8001e12:	42ac      	cmp	r4, r5
 8001e14:	d101      	bne.n	8001e1a <__sfputs_r+0x12>
 8001e16:	2000      	movs	r0, #0
 8001e18:	e007      	b.n	8001e2a <__sfputs_r+0x22>
 8001e1a:	463a      	mov	r2, r7
 8001e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e20:	4630      	mov	r0, r6
 8001e22:	f7ff ffd9 	bl	8001dd8 <__sfputc_r>
 8001e26:	1c43      	adds	r3, r0, #1
 8001e28:	d1f3      	bne.n	8001e12 <__sfputs_r+0xa>
 8001e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e2c <_vfiprintf_r>:
 8001e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e30:	b09d      	sub	sp, #116	; 0x74
 8001e32:	460c      	mov	r4, r1
 8001e34:	4617      	mov	r7, r2
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	4606      	mov	r6, r0
 8001e3a:	b118      	cbz	r0, 8001e44 <_vfiprintf_r+0x18>
 8001e3c:	6983      	ldr	r3, [r0, #24]
 8001e3e:	b90b      	cbnz	r3, 8001e44 <_vfiprintf_r+0x18>
 8001e40:	f7ff fe28 	bl	8001a94 <__sinit>
 8001e44:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <_vfiprintf_r+0x20c>)
 8001e46:	429c      	cmp	r4, r3
 8001e48:	d157      	bne.n	8001efa <_vfiprintf_r+0xce>
 8001e4a:	6874      	ldr	r4, [r6, #4]
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	0718      	lsls	r0, r3, #28
 8001e50:	d55d      	bpl.n	8001f0e <_vfiprintf_r+0xe2>
 8001e52:	6923      	ldr	r3, [r4, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d05a      	beq.n	8001f0e <_vfiprintf_r+0xe2>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e62:	2330      	movs	r3, #48	; 0x30
 8001e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e68:	f04f 0b01 	mov.w	fp, #1
 8001e6c:	46b8      	mov	r8, r7
 8001e6e:	4645      	mov	r5, r8
 8001e70:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d155      	bne.n	8001f24 <_vfiprintf_r+0xf8>
 8001e78:	ebb8 0a07 	subs.w	sl, r8, r7
 8001e7c:	d00b      	beq.n	8001e96 <_vfiprintf_r+0x6a>
 8001e7e:	4653      	mov	r3, sl
 8001e80:	463a      	mov	r2, r7
 8001e82:	4621      	mov	r1, r4
 8001e84:	4630      	mov	r0, r6
 8001e86:	f7ff ffbf 	bl	8001e08 <__sfputs_r>
 8001e8a:	3001      	adds	r0, #1
 8001e8c:	f000 80c4 	beq.w	8002018 <_vfiprintf_r+0x1ec>
 8001e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e92:	4453      	add	r3, sl
 8001e94:	9309      	str	r3, [sp, #36]	; 0x24
 8001e96:	f898 3000 	ldrb.w	r3, [r8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80bc 	beq.w	8002018 <_vfiprintf_r+0x1ec>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea6:	9304      	str	r3, [sp, #16]
 8001ea8:	9307      	str	r3, [sp, #28]
 8001eaa:	9205      	str	r2, [sp, #20]
 8001eac:	9306      	str	r3, [sp, #24]
 8001eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	7829      	ldrb	r1, [r5, #0]
 8001eb8:	4860      	ldr	r0, [pc, #384]	; (800203c <_vfiprintf_r+0x210>)
 8001eba:	f7fe f989 	bl	80001d0 <memchr>
 8001ebe:	f105 0801 	add.w	r8, r5, #1
 8001ec2:	9b04      	ldr	r3, [sp, #16]
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d131      	bne.n	8001f2c <_vfiprintf_r+0x100>
 8001ec8:	06d9      	lsls	r1, r3, #27
 8001eca:	bf44      	itt	mi
 8001ecc:	2220      	movmi	r2, #32
 8001ece:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ed2:	071a      	lsls	r2, r3, #28
 8001ed4:	bf44      	itt	mi
 8001ed6:	222b      	movmi	r2, #43	; 0x2b
 8001ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001edc:	782a      	ldrb	r2, [r5, #0]
 8001ede:	2a2a      	cmp	r2, #42	; 0x2a
 8001ee0:	d02c      	beq.n	8001f3c <_vfiprintf_r+0x110>
 8001ee2:	9a07      	ldr	r2, [sp, #28]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	200a      	movs	r0, #10
 8001ee8:	46a8      	mov	r8, r5
 8001eea:	3501      	adds	r5, #1
 8001eec:	f898 3000 	ldrb.w	r3, [r8]
 8001ef0:	3b30      	subs	r3, #48	; 0x30
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	d96d      	bls.n	8001fd2 <_vfiprintf_r+0x1a6>
 8001ef6:	b371      	cbz	r1, 8001f56 <_vfiprintf_r+0x12a>
 8001ef8:	e026      	b.n	8001f48 <_vfiprintf_r+0x11c>
 8001efa:	4b51      	ldr	r3, [pc, #324]	; (8002040 <_vfiprintf_r+0x214>)
 8001efc:	429c      	cmp	r4, r3
 8001efe:	d101      	bne.n	8001f04 <_vfiprintf_r+0xd8>
 8001f00:	68b4      	ldr	r4, [r6, #8]
 8001f02:	e7a3      	b.n	8001e4c <_vfiprintf_r+0x20>
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <_vfiprintf_r+0x218>)
 8001f06:	429c      	cmp	r4, r3
 8001f08:	bf08      	it	eq
 8001f0a:	68f4      	ldreq	r4, [r6, #12]
 8001f0c:	e79e      	b.n	8001e4c <_vfiprintf_r+0x20>
 8001f0e:	4621      	mov	r1, r4
 8001f10:	4630      	mov	r0, r6
 8001f12:	f000 faef 	bl	80024f4 <__swsetup_r>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d09e      	beq.n	8001e58 <_vfiprintf_r+0x2c>
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1e:	b01d      	add	sp, #116	; 0x74
 8001f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f24:	2b25      	cmp	r3, #37	; 0x25
 8001f26:	d0a7      	beq.n	8001e78 <_vfiprintf_r+0x4c>
 8001f28:	46a8      	mov	r8, r5
 8001f2a:	e7a0      	b.n	8001e6e <_vfiprintf_r+0x42>
 8001f2c:	4a43      	ldr	r2, [pc, #268]	; (800203c <_vfiprintf_r+0x210>)
 8001f2e:	1a80      	subs	r0, r0, r2
 8001f30:	fa0b f000 	lsl.w	r0, fp, r0
 8001f34:	4318      	orrs	r0, r3
 8001f36:	9004      	str	r0, [sp, #16]
 8001f38:	4645      	mov	r5, r8
 8001f3a:	e7bb      	b.n	8001eb4 <_vfiprintf_r+0x88>
 8001f3c:	9a03      	ldr	r2, [sp, #12]
 8001f3e:	1d11      	adds	r1, r2, #4
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	9103      	str	r1, [sp, #12]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	db01      	blt.n	8001f4c <_vfiprintf_r+0x120>
 8001f48:	9207      	str	r2, [sp, #28]
 8001f4a:	e004      	b.n	8001f56 <_vfiprintf_r+0x12a>
 8001f4c:	4252      	negs	r2, r2
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	9207      	str	r2, [sp, #28]
 8001f54:	9304      	str	r3, [sp, #16]
 8001f56:	f898 3000 	ldrb.w	r3, [r8]
 8001f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f5c:	d110      	bne.n	8001f80 <_vfiprintf_r+0x154>
 8001f5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001f62:	2b2a      	cmp	r3, #42	; 0x2a
 8001f64:	f108 0101 	add.w	r1, r8, #1
 8001f68:	d137      	bne.n	8001fda <_vfiprintf_r+0x1ae>
 8001f6a:	9b03      	ldr	r3, [sp, #12]
 8001f6c:	1d1a      	adds	r2, r3, #4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	9203      	str	r2, [sp, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bfb8      	it	lt
 8001f76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001f7a:	f108 0802 	add.w	r8, r8, #2
 8001f7e:	9305      	str	r3, [sp, #20]
 8001f80:	4d31      	ldr	r5, [pc, #196]	; (8002048 <_vfiprintf_r+0x21c>)
 8001f82:	f898 1000 	ldrb.w	r1, [r8]
 8001f86:	2203      	movs	r2, #3
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f7fe f921 	bl	80001d0 <memchr>
 8001f8e:	b140      	cbz	r0, 8001fa2 <_vfiprintf_r+0x176>
 8001f90:	2340      	movs	r3, #64	; 0x40
 8001f92:	1b40      	subs	r0, r0, r5
 8001f94:	fa03 f000 	lsl.w	r0, r3, r0
 8001f98:	9b04      	ldr	r3, [sp, #16]
 8001f9a:	4303      	orrs	r3, r0
 8001f9c:	9304      	str	r3, [sp, #16]
 8001f9e:	f108 0801 	add.w	r8, r8, #1
 8001fa2:	f898 1000 	ldrb.w	r1, [r8]
 8001fa6:	4829      	ldr	r0, [pc, #164]	; (800204c <_vfiprintf_r+0x220>)
 8001fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fac:	2206      	movs	r2, #6
 8001fae:	f108 0701 	add.w	r7, r8, #1
 8001fb2:	f7fe f90d 	bl	80001d0 <memchr>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d034      	beq.n	8002024 <_vfiprintf_r+0x1f8>
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <_vfiprintf_r+0x224>)
 8001fbc:	bb03      	cbnz	r3, 8002000 <_vfiprintf_r+0x1d4>
 8001fbe:	9b03      	ldr	r3, [sp, #12]
 8001fc0:	3307      	adds	r3, #7
 8001fc2:	f023 0307 	bic.w	r3, r3, #7
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fcc:	444b      	add	r3, r9
 8001fce:	9309      	str	r3, [sp, #36]	; 0x24
 8001fd0:	e74c      	b.n	8001e6c <_vfiprintf_r+0x40>
 8001fd2:	fb00 3202 	mla	r2, r0, r2, r3
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	e786      	b.n	8001ee8 <_vfiprintf_r+0xbc>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9305      	str	r3, [sp, #20]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	250a      	movs	r5, #10
 8001fe2:	4688      	mov	r8, r1
 8001fe4:	3101      	adds	r1, #1
 8001fe6:	f898 2000 	ldrb.w	r2, [r8]
 8001fea:	3a30      	subs	r2, #48	; 0x30
 8001fec:	2a09      	cmp	r2, #9
 8001fee:	d903      	bls.n	8001ff8 <_vfiprintf_r+0x1cc>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0c5      	beq.n	8001f80 <_vfiprintf_r+0x154>
 8001ff4:	9005      	str	r0, [sp, #20]
 8001ff6:	e7c3      	b.n	8001f80 <_vfiprintf_r+0x154>
 8001ff8:	fb05 2000 	mla	r0, r5, r0, r2
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e7f0      	b.n	8001fe2 <_vfiprintf_r+0x1b6>
 8002000:	ab03      	add	r3, sp, #12
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4622      	mov	r2, r4
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <_vfiprintf_r+0x228>)
 8002008:	a904      	add	r1, sp, #16
 800200a:	4630      	mov	r0, r6
 800200c:	f3af 8000 	nop.w
 8002010:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002014:	4681      	mov	r9, r0
 8002016:	d1d8      	bne.n	8001fca <_vfiprintf_r+0x19e>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	065b      	lsls	r3, r3, #25
 800201c:	f53f af7d 	bmi.w	8001f1a <_vfiprintf_r+0xee>
 8002020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002022:	e77c      	b.n	8001f1e <_vfiprintf_r+0xf2>
 8002024:	ab03      	add	r3, sp, #12
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4622      	mov	r2, r4
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <_vfiprintf_r+0x228>)
 800202c:	a904      	add	r1, sp, #16
 800202e:	4630      	mov	r0, r6
 8002030:	f000 f888 	bl	8002144 <_printf_i>
 8002034:	e7ec      	b.n	8002010 <_vfiprintf_r+0x1e4>
 8002036:	bf00      	nop
 8002038:	080026e4 	.word	0x080026e4
 800203c:	08002724 	.word	0x08002724
 8002040:	08002704 	.word	0x08002704
 8002044:	080026c4 	.word	0x080026c4
 8002048:	0800272a 	.word	0x0800272a
 800204c:	0800272e 	.word	0x0800272e
 8002050:	00000000 	.word	0x00000000
 8002054:	08001e09 	.word	0x08001e09

08002058 <_printf_common>:
 8002058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800205c:	4691      	mov	r9, r2
 800205e:	461f      	mov	r7, r3
 8002060:	688a      	ldr	r2, [r1, #8]
 8002062:	690b      	ldr	r3, [r1, #16]
 8002064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002068:	4293      	cmp	r3, r2
 800206a:	bfb8      	it	lt
 800206c:	4613      	movlt	r3, r2
 800206e:	f8c9 3000 	str.w	r3, [r9]
 8002072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002076:	4606      	mov	r6, r0
 8002078:	460c      	mov	r4, r1
 800207a:	b112      	cbz	r2, 8002082 <_printf_common+0x2a>
 800207c:	3301      	adds	r3, #1
 800207e:	f8c9 3000 	str.w	r3, [r9]
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	0699      	lsls	r1, r3, #26
 8002086:	bf42      	ittt	mi
 8002088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800208c:	3302      	addmi	r3, #2
 800208e:	f8c9 3000 	strmi.w	r3, [r9]
 8002092:	6825      	ldr	r5, [r4, #0]
 8002094:	f015 0506 	ands.w	r5, r5, #6
 8002098:	d107      	bne.n	80020aa <_printf_common+0x52>
 800209a:	f104 0a19 	add.w	sl, r4, #25
 800209e:	68e3      	ldr	r3, [r4, #12]
 80020a0:	f8d9 2000 	ldr.w	r2, [r9]
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	429d      	cmp	r5, r3
 80020a8:	db29      	blt.n	80020fe <_printf_common+0xa6>
 80020aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	3300      	adds	r3, #0
 80020b2:	bf18      	it	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	0692      	lsls	r2, r2, #26
 80020b8:	d42e      	bmi.n	8002118 <_printf_common+0xc0>
 80020ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020be:	4639      	mov	r1, r7
 80020c0:	4630      	mov	r0, r6
 80020c2:	47c0      	blx	r8
 80020c4:	3001      	adds	r0, #1
 80020c6:	d021      	beq.n	800210c <_printf_common+0xb4>
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	68e5      	ldr	r5, [r4, #12]
 80020cc:	f8d9 2000 	ldr.w	r2, [r9]
 80020d0:	f003 0306 	and.w	r3, r3, #6
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	bf08      	it	eq
 80020d8:	1aad      	subeq	r5, r5, r2
 80020da:	68a3      	ldr	r3, [r4, #8]
 80020dc:	6922      	ldr	r2, [r4, #16]
 80020de:	bf0c      	ite	eq
 80020e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020e4:	2500      	movne	r5, #0
 80020e6:	4293      	cmp	r3, r2
 80020e8:	bfc4      	itt	gt
 80020ea:	1a9b      	subgt	r3, r3, r2
 80020ec:	18ed      	addgt	r5, r5, r3
 80020ee:	f04f 0900 	mov.w	r9, #0
 80020f2:	341a      	adds	r4, #26
 80020f4:	454d      	cmp	r5, r9
 80020f6:	d11b      	bne.n	8002130 <_printf_common+0xd8>
 80020f8:	2000      	movs	r0, #0
 80020fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fe:	2301      	movs	r3, #1
 8002100:	4652      	mov	r2, sl
 8002102:	4639      	mov	r1, r7
 8002104:	4630      	mov	r0, r6
 8002106:	47c0      	blx	r8
 8002108:	3001      	adds	r0, #1
 800210a:	d103      	bne.n	8002114 <_printf_common+0xbc>
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002114:	3501      	adds	r5, #1
 8002116:	e7c2      	b.n	800209e <_printf_common+0x46>
 8002118:	18e1      	adds	r1, r4, r3
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	2030      	movs	r0, #48	; 0x30
 800211e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002122:	4422      	add	r2, r4
 8002124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800212c:	3302      	adds	r3, #2
 800212e:	e7c4      	b.n	80020ba <_printf_common+0x62>
 8002130:	2301      	movs	r3, #1
 8002132:	4622      	mov	r2, r4
 8002134:	4639      	mov	r1, r7
 8002136:	4630      	mov	r0, r6
 8002138:	47c0      	blx	r8
 800213a:	3001      	adds	r0, #1
 800213c:	d0e6      	beq.n	800210c <_printf_common+0xb4>
 800213e:	f109 0901 	add.w	r9, r9, #1
 8002142:	e7d7      	b.n	80020f4 <_printf_common+0x9c>

08002144 <_printf_i>:
 8002144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002148:	4617      	mov	r7, r2
 800214a:	7e0a      	ldrb	r2, [r1, #24]
 800214c:	b085      	sub	sp, #20
 800214e:	2a6e      	cmp	r2, #110	; 0x6e
 8002150:	4698      	mov	r8, r3
 8002152:	4606      	mov	r6, r0
 8002154:	460c      	mov	r4, r1
 8002156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002158:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800215c:	f000 80bc 	beq.w	80022d8 <_printf_i+0x194>
 8002160:	d81a      	bhi.n	8002198 <_printf_i+0x54>
 8002162:	2a63      	cmp	r2, #99	; 0x63
 8002164:	d02e      	beq.n	80021c4 <_printf_i+0x80>
 8002166:	d80a      	bhi.n	800217e <_printf_i+0x3a>
 8002168:	2a00      	cmp	r2, #0
 800216a:	f000 80c8 	beq.w	80022fe <_printf_i+0x1ba>
 800216e:	2a58      	cmp	r2, #88	; 0x58
 8002170:	f000 808a 	beq.w	8002288 <_printf_i+0x144>
 8002174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002178:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800217c:	e02a      	b.n	80021d4 <_printf_i+0x90>
 800217e:	2a64      	cmp	r2, #100	; 0x64
 8002180:	d001      	beq.n	8002186 <_printf_i+0x42>
 8002182:	2a69      	cmp	r2, #105	; 0x69
 8002184:	d1f6      	bne.n	8002174 <_printf_i+0x30>
 8002186:	6821      	ldr	r1, [r4, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800218e:	d023      	beq.n	80021d8 <_printf_i+0x94>
 8002190:	1d11      	adds	r1, r2, #4
 8002192:	6019      	str	r1, [r3, #0]
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	e027      	b.n	80021e8 <_printf_i+0xa4>
 8002198:	2a73      	cmp	r2, #115	; 0x73
 800219a:	f000 80b4 	beq.w	8002306 <_printf_i+0x1c2>
 800219e:	d808      	bhi.n	80021b2 <_printf_i+0x6e>
 80021a0:	2a6f      	cmp	r2, #111	; 0x6f
 80021a2:	d02a      	beq.n	80021fa <_printf_i+0xb6>
 80021a4:	2a70      	cmp	r2, #112	; 0x70
 80021a6:	d1e5      	bne.n	8002174 <_printf_i+0x30>
 80021a8:	680a      	ldr	r2, [r1, #0]
 80021aa:	f042 0220 	orr.w	r2, r2, #32
 80021ae:	600a      	str	r2, [r1, #0]
 80021b0:	e003      	b.n	80021ba <_printf_i+0x76>
 80021b2:	2a75      	cmp	r2, #117	; 0x75
 80021b4:	d021      	beq.n	80021fa <_printf_i+0xb6>
 80021b6:	2a78      	cmp	r2, #120	; 0x78
 80021b8:	d1dc      	bne.n	8002174 <_printf_i+0x30>
 80021ba:	2278      	movs	r2, #120	; 0x78
 80021bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80021c0:	496e      	ldr	r1, [pc, #440]	; (800237c <_printf_i+0x238>)
 80021c2:	e064      	b.n	800228e <_printf_i+0x14a>
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80021ca:	1d11      	adds	r1, r2, #4
 80021cc:	6019      	str	r1, [r3, #0]
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0a3      	b.n	8002320 <_printf_i+0x1dc>
 80021d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80021dc:	f102 0104 	add.w	r1, r2, #4
 80021e0:	6019      	str	r1, [r3, #0]
 80021e2:	d0d7      	beq.n	8002194 <_printf_i+0x50>
 80021e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da03      	bge.n	80021f4 <_printf_i+0xb0>
 80021ec:	222d      	movs	r2, #45	; 0x2d
 80021ee:	425b      	negs	r3, r3
 80021f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021f4:	4962      	ldr	r1, [pc, #392]	; (8002380 <_printf_i+0x23c>)
 80021f6:	220a      	movs	r2, #10
 80021f8:	e017      	b.n	800222a <_printf_i+0xe6>
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002202:	d003      	beq.n	800220c <_printf_i+0xc8>
 8002204:	1d08      	adds	r0, r1, #4
 8002206:	6018      	str	r0, [r3, #0]
 8002208:	680b      	ldr	r3, [r1, #0]
 800220a:	e006      	b.n	800221a <_printf_i+0xd6>
 800220c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002210:	f101 0004 	add.w	r0, r1, #4
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	d0f7      	beq.n	8002208 <_printf_i+0xc4>
 8002218:	880b      	ldrh	r3, [r1, #0]
 800221a:	4959      	ldr	r1, [pc, #356]	; (8002380 <_printf_i+0x23c>)
 800221c:	2a6f      	cmp	r2, #111	; 0x6f
 800221e:	bf14      	ite	ne
 8002220:	220a      	movne	r2, #10
 8002222:	2208      	moveq	r2, #8
 8002224:	2000      	movs	r0, #0
 8002226:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800222a:	6865      	ldr	r5, [r4, #4]
 800222c:	60a5      	str	r5, [r4, #8]
 800222e:	2d00      	cmp	r5, #0
 8002230:	f2c0 809c 	blt.w	800236c <_printf_i+0x228>
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	f020 0004 	bic.w	r0, r0, #4
 800223a:	6020      	str	r0, [r4, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d13f      	bne.n	80022c0 <_printf_i+0x17c>
 8002240:	2d00      	cmp	r5, #0
 8002242:	f040 8095 	bne.w	8002370 <_printf_i+0x22c>
 8002246:	4675      	mov	r5, lr
 8002248:	2a08      	cmp	r2, #8
 800224a:	d10b      	bne.n	8002264 <_printf_i+0x120>
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	07da      	lsls	r2, r3, #31
 8002250:	d508      	bpl.n	8002264 <_printf_i+0x120>
 8002252:	6923      	ldr	r3, [r4, #16]
 8002254:	6862      	ldr	r2, [r4, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	bfde      	ittt	le
 800225a:	2330      	movle	r3, #48	; 0x30
 800225c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002260:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002264:	ebae 0305 	sub.w	r3, lr, r5
 8002268:	6123      	str	r3, [r4, #16]
 800226a:	f8cd 8000 	str.w	r8, [sp]
 800226e:	463b      	mov	r3, r7
 8002270:	aa03      	add	r2, sp, #12
 8002272:	4621      	mov	r1, r4
 8002274:	4630      	mov	r0, r6
 8002276:	f7ff feef 	bl	8002058 <_printf_common>
 800227a:	3001      	adds	r0, #1
 800227c:	d155      	bne.n	800232a <_printf_i+0x1e6>
 800227e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002282:	b005      	add	sp, #20
 8002284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002288:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800228c:	493c      	ldr	r1, [pc, #240]	; (8002380 <_printf_i+0x23c>)
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002296:	f100 0504 	add.w	r5, r0, #4
 800229a:	601d      	str	r5, [r3, #0]
 800229c:	d001      	beq.n	80022a2 <_printf_i+0x15e>
 800229e:	6803      	ldr	r3, [r0, #0]
 80022a0:	e002      	b.n	80022a8 <_printf_i+0x164>
 80022a2:	0655      	lsls	r5, r2, #25
 80022a4:	d5fb      	bpl.n	800229e <_printf_i+0x15a>
 80022a6:	8803      	ldrh	r3, [r0, #0]
 80022a8:	07d0      	lsls	r0, r2, #31
 80022aa:	bf44      	itt	mi
 80022ac:	f042 0220 	orrmi.w	r2, r2, #32
 80022b0:	6022      	strmi	r2, [r4, #0]
 80022b2:	b91b      	cbnz	r3, 80022bc <_printf_i+0x178>
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	f022 0220 	bic.w	r2, r2, #32
 80022ba:	6022      	str	r2, [r4, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	e7b1      	b.n	8002224 <_printf_i+0xe0>
 80022c0:	4675      	mov	r5, lr
 80022c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80022c6:	fb02 3310 	mls	r3, r2, r0, r3
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80022d0:	4603      	mov	r3, r0
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d1f5      	bne.n	80022c2 <_printf_i+0x17e>
 80022d6:	e7b7      	b.n	8002248 <_printf_i+0x104>
 80022d8:	6808      	ldr	r0, [r1, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	6949      	ldr	r1, [r1, #20]
 80022de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022e2:	d004      	beq.n	80022ee <_printf_i+0x1aa>
 80022e4:	1d10      	adds	r0, r2, #4
 80022e6:	6018      	str	r0, [r3, #0]
 80022e8:	6813      	ldr	r3, [r2, #0]
 80022ea:	6019      	str	r1, [r3, #0]
 80022ec:	e007      	b.n	80022fe <_printf_i+0x1ba>
 80022ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022f2:	f102 0004 	add.w	r0, r2, #4
 80022f6:	6018      	str	r0, [r3, #0]
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	d0f6      	beq.n	80022ea <_printf_i+0x1a6>
 80022fc:	8019      	strh	r1, [r3, #0]
 80022fe:	2300      	movs	r3, #0
 8002300:	6123      	str	r3, [r4, #16]
 8002302:	4675      	mov	r5, lr
 8002304:	e7b1      	b.n	800226a <_printf_i+0x126>
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	1d11      	adds	r1, r2, #4
 800230a:	6019      	str	r1, [r3, #0]
 800230c:	6815      	ldr	r5, [r2, #0]
 800230e:	6862      	ldr	r2, [r4, #4]
 8002310:	2100      	movs	r1, #0
 8002312:	4628      	mov	r0, r5
 8002314:	f7fd ff5c 	bl	80001d0 <memchr>
 8002318:	b108      	cbz	r0, 800231e <_printf_i+0x1da>
 800231a:	1b40      	subs	r0, r0, r5
 800231c:	6060      	str	r0, [r4, #4]
 800231e:	6863      	ldr	r3, [r4, #4]
 8002320:	6123      	str	r3, [r4, #16]
 8002322:	2300      	movs	r3, #0
 8002324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002328:	e79f      	b.n	800226a <_printf_i+0x126>
 800232a:	6923      	ldr	r3, [r4, #16]
 800232c:	462a      	mov	r2, r5
 800232e:	4639      	mov	r1, r7
 8002330:	4630      	mov	r0, r6
 8002332:	47c0      	blx	r8
 8002334:	3001      	adds	r0, #1
 8002336:	d0a2      	beq.n	800227e <_printf_i+0x13a>
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	079b      	lsls	r3, r3, #30
 800233c:	d507      	bpl.n	800234e <_printf_i+0x20a>
 800233e:	2500      	movs	r5, #0
 8002340:	f104 0919 	add.w	r9, r4, #25
 8002344:	68e3      	ldr	r3, [r4, #12]
 8002346:	9a03      	ldr	r2, [sp, #12]
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	429d      	cmp	r5, r3
 800234c:	db05      	blt.n	800235a <_printf_i+0x216>
 800234e:	68e0      	ldr	r0, [r4, #12]
 8002350:	9b03      	ldr	r3, [sp, #12]
 8002352:	4298      	cmp	r0, r3
 8002354:	bfb8      	it	lt
 8002356:	4618      	movlt	r0, r3
 8002358:	e793      	b.n	8002282 <_printf_i+0x13e>
 800235a:	2301      	movs	r3, #1
 800235c:	464a      	mov	r2, r9
 800235e:	4639      	mov	r1, r7
 8002360:	4630      	mov	r0, r6
 8002362:	47c0      	blx	r8
 8002364:	3001      	adds	r0, #1
 8002366:	d08a      	beq.n	800227e <_printf_i+0x13a>
 8002368:	3501      	adds	r5, #1
 800236a:	e7eb      	b.n	8002344 <_printf_i+0x200>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1a7      	bne.n	80022c0 <_printf_i+0x17c>
 8002370:	780b      	ldrb	r3, [r1, #0]
 8002372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800237a:	e765      	b.n	8002248 <_printf_i+0x104>
 800237c:	08002746 	.word	0x08002746
 8002380:	08002735 	.word	0x08002735

08002384 <_sbrk_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4c06      	ldr	r4, [pc, #24]	; (80023a0 <_sbrk_r+0x1c>)
 8002388:	2300      	movs	r3, #0
 800238a:	4605      	mov	r5, r0
 800238c:	4608      	mov	r0, r1
 800238e:	6023      	str	r3, [r4, #0]
 8002390:	f7fe fa2a 	bl	80007e8 <_sbrk>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_sbrk_r+0x1a>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	b103      	cbz	r3, 800239e <_sbrk_r+0x1a>
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	2000009c 	.word	0x2000009c

080023a4 <__sread>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	460c      	mov	r4, r1
 80023a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ac:	f000 f956 	bl	800265c <_read_r>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	bfab      	itete	ge
 80023b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023b6:	89a3      	ldrhlt	r3, [r4, #12]
 80023b8:	181b      	addge	r3, r3, r0
 80023ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023be:	bfac      	ite	ge
 80023c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80023c2:	81a3      	strhlt	r3, [r4, #12]
 80023c4:	bd10      	pop	{r4, pc}

080023c6 <__swrite>:
 80023c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ca:	461f      	mov	r7, r3
 80023cc:	898b      	ldrh	r3, [r1, #12]
 80023ce:	05db      	lsls	r3, r3, #23
 80023d0:	4605      	mov	r5, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	4616      	mov	r6, r2
 80023d6:	d505      	bpl.n	80023e4 <__swrite+0x1e>
 80023d8:	2302      	movs	r3, #2
 80023da:	2200      	movs	r2, #0
 80023dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e0:	f000 f928 	bl	8002634 <_lseek_r>
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ee:	81a3      	strh	r3, [r4, #12]
 80023f0:	4632      	mov	r2, r6
 80023f2:	463b      	mov	r3, r7
 80023f4:	4628      	mov	r0, r5
 80023f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023fa:	f000 b869 	b.w	80024d0 <_write_r>

080023fe <__sseek>:
 80023fe:	b510      	push	{r4, lr}
 8002400:	460c      	mov	r4, r1
 8002402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002406:	f000 f915 	bl	8002634 <_lseek_r>
 800240a:	1c43      	adds	r3, r0, #1
 800240c:	89a3      	ldrh	r3, [r4, #12]
 800240e:	bf15      	itete	ne
 8002410:	6560      	strne	r0, [r4, #84]	; 0x54
 8002412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800241a:	81a3      	strheq	r3, [r4, #12]
 800241c:	bf18      	it	ne
 800241e:	81a3      	strhne	r3, [r4, #12]
 8002420:	bd10      	pop	{r4, pc}

08002422 <__sclose>:
 8002422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002426:	f000 b8d3 	b.w	80025d0 <_close_r>
	...

0800242c <__swbuf_r>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	460e      	mov	r6, r1
 8002430:	4614      	mov	r4, r2
 8002432:	4605      	mov	r5, r0
 8002434:	b118      	cbz	r0, 800243e <__swbuf_r+0x12>
 8002436:	6983      	ldr	r3, [r0, #24]
 8002438:	b90b      	cbnz	r3, 800243e <__swbuf_r+0x12>
 800243a:	f7ff fb2b 	bl	8001a94 <__sinit>
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <__swbuf_r+0x98>)
 8002440:	429c      	cmp	r4, r3
 8002442:	d12a      	bne.n	800249a <__swbuf_r+0x6e>
 8002444:	686c      	ldr	r4, [r5, #4]
 8002446:	69a3      	ldr	r3, [r4, #24]
 8002448:	60a3      	str	r3, [r4, #8]
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	071a      	lsls	r2, r3, #28
 800244e:	d52e      	bpl.n	80024ae <__swbuf_r+0x82>
 8002450:	6923      	ldr	r3, [r4, #16]
 8002452:	b363      	cbz	r3, 80024ae <__swbuf_r+0x82>
 8002454:	6923      	ldr	r3, [r4, #16]
 8002456:	6820      	ldr	r0, [r4, #0]
 8002458:	1ac0      	subs	r0, r0, r3
 800245a:	6963      	ldr	r3, [r4, #20]
 800245c:	b2f6      	uxtb	r6, r6
 800245e:	4298      	cmp	r0, r3
 8002460:	4637      	mov	r7, r6
 8002462:	db04      	blt.n	800246e <__swbuf_r+0x42>
 8002464:	4621      	mov	r1, r4
 8002466:	4628      	mov	r0, r5
 8002468:	f7ff faaa 	bl	80019c0 <_fflush_r>
 800246c:	bb28      	cbnz	r0, 80024ba <__swbuf_r+0x8e>
 800246e:	68a3      	ldr	r3, [r4, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60a3      	str	r3, [r4, #8]
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	6022      	str	r2, [r4, #0]
 800247a:	701e      	strb	r6, [r3, #0]
 800247c:	6963      	ldr	r3, [r4, #20]
 800247e:	3001      	adds	r0, #1
 8002480:	4298      	cmp	r0, r3
 8002482:	d004      	beq.n	800248e <__swbuf_r+0x62>
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	07db      	lsls	r3, r3, #31
 8002488:	d519      	bpl.n	80024be <__swbuf_r+0x92>
 800248a:	2e0a      	cmp	r6, #10
 800248c:	d117      	bne.n	80024be <__swbuf_r+0x92>
 800248e:	4621      	mov	r1, r4
 8002490:	4628      	mov	r0, r5
 8002492:	f7ff fa95 	bl	80019c0 <_fflush_r>
 8002496:	b190      	cbz	r0, 80024be <__swbuf_r+0x92>
 8002498:	e00f      	b.n	80024ba <__swbuf_r+0x8e>
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <__swbuf_r+0x9c>)
 800249c:	429c      	cmp	r4, r3
 800249e:	d101      	bne.n	80024a4 <__swbuf_r+0x78>
 80024a0:	68ac      	ldr	r4, [r5, #8]
 80024a2:	e7d0      	b.n	8002446 <__swbuf_r+0x1a>
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <__swbuf_r+0xa0>)
 80024a6:	429c      	cmp	r4, r3
 80024a8:	bf08      	it	eq
 80024aa:	68ec      	ldreq	r4, [r5, #12]
 80024ac:	e7cb      	b.n	8002446 <__swbuf_r+0x1a>
 80024ae:	4621      	mov	r1, r4
 80024b0:	4628      	mov	r0, r5
 80024b2:	f000 f81f 	bl	80024f4 <__swsetup_r>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0cc      	beq.n	8002454 <__swbuf_r+0x28>
 80024ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80024be:	4638      	mov	r0, r7
 80024c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	080026e4 	.word	0x080026e4
 80024c8:	08002704 	.word	0x08002704
 80024cc:	080026c4 	.word	0x080026c4

080024d0 <_write_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4c07      	ldr	r4, [pc, #28]	; (80024f0 <_write_r+0x20>)
 80024d4:	4605      	mov	r5, r0
 80024d6:	4608      	mov	r0, r1
 80024d8:	4611      	mov	r1, r2
 80024da:	2200      	movs	r2, #0
 80024dc:	6022      	str	r2, [r4, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	f7fe f965 	bl	80007ae <_write>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_write_r+0x1e>
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_write_r+0x1e>
 80024ec:	602b      	str	r3, [r5, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	2000009c 	.word	0x2000009c

080024f4 <__swsetup_r>:
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <__swsetup_r+0xcc>)
 80024f6:	b570      	push	{r4, r5, r6, lr}
 80024f8:	681d      	ldr	r5, [r3, #0]
 80024fa:	4606      	mov	r6, r0
 80024fc:	460c      	mov	r4, r1
 80024fe:	b125      	cbz	r5, 800250a <__swsetup_r+0x16>
 8002500:	69ab      	ldr	r3, [r5, #24]
 8002502:	b913      	cbnz	r3, 800250a <__swsetup_r+0x16>
 8002504:	4628      	mov	r0, r5
 8002506:	f7ff fac5 	bl	8001a94 <__sinit>
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <__swsetup_r+0xd0>)
 800250c:	429c      	cmp	r4, r3
 800250e:	d10f      	bne.n	8002530 <__swsetup_r+0x3c>
 8002510:	686c      	ldr	r4, [r5, #4]
 8002512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002516:	b29a      	uxth	r2, r3
 8002518:	0715      	lsls	r5, r2, #28
 800251a:	d42c      	bmi.n	8002576 <__swsetup_r+0x82>
 800251c:	06d0      	lsls	r0, r2, #27
 800251e:	d411      	bmi.n	8002544 <__swsetup_r+0x50>
 8002520:	2209      	movs	r2, #9
 8002522:	6032      	str	r2, [r6, #0]
 8002524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002528:	81a3      	strh	r3, [r4, #12]
 800252a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252e:	bd70      	pop	{r4, r5, r6, pc}
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <__swsetup_r+0xd4>)
 8002532:	429c      	cmp	r4, r3
 8002534:	d101      	bne.n	800253a <__swsetup_r+0x46>
 8002536:	68ac      	ldr	r4, [r5, #8]
 8002538:	e7eb      	b.n	8002512 <__swsetup_r+0x1e>
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <__swsetup_r+0xd8>)
 800253c:	429c      	cmp	r4, r3
 800253e:	bf08      	it	eq
 8002540:	68ec      	ldreq	r4, [r5, #12]
 8002542:	e7e6      	b.n	8002512 <__swsetup_r+0x1e>
 8002544:	0751      	lsls	r1, r2, #29
 8002546:	d512      	bpl.n	800256e <__swsetup_r+0x7a>
 8002548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800254a:	b141      	cbz	r1, 800255e <__swsetup_r+0x6a>
 800254c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002550:	4299      	cmp	r1, r3
 8002552:	d002      	beq.n	800255a <__swsetup_r+0x66>
 8002554:	4630      	mov	r0, r6
 8002556:	f7ff fb93 	bl	8001c80 <_free_r>
 800255a:	2300      	movs	r3, #0
 800255c:	6363      	str	r3, [r4, #52]	; 0x34
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002564:	81a3      	strh	r3, [r4, #12]
 8002566:	2300      	movs	r3, #0
 8002568:	6063      	str	r3, [r4, #4]
 800256a:	6923      	ldr	r3, [r4, #16]
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	89a3      	ldrh	r3, [r4, #12]
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	81a3      	strh	r3, [r4, #12]
 8002576:	6923      	ldr	r3, [r4, #16]
 8002578:	b94b      	cbnz	r3, 800258e <__swsetup_r+0x9a>
 800257a:	89a3      	ldrh	r3, [r4, #12]
 800257c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d003      	beq.n	800258e <__swsetup_r+0x9a>
 8002586:	4621      	mov	r1, r4
 8002588:	4630      	mov	r0, r6
 800258a:	f7ff fb31 	bl	8001bf0 <__smakebuf_r>
 800258e:	89a2      	ldrh	r2, [r4, #12]
 8002590:	f012 0301 	ands.w	r3, r2, #1
 8002594:	d00c      	beq.n	80025b0 <__swsetup_r+0xbc>
 8002596:	2300      	movs	r3, #0
 8002598:	60a3      	str	r3, [r4, #8]
 800259a:	6963      	ldr	r3, [r4, #20]
 800259c:	425b      	negs	r3, r3
 800259e:	61a3      	str	r3, [r4, #24]
 80025a0:	6923      	ldr	r3, [r4, #16]
 80025a2:	b953      	cbnz	r3, 80025ba <__swsetup_r+0xc6>
 80025a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80025ac:	d1ba      	bne.n	8002524 <__swsetup_r+0x30>
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	0792      	lsls	r2, r2, #30
 80025b2:	bf58      	it	pl
 80025b4:	6963      	ldrpl	r3, [r4, #20]
 80025b6:	60a3      	str	r3, [r4, #8]
 80025b8:	e7f2      	b.n	80025a0 <__swsetup_r+0xac>
 80025ba:	2000      	movs	r0, #0
 80025bc:	e7f7      	b.n	80025ae <__swsetup_r+0xba>
 80025be:	bf00      	nop
 80025c0:	2000000c 	.word	0x2000000c
 80025c4:	080026e4 	.word	0x080026e4
 80025c8:	08002704 	.word	0x08002704
 80025cc:	080026c4 	.word	0x080026c4

080025d0 <_close_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4c06      	ldr	r4, [pc, #24]	; (80025ec <_close_r+0x1c>)
 80025d4:	2300      	movs	r3, #0
 80025d6:	4605      	mov	r5, r0
 80025d8:	4608      	mov	r0, r1
 80025da:	6023      	str	r3, [r4, #0]
 80025dc:	f7fe f930 	bl	8000840 <_close>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d102      	bne.n	80025ea <_close_r+0x1a>
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	b103      	cbz	r3, 80025ea <_close_r+0x1a>
 80025e8:	602b      	str	r3, [r5, #0]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	2000009c 	.word	0x2000009c

080025f0 <_fstat_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4c07      	ldr	r4, [pc, #28]	; (8002610 <_fstat_r+0x20>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	4605      	mov	r5, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	f7fe f92b 	bl	8000858 <_fstat>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d102      	bne.n	800260c <_fstat_r+0x1c>
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	b103      	cbz	r3, 800260c <_fstat_r+0x1c>
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	bd38      	pop	{r3, r4, r5, pc}
 800260e:	bf00      	nop
 8002610:	2000009c 	.word	0x2000009c

08002614 <_isatty_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4c06      	ldr	r4, [pc, #24]	; (8002630 <_isatty_r+0x1c>)
 8002618:	2300      	movs	r3, #0
 800261a:	4605      	mov	r5, r0
 800261c:	4608      	mov	r0, r1
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	f7fe f92a 	bl	8000878 <_isatty>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d102      	bne.n	800262e <_isatty_r+0x1a>
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	b103      	cbz	r3, 800262e <_isatty_r+0x1a>
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	bd38      	pop	{r3, r4, r5, pc}
 8002630:	2000009c 	.word	0x2000009c

08002634 <_lseek_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4c07      	ldr	r4, [pc, #28]	; (8002654 <_lseek_r+0x20>)
 8002638:	4605      	mov	r5, r0
 800263a:	4608      	mov	r0, r1
 800263c:	4611      	mov	r1, r2
 800263e:	2200      	movs	r2, #0
 8002640:	6022      	str	r2, [r4, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f7fe f923 	bl	800088e <_lseek>
 8002648:	1c43      	adds	r3, r0, #1
 800264a:	d102      	bne.n	8002652 <_lseek_r+0x1e>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	b103      	cbz	r3, 8002652 <_lseek_r+0x1e>
 8002650:	602b      	str	r3, [r5, #0]
 8002652:	bd38      	pop	{r3, r4, r5, pc}
 8002654:	2000009c 	.word	0x2000009c

08002658 <__malloc_lock>:
 8002658:	4770      	bx	lr

0800265a <__malloc_unlock>:
 800265a:	4770      	bx	lr

0800265c <_read_r>:
 800265c:	b538      	push	{r3, r4, r5, lr}
 800265e:	4c07      	ldr	r4, [pc, #28]	; (800267c <_read_r+0x20>)
 8002660:	4605      	mov	r5, r0
 8002662:	4608      	mov	r0, r1
 8002664:	4611      	mov	r1, r2
 8002666:	2200      	movs	r2, #0
 8002668:	6022      	str	r2, [r4, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	f7fe f882 	bl	8000774 <_read>
 8002670:	1c43      	adds	r3, r0, #1
 8002672:	d102      	bne.n	800267a <_read_r+0x1e>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	b103      	cbz	r3, 800267a <_read_r+0x1e>
 8002678:	602b      	str	r3, [r5, #0]
 800267a:	bd38      	pop	{r3, r4, r5, pc}
 800267c:	2000009c 	.word	0x2000009c

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
