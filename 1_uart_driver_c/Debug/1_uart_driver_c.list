
1_uart_driver_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08003630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000030  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000020c  2000020c  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00005c68  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000115a  00000000  00000000  00025e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004a8  00000000  00000000  00026fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000410  00000000  00000000  00027478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001ee7  00000000  00000000  00027888  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001f92  00000000  00000000  0002976f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002b701  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d90  00000000  00000000  0002b780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033f0 	.word	0x080033f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080033f0 	.word	0x080033f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000586:	f000 faff 	bl	8000b88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058a:	f000 f847 	bl	800061c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	uart2_Init();
 800058e:	f000 f9d3 	bl	8000938 <uart2_Init>

	/*1024bytes had been buffered, then write() was called! so i have flush the buffer*/
	setbuf(stdout, NULL);
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0x58>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f988 	bl	80018b0 <setbuf>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		printf("Hello, world!\r\n");
 80005a0:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0x5c>)
 80005a2:	f001 f965 	bl	8001870 <puts>
		scanf("%d",&buff[0]);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <main+0x60>)
 80005ac:	f001 f968 	bl	8001880 <iscanf>
		printf("char %d \n\r",buff[0]);
 80005b0:	793b      	ldrb	r3, [r7, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x64>)
 80005b6:	f001 f8e7 	bl	8001788 <iprintf>
		scanf("%s",buff);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x68>)
 80005c0:	f001 f95e 	bl	8001880 <iscanf>
		printf("string : %s \n\r",buff);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x6c>)
 80005ca:	f001 f8dd 	bl	8001788 <iprintf>
		udelay(2000);
 80005ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d2:	f000 f80d 	bl	80005f0 <udelay>
		printf("Hello, world!\r\n");
 80005d6:	e7e3      	b.n	80005a0 <main+0x20>
 80005d8:	2000000c 	.word	0x2000000c
 80005dc:	08003408 	.word	0x08003408
 80005e0:	08003418 	.word	0x08003418
 80005e4:	0800341c 	.word	0x0800341c
 80005e8:	08003428 	.word	0x08003428
 80005ec:	0800342c 	.word	0x0800342c

080005f0 <udelay>:
	}
	/* USER CODE END 3 */
}

void udelay(uint32_t timeout_millisecond)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	/* Init tickstart for timeout managment */
	tickstart = HAL_GetTick();
 80005f8:	f000 fb2c 	bl	8000c54 <HAL_GetTick>
 80005fc:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - tickstart) < timeout_millisecond);
 80005fe:	bf00      	nop
 8000600:	f000 fb28 	bl	8000c54 <HAL_GetTick>
 8000604:	4602      	mov	r2, r0
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	1ad2      	subs	r2, r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	d3f7      	bcc.n	8000600 <udelay+0x10>

	tickstart=0;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8a4 	bl	8001778 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fbc6 	bl	8000e34 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80006ae:	f000 f81f 	bl	80006f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2105      	movs	r1, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe1f 	bl	8001314 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80006dc:	f000 f808 	bl	80006f0 <Error_Handler>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <HAL_MspInit+0x4c>)
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x4c>)
 800070e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_MspInit+0x4c>)
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_MspInit+0x4c>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073e:	2007      	movs	r0, #7
 8000740:	f000 fb44 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <MemManage_Handler+0x4>

0800076a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <UsageFault_Handler+0x4>

08000776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 fa42 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e009      	b.n	80007d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	60ba      	str	r2, [r7, #8]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f9a4 	bl	8000b14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbf1      	blt.n	80007be <_write+0x12>
	}
	return len;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_sbrk+0x50>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x16>
		heap_end = &end;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <_sbrk+0x50>)
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <_sbrk+0x54>)
 80007f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <_sbrk+0x50>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <_sbrk+0x50>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	466a      	mov	r2, sp
 800080a:	4293      	cmp	r3, r2
 800080c:	d907      	bls.n	800081e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800080e:	f000 ff89 	bl	8001724 <__errno>
 8000812:	4602      	mov	r2, r0
 8000814:	230c      	movs	r3, #12
 8000816:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081c:	e006      	b.n	800082c <_sbrk+0x48>
	}

	heap_end += incr;
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <_sbrk+0x50>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a03      	ldr	r2, [pc, #12]	; (8000834 <_sbrk+0x50>)
 8000828:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001f8 	.word	0x200001f8
 8000838:	2000020c 	.word	0x2000020c

0800083c <_close>:

int _close(int file)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	return -1;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000864:	605a      	str	r2, [r3, #4]
	return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <_isatty>:

int _isatty(int file)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	return 1;
 800087c:	2301      	movs	r3, #1
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <SystemInit+0x28>)
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SystemInit+0x28>)
 80008ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SystemInit+0x28>)
 80008ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008be:	609a      	str	r2, [r3, #8]
#endif
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <uart_gpio_init>:
 */
#include "uart_driver.h"
#include "stm32f4xx_hal.h"

static void uart_gpio_init(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
	/*GPIO clock init */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <uart_gpio_init+0x60>)
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <uart_gpio_init+0x60>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <uart_gpio_init+0x60>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

	/*init gpio as alternative function*/
	GPIOA->MODER|= (0x02UL<<GPIO_MODER_MODER2_Pos)|(0x02UL<<GPIO_MODER_MODER3_Pos);	//alternative function
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <uart_gpio_init+0x64>)
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <uart_gpio_init+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80008fc:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR|= (3<<GPIO_OSPEEDR_OSPEED2_Pos)|(3<<GPIO_OSPEEDR_OSPEED3_Pos);	//Very high speed
 80008fe:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <uart_gpio_init+0x64>)
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <uart_gpio_init+0x64>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000908:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR|= (1<<GPIO_PUPDR_PUPD2_Pos)|(1<<GPIO_PUPDR_PUPD3_Pos);	//PUll up
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <uart_gpio_init+0x64>)
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <uart_gpio_init+0x64>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000914:	60d3      	str	r3, [r2, #12]
	GPIOA->AFR[0]|= (7<<GPIO_AFRL_AFSEL2_Pos)|(7<<GPIO_AFRL_AFSEL3_Pos);	//AF7 as uart2
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <uart_gpio_init+0x64>)
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <uart_gpio_init+0x64>)
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000920:	6213      	str	r3, [r2, #32]

}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <uart2_Init>:

void uart2_Init(void)
{
 8000938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
	uint32_t pclk=0;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
	/*inir uart pins*/
	uart_gpio_init();
 8000944:	f7ff ffc4 	bl	80008d0 <uart_gpio_init>
	/*uart clock init */
	__HAL_RCC_USART2_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4a59      	ldr	r2, [pc, #356]	; (8000ab4 <uart2_Init+0x17c>)
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <uart2_Init+0x17c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <uart2_Init+0x17c>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
	// tx and rx enable
	USART2->CR1|=USART_CR1_RE|USART_CR1_TE;
 8000964:	4a54      	ldr	r2, [pc, #336]	; (8000ab8 <uart2_Init+0x180>)
 8000966:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <uart2_Init+0x180>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	f043 030c 	orr.w	r3, r3, #12
 800096e:	60d3      	str	r3, [r2, #12]
	//baud rate
	pclk = HAL_RCC_GetPCLK1Freq();
 8000970:	f000 fe9a 	bl	80016a8 <HAL_RCC_GetPCLK1Freq>
 8000974:	60f8      	str	r0, [r7, #12]
	USART2->BRR  = UART_BRR_SAMPLING16(pclk, 115200);
 8000976:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <uart2_Init+0x180>)
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	460b      	mov	r3, r1
 8000984:	4614      	mov	r4, r2
 8000986:	18db      	adds	r3, r3, r3
 8000988:	eb44 0404 	adc.w	r4, r4, r4
 800098c:	185b      	adds	r3, r3, r1
 800098e:	eb44 0402 	adc.w	r4, r4, r2
 8000992:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8000996:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800099a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800099e:	4653      	mov	r3, sl
 80009a0:	465c      	mov	r4, fp
 80009a2:	eb13 0a01 	adds.w	sl, r3, r1
 80009a6:	eb44 0b02 	adc.w	fp, r4, r2
 80009aa:	4650      	mov	r0, sl
 80009ac:	4659      	mov	r1, fp
 80009ae:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	f7ff fc5b 	bl	8000270 <__aeabi_uldivmod>
 80009ba:	4603      	mov	r3, r0
 80009bc:	460c      	mov	r4, r1
 80009be:	461a      	mov	r2, r3
 80009c0:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <uart2_Init+0x184>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	460b      	mov	r3, r1
 80009d6:	4614      	mov	r4, r2
 80009d8:	18db      	adds	r3, r3, r3
 80009da:	eb44 0404 	adc.w	r4, r4, r4
 80009de:	185b      	adds	r3, r3, r1
 80009e0:	eb44 0402 	adc.w	r4, r4, r2
 80009e4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80009e8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80009ec:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80009f0:	4643      	mov	r3, r8
 80009f2:	464c      	mov	r4, r9
 80009f4:	eb13 0801 	adds.w	r8, r3, r1
 80009f8:	eb44 0902 	adc.w	r9, r4, r2
 80009fc:	4640      	mov	r0, r8
 80009fe:	4649      	mov	r1, r9
 8000a00:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	f7ff fc32 	bl	8000270 <__aeabi_uldivmod>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	460c      	mov	r4, r1
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <uart2_Init+0x184>)
 8000a14:	fba3 1302 	umull	r1, r3, r3, r2
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	2164      	movs	r1, #100	; 0x64
 8000a1c:	fb01 f303 	mul.w	r3, r1, r3
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	3332      	adds	r3, #50	; 0x32
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <uart2_Init+0x184>)
 8000a28:	fba2 1303 	umull	r1, r3, r2, r3
 8000a2c:	095b      	lsrs	r3, r3, #5
 8000a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a32:	eb0a 0803 	add.w	r8, sl, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	460b      	mov	r3, r1
 8000a40:	4614      	mov	r4, r2
 8000a42:	18db      	adds	r3, r3, r3
 8000a44:	eb44 0404 	adc.w	r4, r4, r4
 8000a48:	185b      	adds	r3, r3, r1
 8000a4a:	eb44 0402 	adc.w	r4, r4, r2
 8000a4e:	00e6      	lsls	r6, r4, #3
 8000a50:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8000a54:	00dd      	lsls	r5, r3, #3
 8000a56:	462b      	mov	r3, r5
 8000a58:	4634      	mov	r4, r6
 8000a5a:	185d      	adds	r5, r3, r1
 8000a5c:	eb44 0602 	adc.w	r6, r4, r2
 8000a60:	4628      	mov	r0, r5
 8000a62:	4631      	mov	r1, r6
 8000a64:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	f7ff fc00 	bl	8000270 <__aeabi_uldivmod>
 8000a70:	4603      	mov	r3, r0
 8000a72:	460c      	mov	r4, r1
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <uart2_Init+0x184>)
 8000a78:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7c:	095b      	lsrs	r3, r3, #5
 8000a7e:	2164      	movs	r1, #100	; 0x64
 8000a80:	fb01 f303 	mul.w	r3, r1, r3
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	3332      	adds	r3, #50	; 0x32
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <uart2_Init+0x184>)
 8000a8c:	fba2 1303 	umull	r1, r3, r2, r3
 8000a90:	095b      	lsrs	r3, r3, #5
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	4443      	add	r3, r8
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	6093      	str	r3, [r2, #8]
	/*uart enable*/
	USART2->CR1|=USART_CR1_UE;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <uart2_Init+0x180>)
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <uart2_Init+0x180>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	51eb851f 	.word	0x51eb851f

08000ac0 <uart_send_byte>:


uint8_t uart_send_byte(uint8_t ch)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (USART_SR_TXE))){} //TXE
 8000aca:	bf00      	nop
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <uart_send_byte+0x2c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f9      	beq.n	8000acc <uart_send_byte+0xc>
	USART2->DR=ch;
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <uart_send_byte+0x2c>)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	6053      	str	r3, [r2, #4]
	return ch;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40004400 	.word	0x40004400

08000af0 <receive_byte>:
		i++;
	}
}

int receive_byte(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	while(!(USART2->SR & (USART_SR_RXNE))){} //RXNE
 8000af4:	bf00      	nop
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <receive_byte+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f9      	beq.n	8000af6 <receive_byte+0x6>
	return USART2->DR;
 8000b02:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <receive_byte+0x20>)
 8000b04:	685b      	ldr	r3, [r3, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40004400 	.word	0x40004400

08000b14 <__io_putchar>:
#ifdef __GNUC__
/* You need this if you want use to redirect printf to uart */
int __io_putchar(int ch)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	733b      	strb	r3, [r7, #12]
	uart_send_byte(c[0]);
 8000b22:	7b3b      	ldrb	r3, [r7, #12]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffcb 	bl	8000ac0 <uart_send_byte>

	return ch;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_read>:

	return c;
}
#endif
int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	int c;


	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e017      	b.n	8000b76 <_read+0x42>
	{
		//*ptr++ = __io_getchar();
		c=receive_byte();
 8000b46:	f7ff ffd3 	bl	8000af0 <receive_byte>
 8000b4a:	6138      	str	r0, [r7, #16]
		if(c=='\r')
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	2b0d      	cmp	r3, #13
 8000b50:	d108      	bne.n	8000b64 <_read+0x30>
		{
			//c='\n';
			*ptr++ =c;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	60ba      	str	r2, [r7, #8]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]

			return (DataIdx+1);
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	e00d      	b.n	8000b80 <_read+0x4c>
		}
		*ptr++ =c;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbe3      	blt.n	8000b46 <_read+0x12>

	}

return len;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f90b 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fda0 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f915 	bl	8000e1a <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 f8eb 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000204 	.word	0x20000204

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000204 	.word	0x20000204

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	490d      	ldr	r1, [pc, #52]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	4909      	ldr	r1, [pc, #36]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	401a      	ands	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	1e59      	subs	r1, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff49 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e25b      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d075      	beq.n	8000f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e52:	4ba3      	ldr	r3, [pc, #652]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d00c      	beq.n	8000e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e5e:	4ba0      	ldr	r3, [pc, #640]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d112      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e6a:	4b9d      	ldr	r3, [pc, #628]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e76:	d10b      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d05b      	beq.n	8000f3c <HAL_RCC_OscConfig+0x108>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d157      	bne.n	8000f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e236      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e98:	d106      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x74>
 8000e9a:	4a91      	ldr	r2, [pc, #580]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000e9c:	4b90      	ldr	r3, [pc, #576]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e01d      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4a8b      	ldr	r2, [pc, #556]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000eb4:	4b8a      	ldr	r3, [pc, #552]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4a88      	ldr	r2, [pc, #544]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	4b87      	ldr	r3, [pc, #540]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
 8000ecc:	4a84      	ldr	r2, [pc, #528]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000ece:	4b84      	ldr	r3, [pc, #528]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4a81      	ldr	r2, [pc, #516]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	4b81      	ldr	r3, [pc, #516]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff feb2 	bl	8000c54 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff feae 	bl	8000c54 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	; 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e1fb      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xc0>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fe9e 	bl	8000c54 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fe9a 	bl	8000c54 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e1e7      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	4b6c      	ldr	r3, [pc, #432]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0xe8>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d063      	beq.n	8001012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f4a:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00b      	beq.n	8000f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f56:	4b62      	ldr	r3, [pc, #392]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d11c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f62:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d116      	bne.n	8000f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x152>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e1bb      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4956      	ldr	r1, [pc, #344]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f88:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e03a      	b.n	8001012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d020      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <HAL_RCC_OscConfig+0x2b0>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000faa:	f7ff fe53 	bl	8000c54 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fe4f 	bl	8000c54 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e19c      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4943      	ldr	r1, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
 8000fe4:	e015      	b.n	8001012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <HAL_RCC_OscConfig+0x2b0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fe32 	bl	8000c54 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fe2e 	bl	8000c54 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e17b      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d030      	beq.n	8001080 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d016      	beq.n	8001054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <HAL_RCC_OscConfig+0x2b4>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102c:	f7ff fe12 	bl	8000c54 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fe0e 	bl	8000c54 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e15b      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x200>
 8001052:	e015      	b.n	8001080 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_RCC_OscConfig+0x2b4>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fdfb 	bl	8000c54 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001062:	f7ff fdf7 	bl	8000c54 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e144      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8001076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f0      	bne.n	8001062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80a0 	beq.w	80011ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10f      	bne.n	80010be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_RCC_OscConfig+0x2b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d121      	bne.n	800110e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_RCC_OscConfig+0x2b8>)
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_RCC_OscConfig+0x2b8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fdbd 	bl	8000c54 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	e011      	b.n	8001102 <HAL_RCC_OscConfig+0x2ce>
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	42470000 	.word	0x42470000
 80010e8:	42470e80 	.word	0x42470e80
 80010ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f0:	f7ff fdb0 	bl	8000c54 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e0fd      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b81      	ldr	r3, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x4d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x2f0>
 8001116:	4a7d      	ldr	r2, [pc, #500]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001118:	4b7c      	ldr	r3, [pc, #496]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800111a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6713      	str	r3, [r2, #112]	; 0x70
 8001122:	e01c      	b.n	800115e <HAL_RCC_OscConfig+0x32a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b05      	cmp	r3, #5
 800112a:	d10c      	bne.n	8001146 <HAL_RCC_OscConfig+0x312>
 800112c:	4a77      	ldr	r2, [pc, #476]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6713      	str	r3, [r2, #112]	; 0x70
 8001138:	4a74      	ldr	r2, [pc, #464]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800113c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6713      	str	r3, [r2, #112]	; 0x70
 8001144:	e00b      	b.n	800115e <HAL_RCC_OscConfig+0x32a>
 8001146:	4a71      	ldr	r2, [pc, #452]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001148:	4b70      	ldr	r3, [pc, #448]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	6713      	str	r3, [r2, #112]	; 0x70
 8001152:	4a6e      	ldr	r2, [pc, #440]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001154:	4b6d      	ldr	r3, [pc, #436]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d015      	beq.n	8001192 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001166:	f7ff fd75 	bl	8000c54 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116c:	e00a      	b.n	8001184 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f7ff fd71 	bl	8000c54 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f241 3288 	movw	r2, #5000	; 0x1388
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0bc      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001184:	4b61      	ldr	r3, [pc, #388]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ee      	beq.n	800116e <HAL_RCC_OscConfig+0x33a>
 8001190:	e014      	b.n	80011bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fd5f 	bl	8000c54 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	f7ff fd5b 	bl	8000c54 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0a6      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 80011b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ee      	bne.n	800119a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d105      	bne.n	80011ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c2:	4a52      	ldr	r2, [pc, #328]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 80011c4:	4b51      	ldr	r3, [pc, #324]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8092 	beq.w	80012fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011d8:	4b4c      	ldr	r3, [pc, #304]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 030c 	and.w	r3, r3, #12
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d05c      	beq.n	800129e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d141      	bne.n	8001270 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ec:	4b48      	ldr	r3, [pc, #288]	; (8001310 <HAL_RCC_OscConfig+0x4dc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fd2f 	bl	8000c54 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff fd2b 	bl	8000c54 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e078      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001218:	493c      	ldr	r1, [pc, #240]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69da      	ldr	r2, [r3, #28]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	3b01      	subs	r3, #1
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <HAL_RCC_OscConfig+0x4dc>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fd04 	bl	8000c54 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fd00 	bl	8000c54 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e04d      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x41c>
 800126e:	e045      	b.n	80012fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_RCC_OscConfig+0x4dc>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fced 	bl	8000c54 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fce9 	bl	8000c54 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e036      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x44a>
 800129c:	e02e      	b.n	80012fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e029      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d11c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d115      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012d2:	4013      	ands	r3, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012d8:	4293      	cmp	r3, r2
 80012da:	d10d      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40007000 	.word	0x40007000
 800130c:	40023800 	.word	0x40023800
 8001310:	42470060 	.word	0x42470060

08001314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0cc      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 020f 	and.w	r2, r3, #15
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d20c      	bcs.n	8001350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 020f 	and.w	r2, r3, #15
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0b8      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001368:	4a59      	ldr	r2, [pc, #356]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138c:	4950      	ldr	r1, [pc, #320]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d044      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d119      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e07f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e067      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4937      	ldr	r1, [pc, #220]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 0203 	bic.w	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4313      	orrs	r3, r2
 8001402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff fc26 	bl	8000c54 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff fc22 	bl	8000c54 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e04f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 020f 	and.w	r2, r3, #15
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d90c      	bls.n	800145c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 020f 	and.w	r2, r3, #15
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e032      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001468:	4919      	ldr	r1, [pc, #100]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001486:	4912      	ldr	r1, [pc, #72]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149a:	f000 f821 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 800149e:	4601      	mov	r1, r0
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	fa21 f303 	lsr.w	r3, r1, r3
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb86 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00
 80014d0:	40023800 	.word	0x40023800
 80014d4:	08003448 	.word	0x08003448
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e4:	b08f      	sub	sp, #60	; 0x3c
 80014e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f8:	4b62      	ldr	r3, [pc, #392]	; (8001684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b04      	cmp	r3, #4
 8001502:	d007      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x34>
 8001504:	2b08      	cmp	r3, #8
 8001506:	d008      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x3a>
 8001508:	2b00      	cmp	r3, #0
 800150a:	f040 80b2 	bne.w	8001672 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800150e:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001512:	e0b1      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001518:	e0ae      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d04e      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001530:	4b54      	ldr	r3, [pc, #336]	; (8001684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	f04f 0400 	mov.w	r4, #0
 800153a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	ea01 0103 	and.w	r1, r1, r3
 8001546:	ea02 0204 	and.w	r2, r2, r4
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	0160      	lsls	r0, r4, #5
 8001550:	6278      	str	r0, [r7, #36]	; 0x24
 8001552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001554:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001558:	6278      	str	r0, [r7, #36]	; 0x24
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001562:	1a5b      	subs	r3, r3, r1
 8001564:	eb64 0402 	sbc.w	r4, r4, r2
 8001568:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800156c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001570:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001574:	ebb8 0803 	subs.w	r8, r8, r3
 8001578:	eb69 0904 	sbc.w	r9, r9, r4
 800157c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001594:	eb18 0801 	adds.w	r8, r8, r1
 8001598:	eb49 0902 	adc.w	r9, r9, r2
 800159c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015b4:	4640      	mov	r0, r8
 80015b6:	4649      	mov	r1, r9
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	f04f 0400 	mov.w	r4, #0
 80015be:	461a      	mov	r2, r3
 80015c0:	4623      	mov	r3, r4
 80015c2:	f7fe fe55 	bl	8000270 <__aeabi_uldivmod>
 80015c6:	4603      	mov	r3, r0
 80015c8:	460c      	mov	r4, r1
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
 80015cc:	e043      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	ea01 0103 	and.w	r1, r1, r3
 80015e4:	ea02 0204 	and.w	r2, r2, r4
 80015e8:	460b      	mov	r3, r1
 80015ea:	4614      	mov	r4, r2
 80015ec:	0160      	lsls	r0, r4, #5
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001600:	1a5b      	subs	r3, r3, r1
 8001602:	eb64 0402 	sbc.w	r4, r4, r2
 8001606:	01a6      	lsls	r6, r4, #6
 8001608:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800160c:	019d      	lsls	r5, r3, #6
 800160e:	1aed      	subs	r5, r5, r3
 8001610:	eb66 0604 	sbc.w	r6, r6, r4
 8001614:	00f3      	lsls	r3, r6, #3
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	00eb      	lsls	r3, r5, #3
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001628:	186d      	adds	r5, r5, r1
 800162a:	eb46 0602 	adc.w	r6, r6, r2
 800162e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001632:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001636:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800163a:	4655      	mov	r5, sl
 800163c:	465e      	mov	r6, fp
 800163e:	4628      	mov	r0, r5
 8001640:	4631      	mov	r1, r6
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	f7fe fe10 	bl	8000270 <__aeabi_uldivmod>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	3301      	adds	r3, #1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001670:	e002      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001676:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800167a:	4618      	mov	r0, r3
 800167c:	373c      	adds	r7, #60	; 0x3c
 800167e:	46bd      	mov	sp, r7
 8001680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	00f42400 	.word	0x00f42400
 800168c:	007a1200 	.word	0x007a1200

08001690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000

080016a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016ac:	f7ff fff0 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016b0:	4601      	mov	r1, r0
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	0a9b      	lsrs	r3, r3, #10
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	08003458 	.word	0x08003458

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fa:	f7ff f8d3 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f000 f817 	bl	8001730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7fe ff3d 	bl	8000580 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800170c:	08003630 	.word	0x08003630
  ldr  r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001714:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001718:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800171c:	2000020c 	.word	0x2000020c

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <__errno>:
 8001724:	4b01      	ldr	r3, [pc, #4]	; (800172c <__errno+0x8>)
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000000c 	.word	0x2000000c

08001730 <__libc_init_array>:
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	4e0d      	ldr	r6, [pc, #52]	; (8001768 <__libc_init_array+0x38>)
 8001734:	4c0d      	ldr	r4, [pc, #52]	; (800176c <__libc_init_array+0x3c>)
 8001736:	1ba4      	subs	r4, r4, r6
 8001738:	10a4      	asrs	r4, r4, #2
 800173a:	2500      	movs	r5, #0
 800173c:	42a5      	cmp	r5, r4
 800173e:	d109      	bne.n	8001754 <__libc_init_array+0x24>
 8001740:	4e0b      	ldr	r6, [pc, #44]	; (8001770 <__libc_init_array+0x40>)
 8001742:	4c0c      	ldr	r4, [pc, #48]	; (8001774 <__libc_init_array+0x44>)
 8001744:	f001 fe54 	bl	80033f0 <_init>
 8001748:	1ba4      	subs	r4, r4, r6
 800174a:	10a4      	asrs	r4, r4, #2
 800174c:	2500      	movs	r5, #0
 800174e:	42a5      	cmp	r5, r4
 8001750:	d105      	bne.n	800175e <__libc_init_array+0x2e>
 8001752:	bd70      	pop	{r4, r5, r6, pc}
 8001754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001758:	4798      	blx	r3
 800175a:	3501      	adds	r5, #1
 800175c:	e7ee      	b.n	800173c <__libc_init_array+0xc>
 800175e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001762:	4798      	blx	r3
 8001764:	3501      	adds	r5, #1
 8001766:	e7f2      	b.n	800174e <__libc_init_array+0x1e>
 8001768:	08003628 	.word	0x08003628
 800176c:	08003628 	.word	0x08003628
 8001770:	08003628 	.word	0x08003628
 8001774:	0800362c 	.word	0x0800362c

08001778 <memset>:
 8001778:	4402      	add	r2, r0
 800177a:	4603      	mov	r3, r0
 800177c:	4293      	cmp	r3, r2
 800177e:	d100      	bne.n	8001782 <memset+0xa>
 8001780:	4770      	bx	lr
 8001782:	f803 1b01 	strb.w	r1, [r3], #1
 8001786:	e7f9      	b.n	800177c <memset+0x4>

08001788 <iprintf>:
 8001788:	b40f      	push	{r0, r1, r2, r3}
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <iprintf+0x2c>)
 800178c:	b513      	push	{r0, r1, r4, lr}
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	b124      	cbz	r4, 800179c <iprintf+0x14>
 8001792:	69a3      	ldr	r3, [r4, #24]
 8001794:	b913      	cbnz	r3, 800179c <iprintf+0x14>
 8001796:	4620      	mov	r0, r4
 8001798:	f000 fb04 	bl	8001da4 <__sinit>
 800179c:	ab05      	add	r3, sp, #20
 800179e:	9a04      	ldr	r2, [sp, #16]
 80017a0:	68a1      	ldr	r1, [r4, #8]
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	4620      	mov	r0, r4
 80017a6:	f000 fce5 	bl	8002174 <_vfiprintf_r>
 80017aa:	b002      	add	sp, #8
 80017ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017b0:	b004      	add	sp, #16
 80017b2:	4770      	bx	lr
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <_puts_r>:
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	460e      	mov	r6, r1
 80017bc:	4605      	mov	r5, r0
 80017be:	b118      	cbz	r0, 80017c8 <_puts_r+0x10>
 80017c0:	6983      	ldr	r3, [r0, #24]
 80017c2:	b90b      	cbnz	r3, 80017c8 <_puts_r+0x10>
 80017c4:	f000 faee 	bl	8001da4 <__sinit>
 80017c8:	69ab      	ldr	r3, [r5, #24]
 80017ca:	68ac      	ldr	r4, [r5, #8]
 80017cc:	b913      	cbnz	r3, 80017d4 <_puts_r+0x1c>
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 fae8 	bl	8001da4 <__sinit>
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <_puts_r+0xac>)
 80017d6:	429c      	cmp	r4, r3
 80017d8:	d117      	bne.n	800180a <_puts_r+0x52>
 80017da:	686c      	ldr	r4, [r5, #4]
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	071b      	lsls	r3, r3, #28
 80017e0:	d51d      	bpl.n	800181e <_puts_r+0x66>
 80017e2:	6923      	ldr	r3, [r4, #16]
 80017e4:	b1db      	cbz	r3, 800181e <_puts_r+0x66>
 80017e6:	3e01      	subs	r6, #1
 80017e8:	68a3      	ldr	r3, [r4, #8]
 80017ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017ee:	3b01      	subs	r3, #1
 80017f0:	60a3      	str	r3, [r4, #8]
 80017f2:	b9e9      	cbnz	r1, 8001830 <_puts_r+0x78>
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da2e      	bge.n	8001856 <_puts_r+0x9e>
 80017f8:	4622      	mov	r2, r4
 80017fa:	210a      	movs	r1, #10
 80017fc:	4628      	mov	r0, r5
 80017fe:	f000 f90d 	bl	8001a1c <__swbuf_r>
 8001802:	3001      	adds	r0, #1
 8001804:	d011      	beq.n	800182a <_puts_r+0x72>
 8001806:	200a      	movs	r0, #10
 8001808:	bd70      	pop	{r4, r5, r6, pc}
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <_puts_r+0xb0>)
 800180c:	429c      	cmp	r4, r3
 800180e:	d101      	bne.n	8001814 <_puts_r+0x5c>
 8001810:	68ac      	ldr	r4, [r5, #8]
 8001812:	e7e3      	b.n	80017dc <_puts_r+0x24>
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <_puts_r+0xb4>)
 8001816:	429c      	cmp	r4, r3
 8001818:	bf08      	it	eq
 800181a:	68ec      	ldreq	r4, [r5, #12]
 800181c:	e7de      	b.n	80017dc <_puts_r+0x24>
 800181e:	4621      	mov	r1, r4
 8001820:	4628      	mov	r0, r5
 8001822:	f000 f94d 	bl	8001ac0 <__swsetup_r>
 8001826:	2800      	cmp	r0, #0
 8001828:	d0dd      	beq.n	80017e6 <_puts_r+0x2e>
 800182a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182e:	bd70      	pop	{r4, r5, r6, pc}
 8001830:	2b00      	cmp	r3, #0
 8001832:	da04      	bge.n	800183e <_puts_r+0x86>
 8001834:	69a2      	ldr	r2, [r4, #24]
 8001836:	4293      	cmp	r3, r2
 8001838:	db06      	blt.n	8001848 <_puts_r+0x90>
 800183a:	290a      	cmp	r1, #10
 800183c:	d004      	beq.n	8001848 <_puts_r+0x90>
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	6022      	str	r2, [r4, #0]
 8001844:	7019      	strb	r1, [r3, #0]
 8001846:	e7cf      	b.n	80017e8 <_puts_r+0x30>
 8001848:	4622      	mov	r2, r4
 800184a:	4628      	mov	r0, r5
 800184c:	f000 f8e6 	bl	8001a1c <__swbuf_r>
 8001850:	3001      	adds	r0, #1
 8001852:	d1c9      	bne.n	80017e8 <_puts_r+0x30>
 8001854:	e7e9      	b.n	800182a <_puts_r+0x72>
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	200a      	movs	r0, #10
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	6022      	str	r2, [r4, #0]
 800185e:	7018      	strb	r0, [r3, #0]
 8001860:	bd70      	pop	{r4, r5, r6, pc}
 8001862:	bf00      	nop
 8001864:	08003484 	.word	0x08003484
 8001868:	080034a4 	.word	0x080034a4
 800186c:	08003464 	.word	0x08003464

08001870 <puts>:
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <puts+0xc>)
 8001872:	4601      	mov	r1, r0
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f7ff bf9f 	b.w	80017b8 <_puts_r>
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c

08001880 <iscanf>:
 8001880:	b40f      	push	{r0, r1, r2, r3}
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <iscanf+0x2c>)
 8001884:	b513      	push	{r0, r1, r4, lr}
 8001886:	681c      	ldr	r4, [r3, #0]
 8001888:	b124      	cbz	r4, 8001894 <iscanf+0x14>
 800188a:	69a3      	ldr	r3, [r4, #24]
 800188c:	b913      	cbnz	r3, 8001894 <iscanf+0x14>
 800188e:	4620      	mov	r0, r4
 8001890:	f000 fa88 	bl	8001da4 <__sinit>
 8001894:	ab05      	add	r3, sp, #20
 8001896:	9a04      	ldr	r2, [sp, #16]
 8001898:	6861      	ldr	r1, [r4, #4]
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	4620      	mov	r0, r4
 800189e:	f001 f869 	bl	8002974 <_vfiscanf_r>
 80018a2:	b002      	add	sp, #8
 80018a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018a8:	b004      	add	sp, #16
 80018aa:	4770      	bx	lr
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <setbuf>:
 80018b0:	2900      	cmp	r1, #0
 80018b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b6:	bf0c      	ite	eq
 80018b8:	2202      	moveq	r2, #2
 80018ba:	2200      	movne	r2, #0
 80018bc:	f000 b800 	b.w	80018c0 <setvbuf>

080018c0 <setvbuf>:
 80018c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018c4:	461d      	mov	r5, r3
 80018c6:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <setvbuf+0x14c>)
 80018c8:	681e      	ldr	r6, [r3, #0]
 80018ca:	4604      	mov	r4, r0
 80018cc:	460f      	mov	r7, r1
 80018ce:	4690      	mov	r8, r2
 80018d0:	b126      	cbz	r6, 80018dc <setvbuf+0x1c>
 80018d2:	69b3      	ldr	r3, [r6, #24]
 80018d4:	b913      	cbnz	r3, 80018dc <setvbuf+0x1c>
 80018d6:	4630      	mov	r0, r6
 80018d8:	f000 fa64 	bl	8001da4 <__sinit>
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <setvbuf+0x150>)
 80018de:	429c      	cmp	r4, r3
 80018e0:	d152      	bne.n	8001988 <setvbuf+0xc8>
 80018e2:	6874      	ldr	r4, [r6, #4]
 80018e4:	f1b8 0f02 	cmp.w	r8, #2
 80018e8:	d006      	beq.n	80018f8 <setvbuf+0x38>
 80018ea:	f1b8 0f01 	cmp.w	r8, #1
 80018ee:	f200 8089 	bhi.w	8001a04 <setvbuf+0x144>
 80018f2:	2d00      	cmp	r5, #0
 80018f4:	f2c0 8086 	blt.w	8001a04 <setvbuf+0x144>
 80018f8:	4621      	mov	r1, r4
 80018fa:	4630      	mov	r0, r6
 80018fc:	f000 f9d6 	bl	8001cac <_fflush_r>
 8001900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001902:	b141      	cbz	r1, 8001916 <setvbuf+0x56>
 8001904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001908:	4299      	cmp	r1, r3
 800190a:	d002      	beq.n	8001912 <setvbuf+0x52>
 800190c:	4630      	mov	r0, r6
 800190e:	f000 fb5b 	bl	8001fc8 <_free_r>
 8001912:	2300      	movs	r3, #0
 8001914:	6363      	str	r3, [r4, #52]	; 0x34
 8001916:	2300      	movs	r3, #0
 8001918:	61a3      	str	r3, [r4, #24]
 800191a:	6063      	str	r3, [r4, #4]
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	d503      	bpl.n	800192a <setvbuf+0x6a>
 8001922:	6921      	ldr	r1, [r4, #16]
 8001924:	4630      	mov	r0, r6
 8001926:	f000 fb4f 	bl	8001fc8 <_free_r>
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001930:	f023 0303 	bic.w	r3, r3, #3
 8001934:	f1b8 0f02 	cmp.w	r8, #2
 8001938:	81a3      	strh	r3, [r4, #12]
 800193a:	d05d      	beq.n	80019f8 <setvbuf+0x138>
 800193c:	ab01      	add	r3, sp, #4
 800193e:	466a      	mov	r2, sp
 8001940:	4621      	mov	r1, r4
 8001942:	4630      	mov	r0, r6
 8001944:	f000 fad4 	bl	8001ef0 <__swhatbuf_r>
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	4318      	orrs	r0, r3
 800194c:	81a0      	strh	r0, [r4, #12]
 800194e:	bb2d      	cbnz	r5, 800199c <setvbuf+0xdc>
 8001950:	9d00      	ldr	r5, [sp, #0]
 8001952:	4628      	mov	r0, r5
 8001954:	f000 fb30 	bl	8001fb8 <malloc>
 8001958:	4607      	mov	r7, r0
 800195a:	2800      	cmp	r0, #0
 800195c:	d14e      	bne.n	80019fc <setvbuf+0x13c>
 800195e:	f8dd 9000 	ldr.w	r9, [sp]
 8001962:	45a9      	cmp	r9, r5
 8001964:	d13c      	bne.n	80019e0 <setvbuf+0x120>
 8001966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800196a:	89a3      	ldrh	r3, [r4, #12]
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	81a3      	strh	r3, [r4, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	60a3      	str	r3, [r4, #8]
 8001976:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800197a:	6023      	str	r3, [r4, #0]
 800197c:	6123      	str	r3, [r4, #16]
 800197e:	2301      	movs	r3, #1
 8001980:	6163      	str	r3, [r4, #20]
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <setvbuf+0x154>)
 800198a:	429c      	cmp	r4, r3
 800198c:	d101      	bne.n	8001992 <setvbuf+0xd2>
 800198e:	68b4      	ldr	r4, [r6, #8]
 8001990:	e7a8      	b.n	80018e4 <setvbuf+0x24>
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <setvbuf+0x158>)
 8001994:	429c      	cmp	r4, r3
 8001996:	bf08      	it	eq
 8001998:	68f4      	ldreq	r4, [r6, #12]
 800199a:	e7a3      	b.n	80018e4 <setvbuf+0x24>
 800199c:	2f00      	cmp	r7, #0
 800199e:	d0d8      	beq.n	8001952 <setvbuf+0x92>
 80019a0:	69b3      	ldr	r3, [r6, #24]
 80019a2:	b913      	cbnz	r3, 80019aa <setvbuf+0xea>
 80019a4:	4630      	mov	r0, r6
 80019a6:	f000 f9fd 	bl	8001da4 <__sinit>
 80019aa:	f1b8 0f01 	cmp.w	r8, #1
 80019ae:	bf08      	it	eq
 80019b0:	89a3      	ldrheq	r3, [r4, #12]
 80019b2:	6027      	str	r7, [r4, #0]
 80019b4:	bf04      	itt	eq
 80019b6:	f043 0301 	orreq.w	r3, r3, #1
 80019ba:	81a3      	strheq	r3, [r4, #12]
 80019bc:	89a3      	ldrh	r3, [r4, #12]
 80019be:	6127      	str	r7, [r4, #16]
 80019c0:	f013 0008 	ands.w	r0, r3, #8
 80019c4:	6165      	str	r5, [r4, #20]
 80019c6:	d01b      	beq.n	8001a00 <setvbuf+0x140>
 80019c8:	f013 0001 	ands.w	r0, r3, #1
 80019cc:	bf18      	it	ne
 80019ce:	426d      	negne	r5, r5
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	bf1d      	ittte	ne
 80019d6:	60a3      	strne	r3, [r4, #8]
 80019d8:	61a5      	strne	r5, [r4, #24]
 80019da:	4618      	movne	r0, r3
 80019dc:	60a5      	streq	r5, [r4, #8]
 80019de:	e7d0      	b.n	8001982 <setvbuf+0xc2>
 80019e0:	4648      	mov	r0, r9
 80019e2:	f000 fae9 	bl	8001fb8 <malloc>
 80019e6:	4607      	mov	r7, r0
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d0bc      	beq.n	8001966 <setvbuf+0xa6>
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	81a3      	strh	r3, [r4, #12]
 80019f4:	464d      	mov	r5, r9
 80019f6:	e7d3      	b.n	80019a0 <setvbuf+0xe0>
 80019f8:	2000      	movs	r0, #0
 80019fa:	e7b6      	b.n	800196a <setvbuf+0xaa>
 80019fc:	46a9      	mov	r9, r5
 80019fe:	e7f5      	b.n	80019ec <setvbuf+0x12c>
 8001a00:	60a0      	str	r0, [r4, #8]
 8001a02:	e7be      	b.n	8001982 <setvbuf+0xc2>
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a08:	e7bb      	b.n	8001982 <setvbuf+0xc2>
 8001a0a:	bf00      	nop
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	08003484 	.word	0x08003484
 8001a14:	080034a4 	.word	0x080034a4
 8001a18:	08003464 	.word	0x08003464

08001a1c <__swbuf_r>:
 8001a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1e:	460e      	mov	r6, r1
 8001a20:	4614      	mov	r4, r2
 8001a22:	4605      	mov	r5, r0
 8001a24:	b118      	cbz	r0, 8001a2e <__swbuf_r+0x12>
 8001a26:	6983      	ldr	r3, [r0, #24]
 8001a28:	b90b      	cbnz	r3, 8001a2e <__swbuf_r+0x12>
 8001a2a:	f000 f9bb 	bl	8001da4 <__sinit>
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <__swbuf_r+0x98>)
 8001a30:	429c      	cmp	r4, r3
 8001a32:	d12a      	bne.n	8001a8a <__swbuf_r+0x6e>
 8001a34:	686c      	ldr	r4, [r5, #4]
 8001a36:	69a3      	ldr	r3, [r4, #24]
 8001a38:	60a3      	str	r3, [r4, #8]
 8001a3a:	89a3      	ldrh	r3, [r4, #12]
 8001a3c:	071a      	lsls	r2, r3, #28
 8001a3e:	d52e      	bpl.n	8001a9e <__swbuf_r+0x82>
 8001a40:	6923      	ldr	r3, [r4, #16]
 8001a42:	b363      	cbz	r3, 8001a9e <__swbuf_r+0x82>
 8001a44:	6923      	ldr	r3, [r4, #16]
 8001a46:	6820      	ldr	r0, [r4, #0]
 8001a48:	1ac0      	subs	r0, r0, r3
 8001a4a:	6963      	ldr	r3, [r4, #20]
 8001a4c:	b2f6      	uxtb	r6, r6
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	4637      	mov	r7, r6
 8001a52:	db04      	blt.n	8001a5e <__swbuf_r+0x42>
 8001a54:	4621      	mov	r1, r4
 8001a56:	4628      	mov	r0, r5
 8001a58:	f000 f928 	bl	8001cac <_fflush_r>
 8001a5c:	bb28      	cbnz	r0, 8001aaa <__swbuf_r+0x8e>
 8001a5e:	68a3      	ldr	r3, [r4, #8]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60a3      	str	r3, [r4, #8]
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	6022      	str	r2, [r4, #0]
 8001a6a:	701e      	strb	r6, [r3, #0]
 8001a6c:	6963      	ldr	r3, [r4, #20]
 8001a6e:	3001      	adds	r0, #1
 8001a70:	4298      	cmp	r0, r3
 8001a72:	d004      	beq.n	8001a7e <__swbuf_r+0x62>
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	07db      	lsls	r3, r3, #31
 8001a78:	d519      	bpl.n	8001aae <__swbuf_r+0x92>
 8001a7a:	2e0a      	cmp	r6, #10
 8001a7c:	d117      	bne.n	8001aae <__swbuf_r+0x92>
 8001a7e:	4621      	mov	r1, r4
 8001a80:	4628      	mov	r0, r5
 8001a82:	f000 f913 	bl	8001cac <_fflush_r>
 8001a86:	b190      	cbz	r0, 8001aae <__swbuf_r+0x92>
 8001a88:	e00f      	b.n	8001aaa <__swbuf_r+0x8e>
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <__swbuf_r+0x9c>)
 8001a8c:	429c      	cmp	r4, r3
 8001a8e:	d101      	bne.n	8001a94 <__swbuf_r+0x78>
 8001a90:	68ac      	ldr	r4, [r5, #8]
 8001a92:	e7d0      	b.n	8001a36 <__swbuf_r+0x1a>
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <__swbuf_r+0xa0>)
 8001a96:	429c      	cmp	r4, r3
 8001a98:	bf08      	it	eq
 8001a9a:	68ec      	ldreq	r4, [r5, #12]
 8001a9c:	e7cb      	b.n	8001a36 <__swbuf_r+0x1a>
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f000 f80d 	bl	8001ac0 <__swsetup_r>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d0cc      	beq.n	8001a44 <__swbuf_r+0x28>
 8001aaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001aae:	4638      	mov	r0, r7
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08003484 	.word	0x08003484
 8001ab8:	080034a4 	.word	0x080034a4
 8001abc:	08003464 	.word	0x08003464

08001ac0 <__swsetup_r>:
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <__swsetup_r+0xcc>)
 8001ac2:	b570      	push	{r4, r5, r6, lr}
 8001ac4:	681d      	ldr	r5, [r3, #0]
 8001ac6:	4606      	mov	r6, r0
 8001ac8:	460c      	mov	r4, r1
 8001aca:	b125      	cbz	r5, 8001ad6 <__swsetup_r+0x16>
 8001acc:	69ab      	ldr	r3, [r5, #24]
 8001ace:	b913      	cbnz	r3, 8001ad6 <__swsetup_r+0x16>
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f000 f967 	bl	8001da4 <__sinit>
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <__swsetup_r+0xd0>)
 8001ad8:	429c      	cmp	r4, r3
 8001ada:	d10f      	bne.n	8001afc <__swsetup_r+0x3c>
 8001adc:	686c      	ldr	r4, [r5, #4]
 8001ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	0715      	lsls	r5, r2, #28
 8001ae6:	d42c      	bmi.n	8001b42 <__swsetup_r+0x82>
 8001ae8:	06d0      	lsls	r0, r2, #27
 8001aea:	d411      	bmi.n	8001b10 <__swsetup_r+0x50>
 8001aec:	2209      	movs	r2, #9
 8001aee:	6032      	str	r2, [r6, #0]
 8001af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af4:	81a3      	strh	r3, [r4, #12]
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <__swsetup_r+0xd4>)
 8001afe:	429c      	cmp	r4, r3
 8001b00:	d101      	bne.n	8001b06 <__swsetup_r+0x46>
 8001b02:	68ac      	ldr	r4, [r5, #8]
 8001b04:	e7eb      	b.n	8001ade <__swsetup_r+0x1e>
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <__swsetup_r+0xd8>)
 8001b08:	429c      	cmp	r4, r3
 8001b0a:	bf08      	it	eq
 8001b0c:	68ec      	ldreq	r4, [r5, #12]
 8001b0e:	e7e6      	b.n	8001ade <__swsetup_r+0x1e>
 8001b10:	0751      	lsls	r1, r2, #29
 8001b12:	d512      	bpl.n	8001b3a <__swsetup_r+0x7a>
 8001b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b16:	b141      	cbz	r1, 8001b2a <__swsetup_r+0x6a>
 8001b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b1c:	4299      	cmp	r1, r3
 8001b1e:	d002      	beq.n	8001b26 <__swsetup_r+0x66>
 8001b20:	4630      	mov	r0, r6
 8001b22:	f000 fa51 	bl	8001fc8 <_free_r>
 8001b26:	2300      	movs	r3, #0
 8001b28:	6363      	str	r3, [r4, #52]	; 0x34
 8001b2a:	89a3      	ldrh	r3, [r4, #12]
 8001b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b30:	81a3      	strh	r3, [r4, #12]
 8001b32:	2300      	movs	r3, #0
 8001b34:	6063      	str	r3, [r4, #4]
 8001b36:	6923      	ldr	r3, [r4, #16]
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	81a3      	strh	r3, [r4, #12]
 8001b42:	6923      	ldr	r3, [r4, #16]
 8001b44:	b94b      	cbnz	r3, 8001b5a <__swsetup_r+0x9a>
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b50:	d003      	beq.n	8001b5a <__swsetup_r+0x9a>
 8001b52:	4621      	mov	r1, r4
 8001b54:	4630      	mov	r0, r6
 8001b56:	f000 f9ef 	bl	8001f38 <__smakebuf_r>
 8001b5a:	89a2      	ldrh	r2, [r4, #12]
 8001b5c:	f012 0301 	ands.w	r3, r2, #1
 8001b60:	d00c      	beq.n	8001b7c <__swsetup_r+0xbc>
 8001b62:	2300      	movs	r3, #0
 8001b64:	60a3      	str	r3, [r4, #8]
 8001b66:	6963      	ldr	r3, [r4, #20]
 8001b68:	425b      	negs	r3, r3
 8001b6a:	61a3      	str	r3, [r4, #24]
 8001b6c:	6923      	ldr	r3, [r4, #16]
 8001b6e:	b953      	cbnz	r3, 8001b86 <__swsetup_r+0xc6>
 8001b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001b78:	d1ba      	bne.n	8001af0 <__swsetup_r+0x30>
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	0792      	lsls	r2, r2, #30
 8001b7e:	bf58      	it	pl
 8001b80:	6963      	ldrpl	r3, [r4, #20]
 8001b82:	60a3      	str	r3, [r4, #8]
 8001b84:	e7f2      	b.n	8001b6c <__swsetup_r+0xac>
 8001b86:	2000      	movs	r0, #0
 8001b88:	e7f7      	b.n	8001b7a <__swsetup_r+0xba>
 8001b8a:	bf00      	nop
 8001b8c:	2000000c 	.word	0x2000000c
 8001b90:	08003484 	.word	0x08003484
 8001b94:	080034a4 	.word	0x080034a4
 8001b98:	08003464 	.word	0x08003464

08001b9c <__sflush_r>:
 8001b9c:	898a      	ldrh	r2, [r1, #12]
 8001b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	0710      	lsls	r0, r2, #28
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	d45a      	bmi.n	8001c60 <__sflush_r+0xc4>
 8001baa:	684b      	ldr	r3, [r1, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dc05      	bgt.n	8001bbc <__sflush_r+0x20>
 8001bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dc02      	bgt.n	8001bbc <__sflush_r+0x20>
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bbe:	2e00      	cmp	r6, #0
 8001bc0:	d0f9      	beq.n	8001bb6 <__sflush_r+0x1a>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bc8:	682f      	ldr	r7, [r5, #0]
 8001bca:	602b      	str	r3, [r5, #0]
 8001bcc:	d033      	beq.n	8001c36 <__sflush_r+0x9a>
 8001bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bd0:	89a3      	ldrh	r3, [r4, #12]
 8001bd2:	075a      	lsls	r2, r3, #29
 8001bd4:	d505      	bpl.n	8001be2 <__sflush_r+0x46>
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	1ac0      	subs	r0, r0, r3
 8001bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bdc:	b10b      	cbz	r3, 8001be2 <__sflush_r+0x46>
 8001bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001be0:	1ac0      	subs	r0, r0, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	4602      	mov	r2, r0
 8001be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001be8:	6a21      	ldr	r1, [r4, #32]
 8001bea:	4628      	mov	r0, r5
 8001bec:	47b0      	blx	r6
 8001bee:	1c43      	adds	r3, r0, #1
 8001bf0:	89a3      	ldrh	r3, [r4, #12]
 8001bf2:	d106      	bne.n	8001c02 <__sflush_r+0x66>
 8001bf4:	6829      	ldr	r1, [r5, #0]
 8001bf6:	291d      	cmp	r1, #29
 8001bf8:	d84b      	bhi.n	8001c92 <__sflush_r+0xf6>
 8001bfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ca8 <__sflush_r+0x10c>)
 8001bfc:	40ca      	lsrs	r2, r1
 8001bfe:	07d6      	lsls	r6, r2, #31
 8001c00:	d547      	bpl.n	8001c92 <__sflush_r+0xf6>
 8001c02:	2200      	movs	r2, #0
 8001c04:	6062      	str	r2, [r4, #4]
 8001c06:	04d9      	lsls	r1, r3, #19
 8001c08:	6922      	ldr	r2, [r4, #16]
 8001c0a:	6022      	str	r2, [r4, #0]
 8001c0c:	d504      	bpl.n	8001c18 <__sflush_r+0x7c>
 8001c0e:	1c42      	adds	r2, r0, #1
 8001c10:	d101      	bne.n	8001c16 <__sflush_r+0x7a>
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	b903      	cbnz	r3, 8001c18 <__sflush_r+0x7c>
 8001c16:	6560      	str	r0, [r4, #84]	; 0x54
 8001c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c1a:	602f      	str	r7, [r5, #0]
 8001c1c:	2900      	cmp	r1, #0
 8001c1e:	d0ca      	beq.n	8001bb6 <__sflush_r+0x1a>
 8001c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c24:	4299      	cmp	r1, r3
 8001c26:	d002      	beq.n	8001c2e <__sflush_r+0x92>
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f000 f9cd 	bl	8001fc8 <_free_r>
 8001c2e:	2000      	movs	r0, #0
 8001c30:	6360      	str	r0, [r4, #52]	; 0x34
 8001c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c36:	6a21      	ldr	r1, [r4, #32]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	47b0      	blx	r6
 8001c3e:	1c41      	adds	r1, r0, #1
 8001c40:	d1c6      	bne.n	8001bd0 <__sflush_r+0x34>
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0c3      	beq.n	8001bd0 <__sflush_r+0x34>
 8001c48:	2b1d      	cmp	r3, #29
 8001c4a:	d001      	beq.n	8001c50 <__sflush_r+0xb4>
 8001c4c:	2b16      	cmp	r3, #22
 8001c4e:	d101      	bne.n	8001c54 <__sflush_r+0xb8>
 8001c50:	602f      	str	r7, [r5, #0]
 8001c52:	e7b0      	b.n	8001bb6 <__sflush_r+0x1a>
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5a:	81a3      	strh	r3, [r4, #12]
 8001c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c60:	690f      	ldr	r7, [r1, #16]
 8001c62:	2f00      	cmp	r7, #0
 8001c64:	d0a7      	beq.n	8001bb6 <__sflush_r+0x1a>
 8001c66:	0793      	lsls	r3, r2, #30
 8001c68:	680e      	ldr	r6, [r1, #0]
 8001c6a:	bf08      	it	eq
 8001c6c:	694b      	ldreq	r3, [r1, #20]
 8001c6e:	600f      	str	r7, [r1, #0]
 8001c70:	bf18      	it	ne
 8001c72:	2300      	movne	r3, #0
 8001c74:	eba6 0807 	sub.w	r8, r6, r7
 8001c78:	608b      	str	r3, [r1, #8]
 8001c7a:	f1b8 0f00 	cmp.w	r8, #0
 8001c7e:	dd9a      	ble.n	8001bb6 <__sflush_r+0x1a>
 8001c80:	4643      	mov	r3, r8
 8001c82:	463a      	mov	r2, r7
 8001c84:	6a21      	ldr	r1, [r4, #32]
 8001c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c88:	4628      	mov	r0, r5
 8001c8a:	47b0      	blx	r6
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	dc07      	bgt.n	8001ca0 <__sflush_r+0x104>
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c96:	81a3      	strh	r3, [r4, #12]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ca0:	4407      	add	r7, r0
 8001ca2:	eba8 0800 	sub.w	r8, r8, r0
 8001ca6:	e7e8      	b.n	8001c7a <__sflush_r+0xde>
 8001ca8:	20400001 	.word	0x20400001

08001cac <_fflush_r>:
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	690b      	ldr	r3, [r1, #16]
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	b1db      	cbz	r3, 8001cee <_fflush_r+0x42>
 8001cb6:	b118      	cbz	r0, 8001cc0 <_fflush_r+0x14>
 8001cb8:	6983      	ldr	r3, [r0, #24]
 8001cba:	b90b      	cbnz	r3, 8001cc0 <_fflush_r+0x14>
 8001cbc:	f000 f872 	bl	8001da4 <__sinit>
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <_fflush_r+0x48>)
 8001cc2:	429c      	cmp	r4, r3
 8001cc4:	d109      	bne.n	8001cda <_fflush_r+0x2e>
 8001cc6:	686c      	ldr	r4, [r5, #4]
 8001cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ccc:	b17b      	cbz	r3, 8001cee <_fflush_r+0x42>
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cd6:	f7ff bf61 	b.w	8001b9c <__sflush_r>
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <_fflush_r+0x4c>)
 8001cdc:	429c      	cmp	r4, r3
 8001cde:	d101      	bne.n	8001ce4 <_fflush_r+0x38>
 8001ce0:	68ac      	ldr	r4, [r5, #8]
 8001ce2:	e7f1      	b.n	8001cc8 <_fflush_r+0x1c>
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <_fflush_r+0x50>)
 8001ce6:	429c      	cmp	r4, r3
 8001ce8:	bf08      	it	eq
 8001cea:	68ec      	ldreq	r4, [r5, #12]
 8001cec:	e7ec      	b.n	8001cc8 <_fflush_r+0x1c>
 8001cee:	2000      	movs	r0, #0
 8001cf0:	bd38      	pop	{r3, r4, r5, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08003484 	.word	0x08003484
 8001cf8:	080034a4 	.word	0x080034a4
 8001cfc:	08003464 	.word	0x08003464

08001d00 <fflush>:
 8001d00:	4601      	mov	r1, r0
 8001d02:	b920      	cbnz	r0, 8001d0e <fflush+0xe>
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <fflush+0x18>)
 8001d06:	4905      	ldr	r1, [pc, #20]	; (8001d1c <fflush+0x1c>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f000 b8d3 	b.w	8001eb4 <_fwalk_reent>
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <fflush+0x20>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	f7ff bfcb 	b.w	8001cac <_fflush_r>
 8001d16:	bf00      	nop
 8001d18:	08003460 	.word	0x08003460
 8001d1c:	08001cad 	.word	0x08001cad
 8001d20:	2000000c 	.word	0x2000000c

08001d24 <_cleanup_r>:
 8001d24:	4901      	ldr	r1, [pc, #4]	; (8001d2c <_cleanup_r+0x8>)
 8001d26:	f000 b8c5 	b.w	8001eb4 <_fwalk_reent>
 8001d2a:	bf00      	nop
 8001d2c:	08001cad 	.word	0x08001cad

08001d30 <std.isra.0>:
 8001d30:	2300      	movs	r3, #0
 8001d32:	b510      	push	{r4, lr}
 8001d34:	4604      	mov	r4, r0
 8001d36:	6003      	str	r3, [r0, #0]
 8001d38:	6043      	str	r3, [r0, #4]
 8001d3a:	6083      	str	r3, [r0, #8]
 8001d3c:	8181      	strh	r1, [r0, #12]
 8001d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8001d40:	81c2      	strh	r2, [r0, #14]
 8001d42:	6103      	str	r3, [r0, #16]
 8001d44:	6143      	str	r3, [r0, #20]
 8001d46:	6183      	str	r3, [r0, #24]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	305c      	adds	r0, #92	; 0x5c
 8001d4e:	f7ff fd13 	bl	8001778 <memset>
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <std.isra.0+0x38>)
 8001d54:	6263      	str	r3, [r4, #36]	; 0x24
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <std.isra.0+0x3c>)
 8001d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <std.isra.0+0x40>)
 8001d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <std.isra.0+0x44>)
 8001d60:	6224      	str	r4, [r4, #32]
 8001d62:	6323      	str	r3, [r4, #48]	; 0x30
 8001d64:	bd10      	pop	{r4, pc}
 8001d66:	bf00      	nop
 8001d68:	08002e1d 	.word	0x08002e1d
 8001d6c:	08002e3f 	.word	0x08002e3f
 8001d70:	08002e77 	.word	0x08002e77
 8001d74:	08002e9b 	.word	0x08002e9b

08001d78 <__sfmoreglue>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	1e4a      	subs	r2, r1, #1
 8001d7c:	2568      	movs	r5, #104	; 0x68
 8001d7e:	4355      	muls	r5, r2
 8001d80:	460e      	mov	r6, r1
 8001d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d86:	f000 f96d 	bl	8002064 <_malloc_r>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	b140      	cbz	r0, 8001da0 <__sfmoreglue+0x28>
 8001d8e:	2100      	movs	r1, #0
 8001d90:	e880 0042 	stmia.w	r0, {r1, r6}
 8001d94:	300c      	adds	r0, #12
 8001d96:	60a0      	str	r0, [r4, #8]
 8001d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d9c:	f7ff fcec 	bl	8001778 <memset>
 8001da0:	4620      	mov	r0, r4
 8001da2:	bd70      	pop	{r4, r5, r6, pc}

08001da4 <__sinit>:
 8001da4:	6983      	ldr	r3, [r0, #24]
 8001da6:	b510      	push	{r4, lr}
 8001da8:	4604      	mov	r4, r0
 8001daa:	bb33      	cbnz	r3, 8001dfa <__sinit+0x56>
 8001dac:	6483      	str	r3, [r0, #72]	; 0x48
 8001dae:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001db0:	6503      	str	r3, [r0, #80]	; 0x50
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <__sinit+0x58>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <__sinit+0x5c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6282      	str	r2, [r0, #40]	; 0x28
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	bf04      	itt	eq
 8001dbe:	2301      	moveq	r3, #1
 8001dc0:	6183      	streq	r3, [r0, #24]
 8001dc2:	f000 f81f 	bl	8001e04 <__sfp>
 8001dc6:	6060      	str	r0, [r4, #4]
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 f81b 	bl	8001e04 <__sfp>
 8001dce:	60a0      	str	r0, [r4, #8]
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f000 f817 	bl	8001e04 <__sfp>
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60e0      	str	r0, [r4, #12]
 8001dda:	2104      	movs	r1, #4
 8001ddc:	6860      	ldr	r0, [r4, #4]
 8001dde:	f7ff ffa7 	bl	8001d30 <std.isra.0>
 8001de2:	2201      	movs	r2, #1
 8001de4:	2109      	movs	r1, #9
 8001de6:	68a0      	ldr	r0, [r4, #8]
 8001de8:	f7ff ffa2 	bl	8001d30 <std.isra.0>
 8001dec:	2202      	movs	r2, #2
 8001dee:	2112      	movs	r1, #18
 8001df0:	68e0      	ldr	r0, [r4, #12]
 8001df2:	f7ff ff9d 	bl	8001d30 <std.isra.0>
 8001df6:	2301      	movs	r3, #1
 8001df8:	61a3      	str	r3, [r4, #24]
 8001dfa:	bd10      	pop	{r4, pc}
 8001dfc:	08003460 	.word	0x08003460
 8001e00:	08001d25 	.word	0x08001d25

08001e04 <__sfp>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <__sfp+0x74>)
 8001e08:	681e      	ldr	r6, [r3, #0]
 8001e0a:	69b3      	ldr	r3, [r6, #24]
 8001e0c:	4607      	mov	r7, r0
 8001e0e:	b913      	cbnz	r3, 8001e16 <__sfp+0x12>
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7ff ffc7 	bl	8001da4 <__sinit>
 8001e16:	3648      	adds	r6, #72	; 0x48
 8001e18:	68b4      	ldr	r4, [r6, #8]
 8001e1a:	6873      	ldr	r3, [r6, #4]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	d503      	bpl.n	8001e28 <__sfp+0x24>
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	b133      	cbz	r3, 8001e32 <__sfp+0x2e>
 8001e24:	6836      	ldr	r6, [r6, #0]
 8001e26:	e7f7      	b.n	8001e18 <__sfp+0x14>
 8001e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e2c:	b16d      	cbz	r5, 8001e4a <__sfp+0x46>
 8001e2e:	3468      	adds	r4, #104	; 0x68
 8001e30:	e7f4      	b.n	8001e1c <__sfp+0x18>
 8001e32:	2104      	movs	r1, #4
 8001e34:	4638      	mov	r0, r7
 8001e36:	f7ff ff9f 	bl	8001d78 <__sfmoreglue>
 8001e3a:	6030      	str	r0, [r6, #0]
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d1f1      	bne.n	8001e24 <__sfp+0x20>
 8001e40:	230c      	movs	r3, #12
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4604      	mov	r4, r0
 8001e46:	4620      	mov	r0, r4
 8001e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4e:	81e3      	strh	r3, [r4, #14]
 8001e50:	2301      	movs	r3, #1
 8001e52:	81a3      	strh	r3, [r4, #12]
 8001e54:	6665      	str	r5, [r4, #100]	; 0x64
 8001e56:	6025      	str	r5, [r4, #0]
 8001e58:	60a5      	str	r5, [r4, #8]
 8001e5a:	6065      	str	r5, [r4, #4]
 8001e5c:	6125      	str	r5, [r4, #16]
 8001e5e:	6165      	str	r5, [r4, #20]
 8001e60:	61a5      	str	r5, [r4, #24]
 8001e62:	2208      	movs	r2, #8
 8001e64:	4629      	mov	r1, r5
 8001e66:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e6a:	f7ff fc85 	bl	8001778 <memset>
 8001e6e:	6365      	str	r5, [r4, #52]	; 0x34
 8001e70:	63a5      	str	r5, [r4, #56]	; 0x38
 8001e72:	64a5      	str	r5, [r4, #72]	; 0x48
 8001e74:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001e76:	e7e6      	b.n	8001e46 <__sfp+0x42>
 8001e78:	08003460 	.word	0x08003460

08001e7c <_fwalk>:
 8001e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e80:	4688      	mov	r8, r1
 8001e82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e86:	2600      	movs	r6, #0
 8001e88:	b914      	cbnz	r4, 8001e90 <_fwalk+0x14>
 8001e8a:	4630      	mov	r0, r6
 8001e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e90:	68a5      	ldr	r5, [r4, #8]
 8001e92:	6867      	ldr	r7, [r4, #4]
 8001e94:	3f01      	subs	r7, #1
 8001e96:	d501      	bpl.n	8001e9c <_fwalk+0x20>
 8001e98:	6824      	ldr	r4, [r4, #0]
 8001e9a:	e7f5      	b.n	8001e88 <_fwalk+0xc>
 8001e9c:	89ab      	ldrh	r3, [r5, #12]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d906      	bls.n	8001eb0 <_fwalk+0x34>
 8001ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <_fwalk+0x34>
 8001eaa:	4628      	mov	r0, r5
 8001eac:	47c0      	blx	r8
 8001eae:	4306      	orrs	r6, r0
 8001eb0:	3568      	adds	r5, #104	; 0x68
 8001eb2:	e7ef      	b.n	8001e94 <_fwalk+0x18>

08001eb4 <_fwalk_reent>:
 8001eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb8:	4680      	mov	r8, r0
 8001eba:	4689      	mov	r9, r1
 8001ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ec0:	2600      	movs	r6, #0
 8001ec2:	b914      	cbnz	r4, 8001eca <_fwalk_reent+0x16>
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001eca:	68a5      	ldr	r5, [r4, #8]
 8001ecc:	6867      	ldr	r7, [r4, #4]
 8001ece:	3f01      	subs	r7, #1
 8001ed0:	d501      	bpl.n	8001ed6 <_fwalk_reent+0x22>
 8001ed2:	6824      	ldr	r4, [r4, #0]
 8001ed4:	e7f5      	b.n	8001ec2 <_fwalk_reent+0xe>
 8001ed6:	89ab      	ldrh	r3, [r5, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d907      	bls.n	8001eec <_fwalk_reent+0x38>
 8001edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	d003      	beq.n	8001eec <_fwalk_reent+0x38>
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	47c8      	blx	r9
 8001eea:	4306      	orrs	r6, r0
 8001eec:	3568      	adds	r5, #104	; 0x68
 8001eee:	e7ee      	b.n	8001ece <_fwalk_reent+0x1a>

08001ef0 <__swhatbuf_r>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	460e      	mov	r6, r1
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	b090      	sub	sp, #64	; 0x40
 8001efc:	4614      	mov	r4, r2
 8001efe:	461d      	mov	r5, r3
 8001f00:	da07      	bge.n	8001f12 <__swhatbuf_r+0x22>
 8001f02:	2300      	movs	r3, #0
 8001f04:	602b      	str	r3, [r5, #0]
 8001f06:	89b3      	ldrh	r3, [r6, #12]
 8001f08:	061a      	lsls	r2, r3, #24
 8001f0a:	d410      	bmi.n	8001f2e <__swhatbuf_r+0x3e>
 8001f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f10:	e00e      	b.n	8001f30 <__swhatbuf_r+0x40>
 8001f12:	aa01      	add	r2, sp, #4
 8001f14:	f001 f9b8 	bl	8003288 <_fstat_r>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	dbf2      	blt.n	8001f02 <__swhatbuf_r+0x12>
 8001f1c:	9a02      	ldr	r2, [sp, #8]
 8001f1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f26:	425a      	negs	r2, r3
 8001f28:	415a      	adcs	r2, r3
 8001f2a:	602a      	str	r2, [r5, #0]
 8001f2c:	e7ee      	b.n	8001f0c <__swhatbuf_r+0x1c>
 8001f2e:	2340      	movs	r3, #64	; 0x40
 8001f30:	2000      	movs	r0, #0
 8001f32:	6023      	str	r3, [r4, #0]
 8001f34:	b010      	add	sp, #64	; 0x40
 8001f36:	bd70      	pop	{r4, r5, r6, pc}

08001f38 <__smakebuf_r>:
 8001f38:	898b      	ldrh	r3, [r1, #12]
 8001f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f3c:	079d      	lsls	r5, r3, #30
 8001f3e:	4606      	mov	r6, r0
 8001f40:	460c      	mov	r4, r1
 8001f42:	d507      	bpl.n	8001f54 <__smakebuf_r+0x1c>
 8001f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	6123      	str	r3, [r4, #16]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	6163      	str	r3, [r4, #20]
 8001f50:	b002      	add	sp, #8
 8001f52:	bd70      	pop	{r4, r5, r6, pc}
 8001f54:	ab01      	add	r3, sp, #4
 8001f56:	466a      	mov	r2, sp
 8001f58:	f7ff ffca 	bl	8001ef0 <__swhatbuf_r>
 8001f5c:	9900      	ldr	r1, [sp, #0]
 8001f5e:	4605      	mov	r5, r0
 8001f60:	4630      	mov	r0, r6
 8001f62:	f000 f87f 	bl	8002064 <_malloc_r>
 8001f66:	b948      	cbnz	r0, 8001f7c <__smakebuf_r+0x44>
 8001f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f6c:	059a      	lsls	r2, r3, #22
 8001f6e:	d4ef      	bmi.n	8001f50 <__smakebuf_r+0x18>
 8001f70:	f023 0303 	bic.w	r3, r3, #3
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	81a3      	strh	r3, [r4, #12]
 8001f7a:	e7e3      	b.n	8001f44 <__smakebuf_r+0xc>
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <__smakebuf_r+0x7c>)
 8001f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	6020      	str	r0, [r4, #0]
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	81a3      	strh	r3, [r4, #12]
 8001f8a:	9b00      	ldr	r3, [sp, #0]
 8001f8c:	6163      	str	r3, [r4, #20]
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	6120      	str	r0, [r4, #16]
 8001f92:	b15b      	cbz	r3, 8001fac <__smakebuf_r+0x74>
 8001f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f001 f987 	bl	80032ac <_isatty_r>
 8001f9e:	b128      	cbz	r0, 8001fac <__smakebuf_r+0x74>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	81a3      	strh	r3, [r4, #12]
 8001fac:	89a3      	ldrh	r3, [r4, #12]
 8001fae:	431d      	orrs	r5, r3
 8001fb0:	81a5      	strh	r5, [r4, #12]
 8001fb2:	e7cd      	b.n	8001f50 <__smakebuf_r+0x18>
 8001fb4:	08001d25 	.word	0x08001d25

08001fb8 <malloc>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <malloc+0xc>)
 8001fba:	4601      	mov	r1, r0
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	f000 b851 	b.w	8002064 <_malloc_r>
 8001fc2:	bf00      	nop
 8001fc4:	2000000c 	.word	0x2000000c

08001fc8 <_free_r>:
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4605      	mov	r5, r0
 8001fcc:	2900      	cmp	r1, #0
 8001fce:	d045      	beq.n	800205c <_free_r+0x94>
 8001fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd4:	1f0c      	subs	r4, r1, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bfb8      	it	lt
 8001fda:	18e4      	addlt	r4, r4, r3
 8001fdc:	f001 f9b7 	bl	800334e <__malloc_lock>
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <_free_r+0x98>)
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	b933      	cbnz	r3, 8001ff6 <_free_r+0x2e>
 8001fe8:	6063      	str	r3, [r4, #4]
 8001fea:	6014      	str	r4, [r2, #0]
 8001fec:	4628      	mov	r0, r5
 8001fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff2:	f001 b9ad 	b.w	8003350 <__malloc_unlock>
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	d90c      	bls.n	8002014 <_free_r+0x4c>
 8001ffa:	6821      	ldr	r1, [r4, #0]
 8001ffc:	1862      	adds	r2, r4, r1
 8001ffe:	4293      	cmp	r3, r2
 8002000:	bf04      	itt	eq
 8002002:	681a      	ldreq	r2, [r3, #0]
 8002004:	685b      	ldreq	r3, [r3, #4]
 8002006:	6063      	str	r3, [r4, #4]
 8002008:	bf04      	itt	eq
 800200a:	1852      	addeq	r2, r2, r1
 800200c:	6022      	streq	r2, [r4, #0]
 800200e:	6004      	str	r4, [r0, #0]
 8002010:	e7ec      	b.n	8001fec <_free_r+0x24>
 8002012:	4613      	mov	r3, r2
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	b10a      	cbz	r2, 800201c <_free_r+0x54>
 8002018:	42a2      	cmp	r2, r4
 800201a:	d9fa      	bls.n	8002012 <_free_r+0x4a>
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	1858      	adds	r0, r3, r1
 8002020:	42a0      	cmp	r0, r4
 8002022:	d10b      	bne.n	800203c <_free_r+0x74>
 8002024:	6820      	ldr	r0, [r4, #0]
 8002026:	4401      	add	r1, r0
 8002028:	1858      	adds	r0, r3, r1
 800202a:	4282      	cmp	r2, r0
 800202c:	6019      	str	r1, [r3, #0]
 800202e:	d1dd      	bne.n	8001fec <_free_r+0x24>
 8002030:	6810      	ldr	r0, [r2, #0]
 8002032:	6852      	ldr	r2, [r2, #4]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	4401      	add	r1, r0
 8002038:	6019      	str	r1, [r3, #0]
 800203a:	e7d7      	b.n	8001fec <_free_r+0x24>
 800203c:	d902      	bls.n	8002044 <_free_r+0x7c>
 800203e:	230c      	movs	r3, #12
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	e7d3      	b.n	8001fec <_free_r+0x24>
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	1821      	adds	r1, r4, r0
 8002048:	428a      	cmp	r2, r1
 800204a:	bf04      	itt	eq
 800204c:	6811      	ldreq	r1, [r2, #0]
 800204e:	6852      	ldreq	r2, [r2, #4]
 8002050:	6062      	str	r2, [r4, #4]
 8002052:	bf04      	itt	eq
 8002054:	1809      	addeq	r1, r1, r0
 8002056:	6021      	streq	r1, [r4, #0]
 8002058:	605c      	str	r4, [r3, #4]
 800205a:	e7c7      	b.n	8001fec <_free_r+0x24>
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	bf00      	nop
 8002060:	200001fc 	.word	0x200001fc

08002064 <_malloc_r>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	1ccd      	adds	r5, r1, #3
 8002068:	f025 0503 	bic.w	r5, r5, #3
 800206c:	3508      	adds	r5, #8
 800206e:	2d0c      	cmp	r5, #12
 8002070:	bf38      	it	cc
 8002072:	250c      	movcc	r5, #12
 8002074:	2d00      	cmp	r5, #0
 8002076:	4606      	mov	r6, r0
 8002078:	db01      	blt.n	800207e <_malloc_r+0x1a>
 800207a:	42a9      	cmp	r1, r5
 800207c:	d903      	bls.n	8002086 <_malloc_r+0x22>
 800207e:	230c      	movs	r3, #12
 8002080:	6033      	str	r3, [r6, #0]
 8002082:	2000      	movs	r0, #0
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	f001 f962 	bl	800334e <__malloc_lock>
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <_malloc_r+0xb4>)
 800208c:	6814      	ldr	r4, [r2, #0]
 800208e:	4621      	mov	r1, r4
 8002090:	b991      	cbnz	r1, 80020b8 <_malloc_r+0x54>
 8002092:	4c22      	ldr	r4, [pc, #136]	; (800211c <_malloc_r+0xb8>)
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	b91b      	cbnz	r3, 80020a0 <_malloc_r+0x3c>
 8002098:	4630      	mov	r0, r6
 800209a:	f000 fe7f 	bl	8002d9c <_sbrk_r>
 800209e:	6020      	str	r0, [r4, #0]
 80020a0:	4629      	mov	r1, r5
 80020a2:	4630      	mov	r0, r6
 80020a4:	f000 fe7a 	bl	8002d9c <_sbrk_r>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d126      	bne.n	80020fa <_malloc_r+0x96>
 80020ac:	230c      	movs	r3, #12
 80020ae:	6033      	str	r3, [r6, #0]
 80020b0:	4630      	mov	r0, r6
 80020b2:	f001 f94d 	bl	8003350 <__malloc_unlock>
 80020b6:	e7e4      	b.n	8002082 <_malloc_r+0x1e>
 80020b8:	680b      	ldr	r3, [r1, #0]
 80020ba:	1b5b      	subs	r3, r3, r5
 80020bc:	d41a      	bmi.n	80020f4 <_malloc_r+0x90>
 80020be:	2b0b      	cmp	r3, #11
 80020c0:	d90f      	bls.n	80020e2 <_malloc_r+0x7e>
 80020c2:	600b      	str	r3, [r1, #0]
 80020c4:	50cd      	str	r5, [r1, r3]
 80020c6:	18cc      	adds	r4, r1, r3
 80020c8:	4630      	mov	r0, r6
 80020ca:	f001 f941 	bl	8003350 <__malloc_unlock>
 80020ce:	f104 000b 	add.w	r0, r4, #11
 80020d2:	1d23      	adds	r3, r4, #4
 80020d4:	f020 0007 	bic.w	r0, r0, #7
 80020d8:	1ac3      	subs	r3, r0, r3
 80020da:	d01b      	beq.n	8002114 <_malloc_r+0xb0>
 80020dc:	425a      	negs	r2, r3
 80020de:	50e2      	str	r2, [r4, r3]
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	428c      	cmp	r4, r1
 80020e4:	bf0d      	iteet	eq
 80020e6:	6863      	ldreq	r3, [r4, #4]
 80020e8:	684b      	ldrne	r3, [r1, #4]
 80020ea:	6063      	strne	r3, [r4, #4]
 80020ec:	6013      	streq	r3, [r2, #0]
 80020ee:	bf18      	it	ne
 80020f0:	460c      	movne	r4, r1
 80020f2:	e7e9      	b.n	80020c8 <_malloc_r+0x64>
 80020f4:	460c      	mov	r4, r1
 80020f6:	6849      	ldr	r1, [r1, #4]
 80020f8:	e7ca      	b.n	8002090 <_malloc_r+0x2c>
 80020fa:	1cc4      	adds	r4, r0, #3
 80020fc:	f024 0403 	bic.w	r4, r4, #3
 8002100:	42a0      	cmp	r0, r4
 8002102:	d005      	beq.n	8002110 <_malloc_r+0xac>
 8002104:	1a21      	subs	r1, r4, r0
 8002106:	4630      	mov	r0, r6
 8002108:	f000 fe48 	bl	8002d9c <_sbrk_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d0cd      	beq.n	80020ac <_malloc_r+0x48>
 8002110:	6025      	str	r5, [r4, #0]
 8002112:	e7d9      	b.n	80020c8 <_malloc_r+0x64>
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	bf00      	nop
 8002118:	200001fc 	.word	0x200001fc
 800211c:	20000200 	.word	0x20000200

08002120 <__sfputc_r>:
 8002120:	6893      	ldr	r3, [r2, #8]
 8002122:	3b01      	subs	r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	b410      	push	{r4}
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	da09      	bge.n	8002140 <__sfputc_r+0x20>
 800212c:	6994      	ldr	r4, [r2, #24]
 800212e:	42a3      	cmp	r3, r4
 8002130:	db02      	blt.n	8002138 <__sfputc_r+0x18>
 8002132:	b2cb      	uxtb	r3, r1
 8002134:	2b0a      	cmp	r3, #10
 8002136:	d103      	bne.n	8002140 <__sfputc_r+0x20>
 8002138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800213c:	f7ff bc6e 	b.w	8001a1c <__swbuf_r>
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	1c58      	adds	r0, r3, #1
 8002144:	6010      	str	r0, [r2, #0]
 8002146:	7019      	strb	r1, [r3, #0]
 8002148:	b2c8      	uxtb	r0, r1
 800214a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800214e:	4770      	bx	lr

08002150 <__sfputs_r>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	4606      	mov	r6, r0
 8002154:	460f      	mov	r7, r1
 8002156:	4614      	mov	r4, r2
 8002158:	18d5      	adds	r5, r2, r3
 800215a:	42ac      	cmp	r4, r5
 800215c:	d101      	bne.n	8002162 <__sfputs_r+0x12>
 800215e:	2000      	movs	r0, #0
 8002160:	e007      	b.n	8002172 <__sfputs_r+0x22>
 8002162:	463a      	mov	r2, r7
 8002164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002168:	4630      	mov	r0, r6
 800216a:	f7ff ffd9 	bl	8002120 <__sfputc_r>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	d1f3      	bne.n	800215a <__sfputs_r+0xa>
 8002172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002174 <_vfiprintf_r>:
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002178:	b09d      	sub	sp, #116	; 0x74
 800217a:	460c      	mov	r4, r1
 800217c:	4617      	mov	r7, r2
 800217e:	9303      	str	r3, [sp, #12]
 8002180:	4606      	mov	r6, r0
 8002182:	b118      	cbz	r0, 800218c <_vfiprintf_r+0x18>
 8002184:	6983      	ldr	r3, [r0, #24]
 8002186:	b90b      	cbnz	r3, 800218c <_vfiprintf_r+0x18>
 8002188:	f7ff fe0c 	bl	8001da4 <__sinit>
 800218c:	4b7c      	ldr	r3, [pc, #496]	; (8002380 <_vfiprintf_r+0x20c>)
 800218e:	429c      	cmp	r4, r3
 8002190:	d157      	bne.n	8002242 <_vfiprintf_r+0xce>
 8002192:	6874      	ldr	r4, [r6, #4]
 8002194:	89a3      	ldrh	r3, [r4, #12]
 8002196:	0718      	lsls	r0, r3, #28
 8002198:	d55d      	bpl.n	8002256 <_vfiprintf_r+0xe2>
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05a      	beq.n	8002256 <_vfiprintf_r+0xe2>
 80021a0:	2300      	movs	r3, #0
 80021a2:	9309      	str	r3, [sp, #36]	; 0x24
 80021a4:	2320      	movs	r3, #32
 80021a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021aa:	2330      	movs	r3, #48	; 0x30
 80021ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b0:	f04f 0b01 	mov.w	fp, #1
 80021b4:	46b8      	mov	r8, r7
 80021b6:	4645      	mov	r5, r8
 80021b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d155      	bne.n	800226c <_vfiprintf_r+0xf8>
 80021c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80021c4:	d00b      	beq.n	80021de <_vfiprintf_r+0x6a>
 80021c6:	4653      	mov	r3, sl
 80021c8:	463a      	mov	r2, r7
 80021ca:	4621      	mov	r1, r4
 80021cc:	4630      	mov	r0, r6
 80021ce:	f7ff ffbf 	bl	8002150 <__sfputs_r>
 80021d2:	3001      	adds	r0, #1
 80021d4:	f000 80c4 	beq.w	8002360 <_vfiprintf_r+0x1ec>
 80021d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021da:	4453      	add	r3, sl
 80021dc:	9309      	str	r3, [sp, #36]	; 0x24
 80021de:	f898 3000 	ldrb.w	r3, [r8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80bc 	beq.w	8002360 <_vfiprintf_r+0x1ec>
 80021e8:	2300      	movs	r3, #0
 80021ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021ee:	9304      	str	r3, [sp, #16]
 80021f0:	9307      	str	r3, [sp, #28]
 80021f2:	9205      	str	r2, [sp, #20]
 80021f4:	9306      	str	r3, [sp, #24]
 80021f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021fa:	931a      	str	r3, [sp, #104]	; 0x68
 80021fc:	2205      	movs	r2, #5
 80021fe:	7829      	ldrb	r1, [r5, #0]
 8002200:	4860      	ldr	r0, [pc, #384]	; (8002384 <_vfiprintf_r+0x210>)
 8002202:	f7fd ffe5 	bl	80001d0 <memchr>
 8002206:	f105 0801 	add.w	r8, r5, #1
 800220a:	9b04      	ldr	r3, [sp, #16]
 800220c:	2800      	cmp	r0, #0
 800220e:	d131      	bne.n	8002274 <_vfiprintf_r+0x100>
 8002210:	06d9      	lsls	r1, r3, #27
 8002212:	bf44      	itt	mi
 8002214:	2220      	movmi	r2, #32
 8002216:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800221a:	071a      	lsls	r2, r3, #28
 800221c:	bf44      	itt	mi
 800221e:	222b      	movmi	r2, #43	; 0x2b
 8002220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002224:	782a      	ldrb	r2, [r5, #0]
 8002226:	2a2a      	cmp	r2, #42	; 0x2a
 8002228:	d02c      	beq.n	8002284 <_vfiprintf_r+0x110>
 800222a:	9a07      	ldr	r2, [sp, #28]
 800222c:	2100      	movs	r1, #0
 800222e:	200a      	movs	r0, #10
 8002230:	46a8      	mov	r8, r5
 8002232:	3501      	adds	r5, #1
 8002234:	f898 3000 	ldrb.w	r3, [r8]
 8002238:	3b30      	subs	r3, #48	; 0x30
 800223a:	2b09      	cmp	r3, #9
 800223c:	d96d      	bls.n	800231a <_vfiprintf_r+0x1a6>
 800223e:	b371      	cbz	r1, 800229e <_vfiprintf_r+0x12a>
 8002240:	e026      	b.n	8002290 <_vfiprintf_r+0x11c>
 8002242:	4b51      	ldr	r3, [pc, #324]	; (8002388 <_vfiprintf_r+0x214>)
 8002244:	429c      	cmp	r4, r3
 8002246:	d101      	bne.n	800224c <_vfiprintf_r+0xd8>
 8002248:	68b4      	ldr	r4, [r6, #8]
 800224a:	e7a3      	b.n	8002194 <_vfiprintf_r+0x20>
 800224c:	4b4f      	ldr	r3, [pc, #316]	; (800238c <_vfiprintf_r+0x218>)
 800224e:	429c      	cmp	r4, r3
 8002250:	bf08      	it	eq
 8002252:	68f4      	ldreq	r4, [r6, #12]
 8002254:	e79e      	b.n	8002194 <_vfiprintf_r+0x20>
 8002256:	4621      	mov	r1, r4
 8002258:	4630      	mov	r0, r6
 800225a:	f7ff fc31 	bl	8001ac0 <__swsetup_r>
 800225e:	2800      	cmp	r0, #0
 8002260:	d09e      	beq.n	80021a0 <_vfiprintf_r+0x2c>
 8002262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002266:	b01d      	add	sp, #116	; 0x74
 8002268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800226c:	2b25      	cmp	r3, #37	; 0x25
 800226e:	d0a7      	beq.n	80021c0 <_vfiprintf_r+0x4c>
 8002270:	46a8      	mov	r8, r5
 8002272:	e7a0      	b.n	80021b6 <_vfiprintf_r+0x42>
 8002274:	4a43      	ldr	r2, [pc, #268]	; (8002384 <_vfiprintf_r+0x210>)
 8002276:	1a80      	subs	r0, r0, r2
 8002278:	fa0b f000 	lsl.w	r0, fp, r0
 800227c:	4318      	orrs	r0, r3
 800227e:	9004      	str	r0, [sp, #16]
 8002280:	4645      	mov	r5, r8
 8002282:	e7bb      	b.n	80021fc <_vfiprintf_r+0x88>
 8002284:	9a03      	ldr	r2, [sp, #12]
 8002286:	1d11      	adds	r1, r2, #4
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	9103      	str	r1, [sp, #12]
 800228c:	2a00      	cmp	r2, #0
 800228e:	db01      	blt.n	8002294 <_vfiprintf_r+0x120>
 8002290:	9207      	str	r2, [sp, #28]
 8002292:	e004      	b.n	800229e <_vfiprintf_r+0x12a>
 8002294:	4252      	negs	r2, r2
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	9207      	str	r2, [sp, #28]
 800229c:	9304      	str	r3, [sp, #16]
 800229e:	f898 3000 	ldrb.w	r3, [r8]
 80022a2:	2b2e      	cmp	r3, #46	; 0x2e
 80022a4:	d110      	bne.n	80022c8 <_vfiprintf_r+0x154>
 80022a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80022aa:	2b2a      	cmp	r3, #42	; 0x2a
 80022ac:	f108 0101 	add.w	r1, r8, #1
 80022b0:	d137      	bne.n	8002322 <_vfiprintf_r+0x1ae>
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	1d1a      	adds	r2, r3, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	9203      	str	r2, [sp, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfb8      	it	lt
 80022be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022c2:	f108 0802 	add.w	r8, r8, #2
 80022c6:	9305      	str	r3, [sp, #20]
 80022c8:	4d31      	ldr	r5, [pc, #196]	; (8002390 <_vfiprintf_r+0x21c>)
 80022ca:	f898 1000 	ldrb.w	r1, [r8]
 80022ce:	2203      	movs	r2, #3
 80022d0:	4628      	mov	r0, r5
 80022d2:	f7fd ff7d 	bl	80001d0 <memchr>
 80022d6:	b140      	cbz	r0, 80022ea <_vfiprintf_r+0x176>
 80022d8:	2340      	movs	r3, #64	; 0x40
 80022da:	1b40      	subs	r0, r0, r5
 80022dc:	fa03 f000 	lsl.w	r0, r3, r0
 80022e0:	9b04      	ldr	r3, [sp, #16]
 80022e2:	4303      	orrs	r3, r0
 80022e4:	9304      	str	r3, [sp, #16]
 80022e6:	f108 0801 	add.w	r8, r8, #1
 80022ea:	f898 1000 	ldrb.w	r1, [r8]
 80022ee:	4829      	ldr	r0, [pc, #164]	; (8002394 <_vfiprintf_r+0x220>)
 80022f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022f4:	2206      	movs	r2, #6
 80022f6:	f108 0701 	add.w	r7, r8, #1
 80022fa:	f7fd ff69 	bl	80001d0 <memchr>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d034      	beq.n	800236c <_vfiprintf_r+0x1f8>
 8002302:	4b25      	ldr	r3, [pc, #148]	; (8002398 <_vfiprintf_r+0x224>)
 8002304:	bb03      	cbnz	r3, 8002348 <_vfiprintf_r+0x1d4>
 8002306:	9b03      	ldr	r3, [sp, #12]
 8002308:	3307      	adds	r3, #7
 800230a:	f023 0307 	bic.w	r3, r3, #7
 800230e:	3308      	adds	r3, #8
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002314:	444b      	add	r3, r9
 8002316:	9309      	str	r3, [sp, #36]	; 0x24
 8002318:	e74c      	b.n	80021b4 <_vfiprintf_r+0x40>
 800231a:	fb00 3202 	mla	r2, r0, r2, r3
 800231e:	2101      	movs	r1, #1
 8002320:	e786      	b.n	8002230 <_vfiprintf_r+0xbc>
 8002322:	2300      	movs	r3, #0
 8002324:	9305      	str	r3, [sp, #20]
 8002326:	4618      	mov	r0, r3
 8002328:	250a      	movs	r5, #10
 800232a:	4688      	mov	r8, r1
 800232c:	3101      	adds	r1, #1
 800232e:	f898 2000 	ldrb.w	r2, [r8]
 8002332:	3a30      	subs	r2, #48	; 0x30
 8002334:	2a09      	cmp	r2, #9
 8002336:	d903      	bls.n	8002340 <_vfiprintf_r+0x1cc>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0c5      	beq.n	80022c8 <_vfiprintf_r+0x154>
 800233c:	9005      	str	r0, [sp, #20]
 800233e:	e7c3      	b.n	80022c8 <_vfiprintf_r+0x154>
 8002340:	fb05 2000 	mla	r0, r5, r0, r2
 8002344:	2301      	movs	r3, #1
 8002346:	e7f0      	b.n	800232a <_vfiprintf_r+0x1b6>
 8002348:	ab03      	add	r3, sp, #12
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4622      	mov	r2, r4
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <_vfiprintf_r+0x228>)
 8002350:	a904      	add	r1, sp, #16
 8002352:	4630      	mov	r0, r6
 8002354:	f3af 8000 	nop.w
 8002358:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800235c:	4681      	mov	r9, r0
 800235e:	d1d8      	bne.n	8002312 <_vfiprintf_r+0x19e>
 8002360:	89a3      	ldrh	r3, [r4, #12]
 8002362:	065b      	lsls	r3, r3, #25
 8002364:	f53f af7d 	bmi.w	8002262 <_vfiprintf_r+0xee>
 8002368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800236a:	e77c      	b.n	8002266 <_vfiprintf_r+0xf2>
 800236c:	ab03      	add	r3, sp, #12
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4622      	mov	r2, r4
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <_vfiprintf_r+0x228>)
 8002374:	a904      	add	r1, sp, #16
 8002376:	4630      	mov	r0, r6
 8002378:	f000 f888 	bl	800248c <_printf_i>
 800237c:	e7ec      	b.n	8002358 <_vfiprintf_r+0x1e4>
 800237e:	bf00      	nop
 8002380:	08003484 	.word	0x08003484
 8002384:	080034c4 	.word	0x080034c4
 8002388:	080034a4 	.word	0x080034a4
 800238c:	08003464 	.word	0x08003464
 8002390:	080034ca 	.word	0x080034ca
 8002394:	080034ce 	.word	0x080034ce
 8002398:	00000000 	.word	0x00000000
 800239c:	08002151 	.word	0x08002151

080023a0 <_printf_common>:
 80023a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023a4:	4691      	mov	r9, r2
 80023a6:	461f      	mov	r7, r3
 80023a8:	688a      	ldr	r2, [r1, #8]
 80023aa:	690b      	ldr	r3, [r1, #16]
 80023ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bfb8      	it	lt
 80023b4:	4613      	movlt	r3, r2
 80023b6:	f8c9 3000 	str.w	r3, [r9]
 80023ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023be:	4606      	mov	r6, r0
 80023c0:	460c      	mov	r4, r1
 80023c2:	b112      	cbz	r2, 80023ca <_printf_common+0x2a>
 80023c4:	3301      	adds	r3, #1
 80023c6:	f8c9 3000 	str.w	r3, [r9]
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	0699      	lsls	r1, r3, #26
 80023ce:	bf42      	ittt	mi
 80023d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023d4:	3302      	addmi	r3, #2
 80023d6:	f8c9 3000 	strmi.w	r3, [r9]
 80023da:	6825      	ldr	r5, [r4, #0]
 80023dc:	f015 0506 	ands.w	r5, r5, #6
 80023e0:	d107      	bne.n	80023f2 <_printf_common+0x52>
 80023e2:	f104 0a19 	add.w	sl, r4, #25
 80023e6:	68e3      	ldr	r3, [r4, #12]
 80023e8:	f8d9 2000 	ldr.w	r2, [r9]
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	429d      	cmp	r5, r3
 80023f0:	db29      	blt.n	8002446 <_printf_common+0xa6>
 80023f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	3300      	adds	r3, #0
 80023fa:	bf18      	it	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	0692      	lsls	r2, r2, #26
 8002400:	d42e      	bmi.n	8002460 <_printf_common+0xc0>
 8002402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002406:	4639      	mov	r1, r7
 8002408:	4630      	mov	r0, r6
 800240a:	47c0      	blx	r8
 800240c:	3001      	adds	r0, #1
 800240e:	d021      	beq.n	8002454 <_printf_common+0xb4>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	68e5      	ldr	r5, [r4, #12]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f003 0306 	and.w	r3, r3, #6
 800241c:	2b04      	cmp	r3, #4
 800241e:	bf08      	it	eq
 8002420:	1aad      	subeq	r5, r5, r2
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	6922      	ldr	r2, [r4, #16]
 8002426:	bf0c      	ite	eq
 8002428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800242c:	2500      	movne	r5, #0
 800242e:	4293      	cmp	r3, r2
 8002430:	bfc4      	itt	gt
 8002432:	1a9b      	subgt	r3, r3, r2
 8002434:	18ed      	addgt	r5, r5, r3
 8002436:	f04f 0900 	mov.w	r9, #0
 800243a:	341a      	adds	r4, #26
 800243c:	454d      	cmp	r5, r9
 800243e:	d11b      	bne.n	8002478 <_printf_common+0xd8>
 8002440:	2000      	movs	r0, #0
 8002442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002446:	2301      	movs	r3, #1
 8002448:	4652      	mov	r2, sl
 800244a:	4639      	mov	r1, r7
 800244c:	4630      	mov	r0, r6
 800244e:	47c0      	blx	r8
 8002450:	3001      	adds	r0, #1
 8002452:	d103      	bne.n	800245c <_printf_common+0xbc>
 8002454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800245c:	3501      	adds	r5, #1
 800245e:	e7c2      	b.n	80023e6 <_printf_common+0x46>
 8002460:	18e1      	adds	r1, r4, r3
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	2030      	movs	r0, #48	; 0x30
 8002466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800246a:	4422      	add	r2, r4
 800246c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002474:	3302      	adds	r3, #2
 8002476:	e7c4      	b.n	8002402 <_printf_common+0x62>
 8002478:	2301      	movs	r3, #1
 800247a:	4622      	mov	r2, r4
 800247c:	4639      	mov	r1, r7
 800247e:	4630      	mov	r0, r6
 8002480:	47c0      	blx	r8
 8002482:	3001      	adds	r0, #1
 8002484:	d0e6      	beq.n	8002454 <_printf_common+0xb4>
 8002486:	f109 0901 	add.w	r9, r9, #1
 800248a:	e7d7      	b.n	800243c <_printf_common+0x9c>

0800248c <_printf_i>:
 800248c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002490:	4617      	mov	r7, r2
 8002492:	7e0a      	ldrb	r2, [r1, #24]
 8002494:	b085      	sub	sp, #20
 8002496:	2a6e      	cmp	r2, #110	; 0x6e
 8002498:	4698      	mov	r8, r3
 800249a:	4606      	mov	r6, r0
 800249c:	460c      	mov	r4, r1
 800249e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80024a4:	f000 80bc 	beq.w	8002620 <_printf_i+0x194>
 80024a8:	d81a      	bhi.n	80024e0 <_printf_i+0x54>
 80024aa:	2a63      	cmp	r2, #99	; 0x63
 80024ac:	d02e      	beq.n	800250c <_printf_i+0x80>
 80024ae:	d80a      	bhi.n	80024c6 <_printf_i+0x3a>
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	f000 80c8 	beq.w	8002646 <_printf_i+0x1ba>
 80024b6:	2a58      	cmp	r2, #88	; 0x58
 80024b8:	f000 808a 	beq.w	80025d0 <_printf_i+0x144>
 80024bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80024c4:	e02a      	b.n	800251c <_printf_i+0x90>
 80024c6:	2a64      	cmp	r2, #100	; 0x64
 80024c8:	d001      	beq.n	80024ce <_printf_i+0x42>
 80024ca:	2a69      	cmp	r2, #105	; 0x69
 80024cc:	d1f6      	bne.n	80024bc <_printf_i+0x30>
 80024ce:	6821      	ldr	r1, [r4, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80024d6:	d023      	beq.n	8002520 <_printf_i+0x94>
 80024d8:	1d11      	adds	r1, r2, #4
 80024da:	6019      	str	r1, [r3, #0]
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	e027      	b.n	8002530 <_printf_i+0xa4>
 80024e0:	2a73      	cmp	r2, #115	; 0x73
 80024e2:	f000 80b4 	beq.w	800264e <_printf_i+0x1c2>
 80024e6:	d808      	bhi.n	80024fa <_printf_i+0x6e>
 80024e8:	2a6f      	cmp	r2, #111	; 0x6f
 80024ea:	d02a      	beq.n	8002542 <_printf_i+0xb6>
 80024ec:	2a70      	cmp	r2, #112	; 0x70
 80024ee:	d1e5      	bne.n	80024bc <_printf_i+0x30>
 80024f0:	680a      	ldr	r2, [r1, #0]
 80024f2:	f042 0220 	orr.w	r2, r2, #32
 80024f6:	600a      	str	r2, [r1, #0]
 80024f8:	e003      	b.n	8002502 <_printf_i+0x76>
 80024fa:	2a75      	cmp	r2, #117	; 0x75
 80024fc:	d021      	beq.n	8002542 <_printf_i+0xb6>
 80024fe:	2a78      	cmp	r2, #120	; 0x78
 8002500:	d1dc      	bne.n	80024bc <_printf_i+0x30>
 8002502:	2278      	movs	r2, #120	; 0x78
 8002504:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002508:	496e      	ldr	r1, [pc, #440]	; (80026c4 <_printf_i+0x238>)
 800250a:	e064      	b.n	80025d6 <_printf_i+0x14a>
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002512:	1d11      	adds	r1, r2, #4
 8002514:	6019      	str	r1, [r3, #0]
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800251c:	2301      	movs	r3, #1
 800251e:	e0a3      	b.n	8002668 <_printf_i+0x1dc>
 8002520:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002524:	f102 0104 	add.w	r1, r2, #4
 8002528:	6019      	str	r1, [r3, #0]
 800252a:	d0d7      	beq.n	80024dc <_printf_i+0x50>
 800252c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	da03      	bge.n	800253c <_printf_i+0xb0>
 8002534:	222d      	movs	r2, #45	; 0x2d
 8002536:	425b      	negs	r3, r3
 8002538:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800253c:	4962      	ldr	r1, [pc, #392]	; (80026c8 <_printf_i+0x23c>)
 800253e:	220a      	movs	r2, #10
 8002540:	e017      	b.n	8002572 <_printf_i+0xe6>
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	f010 0f80 	tst.w	r0, #128	; 0x80
 800254a:	d003      	beq.n	8002554 <_printf_i+0xc8>
 800254c:	1d08      	adds	r0, r1, #4
 800254e:	6018      	str	r0, [r3, #0]
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	e006      	b.n	8002562 <_printf_i+0xd6>
 8002554:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002558:	f101 0004 	add.w	r0, r1, #4
 800255c:	6018      	str	r0, [r3, #0]
 800255e:	d0f7      	beq.n	8002550 <_printf_i+0xc4>
 8002560:	880b      	ldrh	r3, [r1, #0]
 8002562:	4959      	ldr	r1, [pc, #356]	; (80026c8 <_printf_i+0x23c>)
 8002564:	2a6f      	cmp	r2, #111	; 0x6f
 8002566:	bf14      	ite	ne
 8002568:	220a      	movne	r2, #10
 800256a:	2208      	moveq	r2, #8
 800256c:	2000      	movs	r0, #0
 800256e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002572:	6865      	ldr	r5, [r4, #4]
 8002574:	60a5      	str	r5, [r4, #8]
 8002576:	2d00      	cmp	r5, #0
 8002578:	f2c0 809c 	blt.w	80026b4 <_printf_i+0x228>
 800257c:	6820      	ldr	r0, [r4, #0]
 800257e:	f020 0004 	bic.w	r0, r0, #4
 8002582:	6020      	str	r0, [r4, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d13f      	bne.n	8002608 <_printf_i+0x17c>
 8002588:	2d00      	cmp	r5, #0
 800258a:	f040 8095 	bne.w	80026b8 <_printf_i+0x22c>
 800258e:	4675      	mov	r5, lr
 8002590:	2a08      	cmp	r2, #8
 8002592:	d10b      	bne.n	80025ac <_printf_i+0x120>
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	07da      	lsls	r2, r3, #31
 8002598:	d508      	bpl.n	80025ac <_printf_i+0x120>
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	6862      	ldr	r2, [r4, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	bfde      	ittt	le
 80025a2:	2330      	movle	r3, #48	; 0x30
 80025a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80025ac:	ebae 0305 	sub.w	r3, lr, r5
 80025b0:	6123      	str	r3, [r4, #16]
 80025b2:	f8cd 8000 	str.w	r8, [sp]
 80025b6:	463b      	mov	r3, r7
 80025b8:	aa03      	add	r2, sp, #12
 80025ba:	4621      	mov	r1, r4
 80025bc:	4630      	mov	r0, r6
 80025be:	f7ff feef 	bl	80023a0 <_printf_common>
 80025c2:	3001      	adds	r0, #1
 80025c4:	d155      	bne.n	8002672 <_printf_i+0x1e6>
 80025c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ca:	b005      	add	sp, #20
 80025cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80025d4:	493c      	ldr	r1, [pc, #240]	; (80026c8 <_printf_i+0x23c>)
 80025d6:	6822      	ldr	r2, [r4, #0]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025de:	f100 0504 	add.w	r5, r0, #4
 80025e2:	601d      	str	r5, [r3, #0]
 80025e4:	d001      	beq.n	80025ea <_printf_i+0x15e>
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	e002      	b.n	80025f0 <_printf_i+0x164>
 80025ea:	0655      	lsls	r5, r2, #25
 80025ec:	d5fb      	bpl.n	80025e6 <_printf_i+0x15a>
 80025ee:	8803      	ldrh	r3, [r0, #0]
 80025f0:	07d0      	lsls	r0, r2, #31
 80025f2:	bf44      	itt	mi
 80025f4:	f042 0220 	orrmi.w	r2, r2, #32
 80025f8:	6022      	strmi	r2, [r4, #0]
 80025fa:	b91b      	cbnz	r3, 8002604 <_printf_i+0x178>
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	f022 0220 	bic.w	r2, r2, #32
 8002602:	6022      	str	r2, [r4, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	e7b1      	b.n	800256c <_printf_i+0xe0>
 8002608:	4675      	mov	r5, lr
 800260a:	fbb3 f0f2 	udiv	r0, r3, r2
 800260e:	fb02 3310 	mls	r3, r2, r0, r3
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002618:	4603      	mov	r3, r0
 800261a:	2800      	cmp	r0, #0
 800261c:	d1f5      	bne.n	800260a <_printf_i+0x17e>
 800261e:	e7b7      	b.n	8002590 <_printf_i+0x104>
 8002620:	6808      	ldr	r0, [r1, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	6949      	ldr	r1, [r1, #20]
 8002626:	f010 0f80 	tst.w	r0, #128	; 0x80
 800262a:	d004      	beq.n	8002636 <_printf_i+0x1aa>
 800262c:	1d10      	adds	r0, r2, #4
 800262e:	6018      	str	r0, [r3, #0]
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	6019      	str	r1, [r3, #0]
 8002634:	e007      	b.n	8002646 <_printf_i+0x1ba>
 8002636:	f010 0f40 	tst.w	r0, #64	; 0x40
 800263a:	f102 0004 	add.w	r0, r2, #4
 800263e:	6018      	str	r0, [r3, #0]
 8002640:	6813      	ldr	r3, [r2, #0]
 8002642:	d0f6      	beq.n	8002632 <_printf_i+0x1a6>
 8002644:	8019      	strh	r1, [r3, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	6123      	str	r3, [r4, #16]
 800264a:	4675      	mov	r5, lr
 800264c:	e7b1      	b.n	80025b2 <_printf_i+0x126>
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	1d11      	adds	r1, r2, #4
 8002652:	6019      	str	r1, [r3, #0]
 8002654:	6815      	ldr	r5, [r2, #0]
 8002656:	6862      	ldr	r2, [r4, #4]
 8002658:	2100      	movs	r1, #0
 800265a:	4628      	mov	r0, r5
 800265c:	f7fd fdb8 	bl	80001d0 <memchr>
 8002660:	b108      	cbz	r0, 8002666 <_printf_i+0x1da>
 8002662:	1b40      	subs	r0, r0, r5
 8002664:	6060      	str	r0, [r4, #4]
 8002666:	6863      	ldr	r3, [r4, #4]
 8002668:	6123      	str	r3, [r4, #16]
 800266a:	2300      	movs	r3, #0
 800266c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002670:	e79f      	b.n	80025b2 <_printf_i+0x126>
 8002672:	6923      	ldr	r3, [r4, #16]
 8002674:	462a      	mov	r2, r5
 8002676:	4639      	mov	r1, r7
 8002678:	4630      	mov	r0, r6
 800267a:	47c0      	blx	r8
 800267c:	3001      	adds	r0, #1
 800267e:	d0a2      	beq.n	80025c6 <_printf_i+0x13a>
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	079b      	lsls	r3, r3, #30
 8002684:	d507      	bpl.n	8002696 <_printf_i+0x20a>
 8002686:	2500      	movs	r5, #0
 8002688:	f104 0919 	add.w	r9, r4, #25
 800268c:	68e3      	ldr	r3, [r4, #12]
 800268e:	9a03      	ldr	r2, [sp, #12]
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	429d      	cmp	r5, r3
 8002694:	db05      	blt.n	80026a2 <_printf_i+0x216>
 8002696:	68e0      	ldr	r0, [r4, #12]
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	4298      	cmp	r0, r3
 800269c:	bfb8      	it	lt
 800269e:	4618      	movlt	r0, r3
 80026a0:	e793      	b.n	80025ca <_printf_i+0x13e>
 80026a2:	2301      	movs	r3, #1
 80026a4:	464a      	mov	r2, r9
 80026a6:	4639      	mov	r1, r7
 80026a8:	4630      	mov	r0, r6
 80026aa:	47c0      	blx	r8
 80026ac:	3001      	adds	r0, #1
 80026ae:	d08a      	beq.n	80025c6 <_printf_i+0x13a>
 80026b0:	3501      	adds	r5, #1
 80026b2:	e7eb      	b.n	800268c <_printf_i+0x200>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1a7      	bne.n	8002608 <_printf_i+0x17c>
 80026b8:	780b      	ldrb	r3, [r1, #0]
 80026ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026c2:	e765      	b.n	8002590 <_printf_i+0x104>
 80026c4:	080034e6 	.word	0x080034e6
 80026c8:	080034d5 	.word	0x080034d5

080026cc <__svfiscanf_r>:
 80026cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80026d4:	f10d 080c 	add.w	r8, sp, #12
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2300      	movs	r3, #0
 80026dc:	9346      	str	r3, [sp, #280]	; 0x118
 80026de:	9347      	str	r3, [sp, #284]	; 0x11c
 80026e0:	4ba0      	ldr	r3, [pc, #640]	; (8002964 <__svfiscanf_r+0x298>)
 80026e2:	93a2      	str	r3, [sp, #648]	; 0x288
 80026e4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800296c <__svfiscanf_r+0x2a0>
 80026e8:	4b9f      	ldr	r3, [pc, #636]	; (8002968 <__svfiscanf_r+0x29c>)
 80026ea:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80026ee:	4606      	mov	r6, r0
 80026f0:	460c      	mov	r4, r1
 80026f2:	93a3      	str	r3, [sp, #652]	; 0x28c
 80026f4:	4692      	mov	sl, r2
 80026f6:	270a      	movs	r7, #10
 80026f8:	f89a 3000 	ldrb.w	r3, [sl]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 812f 	beq.w	8002960 <__svfiscanf_r+0x294>
 8002702:	f000 fde7 	bl	80032d4 <__locale_ctype_ptr>
 8002706:	f89a b000 	ldrb.w	fp, [sl]
 800270a:	4458      	add	r0, fp
 800270c:	7843      	ldrb	r3, [r0, #1]
 800270e:	f013 0308 	ands.w	r3, r3, #8
 8002712:	d143      	bne.n	800279c <__svfiscanf_r+0xd0>
 8002714:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8002718:	f10a 0501 	add.w	r5, sl, #1
 800271c:	f040 8099 	bne.w	8002852 <__svfiscanf_r+0x186>
 8002720:	9345      	str	r3, [sp, #276]	; 0x114
 8002722:	9343      	str	r3, [sp, #268]	; 0x10c
 8002724:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002728:	2b2a      	cmp	r3, #42	; 0x2a
 800272a:	d103      	bne.n	8002734 <__svfiscanf_r+0x68>
 800272c:	2310      	movs	r3, #16
 800272e:	9343      	str	r3, [sp, #268]	; 0x10c
 8002730:	f10a 0502 	add.w	r5, sl, #2
 8002734:	7829      	ldrb	r1, [r5, #0]
 8002736:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800273a:	2a09      	cmp	r2, #9
 800273c:	46aa      	mov	sl, r5
 800273e:	f105 0501 	add.w	r5, r5, #1
 8002742:	d941      	bls.n	80027c8 <__svfiscanf_r+0xfc>
 8002744:	2203      	movs	r2, #3
 8002746:	4889      	ldr	r0, [pc, #548]	; (800296c <__svfiscanf_r+0x2a0>)
 8002748:	f7fd fd42 	bl	80001d0 <memchr>
 800274c:	b138      	cbz	r0, 800275e <__svfiscanf_r+0x92>
 800274e:	eba0 0309 	sub.w	r3, r0, r9
 8002752:	2001      	movs	r0, #1
 8002754:	4098      	lsls	r0, r3
 8002756:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002758:	4318      	orrs	r0, r3
 800275a:	9043      	str	r0, [sp, #268]	; 0x10c
 800275c:	46aa      	mov	sl, r5
 800275e:	f89a 3000 	ldrb.w	r3, [sl]
 8002762:	2b67      	cmp	r3, #103	; 0x67
 8002764:	f10a 0501 	add.w	r5, sl, #1
 8002768:	d84a      	bhi.n	8002800 <__svfiscanf_r+0x134>
 800276a:	2b65      	cmp	r3, #101	; 0x65
 800276c:	f080 80b7 	bcs.w	80028de <__svfiscanf_r+0x212>
 8002770:	2b47      	cmp	r3, #71	; 0x47
 8002772:	d82f      	bhi.n	80027d4 <__svfiscanf_r+0x108>
 8002774:	2b45      	cmp	r3, #69	; 0x45
 8002776:	f080 80b2 	bcs.w	80028de <__svfiscanf_r+0x212>
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8082 	beq.w	8002884 <__svfiscanf_r+0x1b8>
 8002780:	2b25      	cmp	r3, #37	; 0x25
 8002782:	d066      	beq.n	8002852 <__svfiscanf_r+0x186>
 8002784:	2303      	movs	r3, #3
 8002786:	9349      	str	r3, [sp, #292]	; 0x124
 8002788:	9744      	str	r7, [sp, #272]	; 0x110
 800278a:	e045      	b.n	8002818 <__svfiscanf_r+0x14c>
 800278c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800278e:	3101      	adds	r1, #1
 8002790:	9147      	str	r1, [sp, #284]	; 0x11c
 8002792:	6861      	ldr	r1, [r4, #4]
 8002794:	3301      	adds	r3, #1
 8002796:	3901      	subs	r1, #1
 8002798:	6061      	str	r1, [r4, #4]
 800279a:	6023      	str	r3, [r4, #0]
 800279c:	6863      	ldr	r3, [r4, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dd0b      	ble.n	80027ba <__svfiscanf_r+0xee>
 80027a2:	f000 fd97 	bl	80032d4 <__locale_ctype_ptr>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	4408      	add	r0, r1
 80027ac:	7841      	ldrb	r1, [r0, #1]
 80027ae:	070d      	lsls	r5, r1, #28
 80027b0:	d4ec      	bmi.n	800278c <__svfiscanf_r+0xc0>
 80027b2:	f10a 0501 	add.w	r5, sl, #1
 80027b6:	46aa      	mov	sl, r5
 80027b8:	e79e      	b.n	80026f8 <__svfiscanf_r+0x2c>
 80027ba:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80027bc:	4621      	mov	r1, r4
 80027be:	4630      	mov	r0, r6
 80027c0:	4798      	blx	r3
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d0ed      	beq.n	80027a2 <__svfiscanf_r+0xd6>
 80027c6:	e7f4      	b.n	80027b2 <__svfiscanf_r+0xe6>
 80027c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80027ca:	fb07 1303 	mla	r3, r7, r3, r1
 80027ce:	3b30      	subs	r3, #48	; 0x30
 80027d0:	9345      	str	r3, [sp, #276]	; 0x114
 80027d2:	e7af      	b.n	8002734 <__svfiscanf_r+0x68>
 80027d4:	2b5b      	cmp	r3, #91	; 0x5b
 80027d6:	d061      	beq.n	800289c <__svfiscanf_r+0x1d0>
 80027d8:	d80c      	bhi.n	80027f4 <__svfiscanf_r+0x128>
 80027da:	2b58      	cmp	r3, #88	; 0x58
 80027dc:	d1d2      	bne.n	8002784 <__svfiscanf_r+0xb8>
 80027de:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	9243      	str	r2, [sp, #268]	; 0x10c
 80027e6:	2210      	movs	r2, #16
 80027e8:	9244      	str	r2, [sp, #272]	; 0x110
 80027ea:	2b6f      	cmp	r3, #111	; 0x6f
 80027ec:	bfb4      	ite	lt
 80027ee:	2303      	movlt	r3, #3
 80027f0:	2304      	movge	r3, #4
 80027f2:	e010      	b.n	8002816 <__svfiscanf_r+0x14a>
 80027f4:	2b63      	cmp	r3, #99	; 0x63
 80027f6:	d05c      	beq.n	80028b2 <__svfiscanf_r+0x1e6>
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d1c3      	bne.n	8002784 <__svfiscanf_r+0xb8>
 80027fc:	9744      	str	r7, [sp, #272]	; 0x110
 80027fe:	e7f4      	b.n	80027ea <__svfiscanf_r+0x11e>
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d042      	beq.n	800288a <__svfiscanf_r+0x1be>
 8002804:	d81d      	bhi.n	8002842 <__svfiscanf_r+0x176>
 8002806:	2b6e      	cmp	r3, #110	; 0x6e
 8002808:	d059      	beq.n	80028be <__svfiscanf_r+0x1f2>
 800280a:	d843      	bhi.n	8002894 <__svfiscanf_r+0x1c8>
 800280c:	2b69      	cmp	r3, #105	; 0x69
 800280e:	d1b9      	bne.n	8002784 <__svfiscanf_r+0xb8>
 8002810:	2300      	movs	r3, #0
 8002812:	9344      	str	r3, [sp, #272]	; 0x110
 8002814:	2303      	movs	r3, #3
 8002816:	9349      	str	r3, [sp, #292]	; 0x124
 8002818:	6863      	ldr	r3, [r4, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	dd61      	ble.n	80028e2 <__svfiscanf_r+0x216>
 800281e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002820:	0659      	lsls	r1, r3, #25
 8002822:	d56f      	bpl.n	8002904 <__svfiscanf_r+0x238>
 8002824:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8002826:	2b02      	cmp	r3, #2
 8002828:	dc7c      	bgt.n	8002924 <__svfiscanf_r+0x258>
 800282a:	ab01      	add	r3, sp, #4
 800282c:	4622      	mov	r2, r4
 800282e:	a943      	add	r1, sp, #268	; 0x10c
 8002830:	4630      	mov	r0, r6
 8002832:	f000 f8c7 	bl	80029c4 <_scanf_chars>
 8002836:	2801      	cmp	r0, #1
 8002838:	f000 8092 	beq.w	8002960 <__svfiscanf_r+0x294>
 800283c:	2802      	cmp	r0, #2
 800283e:	d1ba      	bne.n	80027b6 <__svfiscanf_r+0xea>
 8002840:	e01d      	b.n	800287e <__svfiscanf_r+0x1b2>
 8002842:	2b75      	cmp	r3, #117	; 0x75
 8002844:	d0da      	beq.n	80027fc <__svfiscanf_r+0x130>
 8002846:	2b78      	cmp	r3, #120	; 0x78
 8002848:	d0c9      	beq.n	80027de <__svfiscanf_r+0x112>
 800284a:	2b73      	cmp	r3, #115	; 0x73
 800284c:	d19a      	bne.n	8002784 <__svfiscanf_r+0xb8>
 800284e:	2302      	movs	r3, #2
 8002850:	e7e1      	b.n	8002816 <__svfiscanf_r+0x14a>
 8002852:	6863      	ldr	r3, [r4, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	dd0c      	ble.n	8002872 <__svfiscanf_r+0x1a6>
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	4593      	cmp	fp, r2
 800285e:	d17f      	bne.n	8002960 <__svfiscanf_r+0x294>
 8002860:	3301      	adds	r3, #1
 8002862:	6862      	ldr	r2, [r4, #4]
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002868:	3a01      	subs	r2, #1
 800286a:	3301      	adds	r3, #1
 800286c:	6062      	str	r2, [r4, #4]
 800286e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002870:	e7a1      	b.n	80027b6 <__svfiscanf_r+0xea>
 8002872:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002874:	4621      	mov	r1, r4
 8002876:	4630      	mov	r0, r6
 8002878:	4798      	blx	r3
 800287a:	2800      	cmp	r0, #0
 800287c:	d0ec      	beq.n	8002858 <__svfiscanf_r+0x18c>
 800287e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002880:	2800      	cmp	r0, #0
 8002882:	d163      	bne.n	800294c <__svfiscanf_r+0x280>
 8002884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002888:	e066      	b.n	8002958 <__svfiscanf_r+0x28c>
 800288a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800288c:	f042 0220 	orr.w	r2, r2, #32
 8002890:	9243      	str	r2, [sp, #268]	; 0x10c
 8002892:	e7a4      	b.n	80027de <__svfiscanf_r+0x112>
 8002894:	2308      	movs	r3, #8
 8002896:	9344      	str	r3, [sp, #272]	; 0x110
 8002898:	2304      	movs	r3, #4
 800289a:	e7bc      	b.n	8002816 <__svfiscanf_r+0x14a>
 800289c:	4629      	mov	r1, r5
 800289e:	4640      	mov	r0, r8
 80028a0:	f000 fa8c 	bl	8002dbc <__sccl>
 80028a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80028a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028aa:	9343      	str	r3, [sp, #268]	; 0x10c
 80028ac:	4605      	mov	r5, r0
 80028ae:	2301      	movs	r3, #1
 80028b0:	e7b1      	b.n	8002816 <__svfiscanf_r+0x14a>
 80028b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80028b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80028ba:	2300      	movs	r3, #0
 80028bc:	e7ab      	b.n	8002816 <__svfiscanf_r+0x14a>
 80028be:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80028c0:	06d0      	lsls	r0, r2, #27
 80028c2:	f53f af78 	bmi.w	80027b6 <__svfiscanf_r+0xea>
 80028c6:	f012 0f01 	tst.w	r2, #1
 80028ca:	9a01      	ldr	r2, [sp, #4]
 80028cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80028ce:	f102 0104 	add.w	r1, r2, #4
 80028d2:	9101      	str	r1, [sp, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	bf14      	ite	ne
 80028d8:	8013      	strhne	r3, [r2, #0]
 80028da:	6013      	streq	r3, [r2, #0]
 80028dc:	e76b      	b.n	80027b6 <__svfiscanf_r+0xea>
 80028de:	2305      	movs	r3, #5
 80028e0:	e799      	b.n	8002816 <__svfiscanf_r+0x14a>
 80028e2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80028e4:	4621      	mov	r1, r4
 80028e6:	4630      	mov	r0, r6
 80028e8:	4798      	blx	r3
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d097      	beq.n	800281e <__svfiscanf_r+0x152>
 80028ee:	e7c6      	b.n	800287e <__svfiscanf_r+0x1b2>
 80028f0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80028f2:	3201      	adds	r2, #1
 80028f4:	9247      	str	r2, [sp, #284]	; 0x11c
 80028f6:	6862      	ldr	r2, [r4, #4]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	6062      	str	r2, [r4, #4]
 80028fe:	dd0a      	ble.n	8002916 <__svfiscanf_r+0x24a>
 8002900:	3301      	adds	r3, #1
 8002902:	6023      	str	r3, [r4, #0]
 8002904:	f000 fce6 	bl	80032d4 <__locale_ctype_ptr>
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4410      	add	r0, r2
 800290e:	7842      	ldrb	r2, [r0, #1]
 8002910:	0712      	lsls	r2, r2, #28
 8002912:	d4ed      	bmi.n	80028f0 <__svfiscanf_r+0x224>
 8002914:	e786      	b.n	8002824 <__svfiscanf_r+0x158>
 8002916:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002918:	4621      	mov	r1, r4
 800291a:	4630      	mov	r0, r6
 800291c:	4798      	blx	r3
 800291e:	2800      	cmp	r0, #0
 8002920:	d0f0      	beq.n	8002904 <__svfiscanf_r+0x238>
 8002922:	e7ac      	b.n	800287e <__svfiscanf_r+0x1b2>
 8002924:	2b04      	cmp	r3, #4
 8002926:	dc06      	bgt.n	8002936 <__svfiscanf_r+0x26a>
 8002928:	ab01      	add	r3, sp, #4
 800292a:	4622      	mov	r2, r4
 800292c:	a943      	add	r1, sp, #268	; 0x10c
 800292e:	4630      	mov	r0, r6
 8002930:	f000 f8ac 	bl	8002a8c <_scanf_i>
 8002934:	e77f      	b.n	8002836 <__svfiscanf_r+0x16a>
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <__svfiscanf_r+0x2a4>)
 8002938:	2b00      	cmp	r3, #0
 800293a:	f43f af3c 	beq.w	80027b6 <__svfiscanf_r+0xea>
 800293e:	ab01      	add	r3, sp, #4
 8002940:	4622      	mov	r2, r4
 8002942:	a943      	add	r1, sp, #268	; 0x10c
 8002944:	4630      	mov	r0, r6
 8002946:	f3af 8000 	nop.w
 800294a:	e774      	b.n	8002836 <__svfiscanf_r+0x16a>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002952:	bf18      	it	ne
 8002954:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002958:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002960:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002962:	e7f9      	b.n	8002958 <__svfiscanf_r+0x28c>
 8002964:	08003161 	.word	0x08003161
 8002968:	08002c89 	.word	0x08002c89
 800296c:	080034ca 	.word	0x080034ca
 8002970:	00000000 	.word	0x00000000

08002974 <_vfiscanf_r>:
 8002974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002978:	460c      	mov	r4, r1
 800297a:	4616      	mov	r6, r2
 800297c:	461f      	mov	r7, r3
 800297e:	4605      	mov	r5, r0
 8002980:	b118      	cbz	r0, 800298a <_vfiscanf_r+0x16>
 8002982:	6983      	ldr	r3, [r0, #24]
 8002984:	b90b      	cbnz	r3, 800298a <_vfiscanf_r+0x16>
 8002986:	f7ff fa0d 	bl	8001da4 <__sinit>
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <_vfiscanf_r+0x44>)
 800298c:	429c      	cmp	r4, r3
 800298e:	d108      	bne.n	80029a2 <_vfiscanf_r+0x2e>
 8002990:	686c      	ldr	r4, [r5, #4]
 8002992:	463b      	mov	r3, r7
 8002994:	4632      	mov	r2, r6
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	f7ff be95 	b.w	80026cc <__svfiscanf_r>
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <_vfiscanf_r+0x48>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d101      	bne.n	80029ac <_vfiscanf_r+0x38>
 80029a8:	68ac      	ldr	r4, [r5, #8]
 80029aa:	e7f2      	b.n	8002992 <_vfiscanf_r+0x1e>
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <_vfiscanf_r+0x4c>)
 80029ae:	429c      	cmp	r4, r3
 80029b0:	bf08      	it	eq
 80029b2:	68ec      	ldreq	r4, [r5, #12]
 80029b4:	e7ed      	b.n	8002992 <_vfiscanf_r+0x1e>
 80029b6:	bf00      	nop
 80029b8:	08003484 	.word	0x08003484
 80029bc:	080034a4 	.word	0x080034a4
 80029c0:	08003464 	.word	0x08003464

080029c4 <_scanf_chars>:
 80029c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c8:	4615      	mov	r5, r2
 80029ca:	688a      	ldr	r2, [r1, #8]
 80029cc:	4680      	mov	r8, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	b932      	cbnz	r2, 80029e0 <_scanf_chars+0x1c>
 80029d2:	698a      	ldr	r2, [r1, #24]
 80029d4:	2a00      	cmp	r2, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2201      	moveq	r2, #1
 80029da:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80029de:	608a      	str	r2, [r1, #8]
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	06d1      	lsls	r1, r2, #27
 80029e4:	bf5f      	itttt	pl
 80029e6:	681a      	ldrpl	r2, [r3, #0]
 80029e8:	1d11      	addpl	r1, r2, #4
 80029ea:	6019      	strpl	r1, [r3, #0]
 80029ec:	6817      	ldrpl	r7, [r2, #0]
 80029ee:	2600      	movs	r6, #0
 80029f0:	69a3      	ldr	r3, [r4, #24]
 80029f2:	b1db      	cbz	r3, 8002a2c <_scanf_chars+0x68>
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <_scanf_chars+0x44>
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	6962      	ldr	r2, [r4, #20]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	b9a3      	cbnz	r3, 8002a2c <_scanf_chars+0x68>
 8002a02:	2e00      	cmp	r6, #0
 8002a04:	d132      	bne.n	8002a6c <_scanf_chars+0xa8>
 8002a06:	e006      	b.n	8002a16 <_scanf_chars+0x52>
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d007      	beq.n	8002a1c <_scanf_chars+0x58>
 8002a0c:	2e00      	cmp	r6, #0
 8002a0e:	d12d      	bne.n	8002a6c <_scanf_chars+0xa8>
 8002a10:	69a3      	ldr	r3, [r4, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d12a      	bne.n	8002a6c <_scanf_chars+0xa8>
 8002a16:	2001      	movs	r0, #1
 8002a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a1c:	f000 fc5a 	bl	80032d4 <__locale_ctype_ptr>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4418      	add	r0, r3
 8002a26:	7843      	ldrb	r3, [r0, #1]
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	d4ef      	bmi.n	8002a0c <_scanf_chars+0x48>
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	06da      	lsls	r2, r3, #27
 8002a30:	bf5e      	ittt	pl
 8002a32:	682b      	ldrpl	r3, [r5, #0]
 8002a34:	781b      	ldrbpl	r3, [r3, #0]
 8002a36:	703b      	strbpl	r3, [r7, #0]
 8002a38:	682a      	ldr	r2, [r5, #0]
 8002a3a:	686b      	ldr	r3, [r5, #4]
 8002a3c:	f102 0201 	add.w	r2, r2, #1
 8002a40:	602a      	str	r2, [r5, #0]
 8002a42:	68a2      	ldr	r2, [r4, #8]
 8002a44:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002a48:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002a4c:	606b      	str	r3, [r5, #4]
 8002a4e:	f106 0601 	add.w	r6, r6, #1
 8002a52:	bf58      	it	pl
 8002a54:	3701      	addpl	r7, #1
 8002a56:	60a2      	str	r2, [r4, #8]
 8002a58:	b142      	cbz	r2, 8002a6c <_scanf_chars+0xa8>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	dcc8      	bgt.n	80029f0 <_scanf_chars+0x2c>
 8002a5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002a62:	4629      	mov	r1, r5
 8002a64:	4640      	mov	r0, r8
 8002a66:	4798      	blx	r3
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d0c1      	beq.n	80029f0 <_scanf_chars+0x2c>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f013 0310 	ands.w	r3, r3, #16
 8002a72:	d105      	bne.n	8002a80 <_scanf_chars+0xbc>
 8002a74:	68e2      	ldr	r2, [r4, #12]
 8002a76:	3201      	adds	r2, #1
 8002a78:	60e2      	str	r2, [r4, #12]
 8002a7a:	69a2      	ldr	r2, [r4, #24]
 8002a7c:	b102      	cbz	r2, 8002a80 <_scanf_chars+0xbc>
 8002a7e:	703b      	strb	r3, [r7, #0]
 8002a80:	6923      	ldr	r3, [r4, #16]
 8002a82:	441e      	add	r6, r3
 8002a84:	6126      	str	r6, [r4, #16]
 8002a86:	2000      	movs	r0, #0
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a8c <_scanf_i>:
 8002a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a90:	469a      	mov	sl, r3
 8002a92:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <_scanf_i+0x1d8>)
 8002a94:	460c      	mov	r4, r1
 8002a96:	4683      	mov	fp, r0
 8002a98:	4616      	mov	r6, r2
 8002a9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	ab03      	add	r3, sp, #12
 8002aa2:	68a7      	ldr	r7, [r4, #8]
 8002aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <_scanf_i+0x1dc>)
 8002aaa:	69a1      	ldr	r1, [r4, #24]
 8002aac:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <_scanf_i+0x1e0>)
 8002aae:	2903      	cmp	r1, #3
 8002ab0:	bf18      	it	ne
 8002ab2:	461a      	movne	r2, r3
 8002ab4:	1e7b      	subs	r3, r7, #1
 8002ab6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8002aba:	bf84      	itt	hi
 8002abc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002ac0:	60a3      	strhi	r3, [r4, #8]
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	9200      	str	r2, [sp, #0]
 8002ac6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002aca:	bf88      	it	hi
 8002acc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002ad0:	f104 091c 	add.w	r9, r4, #28
 8002ad4:	6023      	str	r3, [r4, #0]
 8002ad6:	bf8c      	ite	hi
 8002ad8:	197f      	addhi	r7, r7, r5
 8002ada:	2700      	movls	r7, #0
 8002adc:	464b      	mov	r3, r9
 8002ade:	f04f 0800 	mov.w	r8, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	6831      	ldr	r1, [r6, #0]
 8002ae6:	ab03      	add	r3, sp, #12
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002aee:	7809      	ldrb	r1, [r1, #0]
 8002af0:	f7fd fb6e 	bl	80001d0 <memchr>
 8002af4:	9b01      	ldr	r3, [sp, #4]
 8002af6:	b328      	cbz	r0, 8002b44 <_scanf_i+0xb8>
 8002af8:	f1b8 0f01 	cmp.w	r8, #1
 8002afc:	d156      	bne.n	8002bac <_scanf_i+0x120>
 8002afe:	6862      	ldr	r2, [r4, #4]
 8002b00:	b92a      	cbnz	r2, 8002b0e <_scanf_i+0x82>
 8002b02:	2208      	movs	r2, #8
 8002b04:	6062      	str	r2, [r4, #4]
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0c:	6022      	str	r2, [r4, #0]
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002b14:	6022      	str	r2, [r4, #0]
 8002b16:	68a2      	ldr	r2, [r4, #8]
 8002b18:	1e51      	subs	r1, r2, #1
 8002b1a:	60a1      	str	r1, [r4, #8]
 8002b1c:	b192      	cbz	r2, 8002b44 <_scanf_i+0xb8>
 8002b1e:	6832      	ldr	r2, [r6, #0]
 8002b20:	1c51      	adds	r1, r2, #1
 8002b22:	6031      	str	r1, [r6, #0]
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	1c5d      	adds	r5, r3, #1
 8002b2a:	6873      	ldr	r3, [r6, #4]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	6073      	str	r3, [r6, #4]
 8002b32:	dc06      	bgt.n	8002b42 <_scanf_i+0xb6>
 8002b34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002b38:	4631      	mov	r1, r6
 8002b3a:	4658      	mov	r0, fp
 8002b3c:	4798      	blx	r3
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d176      	bne.n	8002c30 <_scanf_i+0x1a4>
 8002b42:	462b      	mov	r3, r5
 8002b44:	f108 0801 	add.w	r8, r8, #1
 8002b48:	f1b8 0f03 	cmp.w	r8, #3
 8002b4c:	d1c9      	bne.n	8002ae2 <_scanf_i+0x56>
 8002b4e:	6862      	ldr	r2, [r4, #4]
 8002b50:	b90a      	cbnz	r2, 8002b56 <_scanf_i+0xca>
 8002b52:	220a      	movs	r2, #10
 8002b54:	6062      	str	r2, [r4, #4]
 8002b56:	6862      	ldr	r2, [r4, #4]
 8002b58:	4945      	ldr	r1, [pc, #276]	; (8002c70 <_scanf_i+0x1e4>)
 8002b5a:	6960      	ldr	r0, [r4, #20]
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	1a89      	subs	r1, r1, r2
 8002b60:	f000 f92c 	bl	8002dbc <__sccl>
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	f04f 0800 	mov.w	r8, #0
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	68a3      	ldr	r3, [r4, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d038      	beq.n	8002be4 <_scanf_i+0x158>
 8002b72:	6831      	ldr	r1, [r6, #0]
 8002b74:	6960      	ldr	r0, [r4, #20]
 8002b76:	780a      	ldrb	r2, [r1, #0]
 8002b78:	5c80      	ldrb	r0, [r0, r2]
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d032      	beq.n	8002be4 <_scanf_i+0x158>
 8002b7e:	2a30      	cmp	r2, #48	; 0x30
 8002b80:	6822      	ldr	r2, [r4, #0]
 8002b82:	d121      	bne.n	8002bc8 <_scanf_i+0x13c>
 8002b84:	0510      	lsls	r0, r2, #20
 8002b86:	d51f      	bpl.n	8002bc8 <_scanf_i+0x13c>
 8002b88:	f108 0801 	add.w	r8, r8, #1
 8002b8c:	b117      	cbz	r7, 8002b94 <_scanf_i+0x108>
 8002b8e:	3301      	adds	r3, #1
 8002b90:	3f01      	subs	r7, #1
 8002b92:	60a3      	str	r3, [r4, #8]
 8002b94:	6873      	ldr	r3, [r6, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	6073      	str	r3, [r6, #4]
 8002b9c:	dd1b      	ble.n	8002bd6 <_scanf_i+0x14a>
 8002b9e:	6833      	ldr	r3, [r6, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	6033      	str	r3, [r6, #0]
 8002ba4:	68a3      	ldr	r3, [r4, #8]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	60a3      	str	r3, [r4, #8]
 8002baa:	e7df      	b.n	8002b6c <_scanf_i+0xe0>
 8002bac:	f1b8 0f02 	cmp.w	r8, #2
 8002bb0:	d1b1      	bne.n	8002b16 <_scanf_i+0x8a>
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002bb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002bbc:	d1c2      	bne.n	8002b44 <_scanf_i+0xb8>
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	6061      	str	r1, [r4, #4]
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc6:	e7a5      	b.n	8002b14 <_scanf_i+0x88>
 8002bc8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002bcc:	6022      	str	r2, [r4, #0]
 8002bce:	780b      	ldrb	r3, [r1, #0]
 8002bd0:	702b      	strb	r3, [r5, #0]
 8002bd2:	3501      	adds	r5, #1
 8002bd4:	e7de      	b.n	8002b94 <_scanf_i+0x108>
 8002bd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002bda:	4631      	mov	r1, r6
 8002bdc:	4658      	mov	r0, fp
 8002bde:	4798      	blx	r3
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d0df      	beq.n	8002ba4 <_scanf_i+0x118>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	05d9      	lsls	r1, r3, #23
 8002be8:	d50c      	bpl.n	8002c04 <_scanf_i+0x178>
 8002bea:	454d      	cmp	r5, r9
 8002bec:	d908      	bls.n	8002c00 <_scanf_i+0x174>
 8002bee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	4658      	mov	r0, fp
 8002bfa:	4798      	blx	r3
 8002bfc:	1e6f      	subs	r7, r5, #1
 8002bfe:	463d      	mov	r5, r7
 8002c00:	454d      	cmp	r5, r9
 8002c02:	d02c      	beq.n	8002c5e <_scanf_i+0x1d2>
 8002c04:	6822      	ldr	r2, [r4, #0]
 8002c06:	f012 0210 	ands.w	r2, r2, #16
 8002c0a:	d11e      	bne.n	8002c4a <_scanf_i+0x1be>
 8002c0c:	702a      	strb	r2, [r5, #0]
 8002c0e:	6863      	ldr	r3, [r4, #4]
 8002c10:	9e00      	ldr	r6, [sp, #0]
 8002c12:	4649      	mov	r1, r9
 8002c14:	4658      	mov	r0, fp
 8002c16:	47b0      	blx	r6
 8002c18:	6822      	ldr	r2, [r4, #0]
 8002c1a:	f8da 3000 	ldr.w	r3, [sl]
 8002c1e:	f012 0f20 	tst.w	r2, #32
 8002c22:	d008      	beq.n	8002c36 <_scanf_i+0x1aa>
 8002c24:	1d1a      	adds	r2, r3, #4
 8002c26:	f8ca 2000 	str.w	r2, [sl]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6018      	str	r0, [r3, #0]
 8002c2e:	e009      	b.n	8002c44 <_scanf_i+0x1b8>
 8002c30:	f04f 0800 	mov.w	r8, #0
 8002c34:	e7d6      	b.n	8002be4 <_scanf_i+0x158>
 8002c36:	07d2      	lsls	r2, r2, #31
 8002c38:	d5f4      	bpl.n	8002c24 <_scanf_i+0x198>
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	f8ca 2000 	str.w	r2, [sl]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	8018      	strh	r0, [r3, #0]
 8002c44:	68e3      	ldr	r3, [r4, #12]
 8002c46:	3301      	adds	r3, #1
 8002c48:	60e3      	str	r3, [r4, #12]
 8002c4a:	eba5 0509 	sub.w	r5, r5, r9
 8002c4e:	44a8      	add	r8, r5
 8002c50:	6925      	ldr	r5, [r4, #16]
 8002c52:	4445      	add	r5, r8
 8002c54:	6125      	str	r5, [r4, #16]
 8002c56:	2000      	movs	r0, #0
 8002c58:	b007      	add	sp, #28
 8002c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5e:	2001      	movs	r0, #1
 8002c60:	e7fa      	b.n	8002c58 <_scanf_i+0x1cc>
 8002c62:	bf00      	nop
 8002c64:	0800343c 	.word	0x0800343c
 8002c68:	080030c5 	.word	0x080030c5
 8002c6c:	08002fa5 	.word	0x08002fa5
 8002c70:	08003507 	.word	0x08003507

08002c74 <lflush>:
 8002c74:	8983      	ldrh	r3, [r0, #12]
 8002c76:	f003 0309 	and.w	r3, r3, #9
 8002c7a:	2b09      	cmp	r3, #9
 8002c7c:	d101      	bne.n	8002c82 <lflush+0xe>
 8002c7e:	f7ff b83f 	b.w	8001d00 <fflush>
 8002c82:	2000      	movs	r0, #0
 8002c84:	4770      	bx	lr
	...

08002c88 <__srefill_r>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	b118      	cbz	r0, 8002c98 <__srefill_r+0x10>
 8002c90:	6983      	ldr	r3, [r0, #24]
 8002c92:	b90b      	cbnz	r3, 8002c98 <__srefill_r+0x10>
 8002c94:	f7ff f886 	bl	8001da4 <__sinit>
 8002c98:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <__srefill_r+0x100>)
 8002c9a:	429c      	cmp	r4, r3
 8002c9c:	d10a      	bne.n	8002cb4 <__srefill_r+0x2c>
 8002c9e:	686c      	ldr	r4, [r5, #4]
 8002ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6063      	str	r3, [r4, #4]
 8002ca8:	b293      	uxth	r3, r2
 8002caa:	069e      	lsls	r6, r3, #26
 8002cac:	d50c      	bpl.n	8002cc8 <__srefill_r+0x40>
 8002cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <__srefill_r+0x104>)
 8002cb6:	429c      	cmp	r4, r3
 8002cb8:	d101      	bne.n	8002cbe <__srefill_r+0x36>
 8002cba:	68ac      	ldr	r4, [r5, #8]
 8002cbc:	e7f0      	b.n	8002ca0 <__srefill_r+0x18>
 8002cbe:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <__srefill_r+0x108>)
 8002cc0:	429c      	cmp	r4, r3
 8002cc2:	bf08      	it	eq
 8002cc4:	68ec      	ldreq	r4, [r5, #12]
 8002cc6:	e7eb      	b.n	8002ca0 <__srefill_r+0x18>
 8002cc8:	0758      	lsls	r0, r3, #29
 8002cca:	d448      	bmi.n	8002d5e <__srefill_r+0xd6>
 8002ccc:	06d9      	lsls	r1, r3, #27
 8002cce:	d405      	bmi.n	8002cdc <__srefill_r+0x54>
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd6:	602b      	str	r3, [r5, #0]
 8002cd8:	81a2      	strh	r2, [r4, #12]
 8002cda:	e7e8      	b.n	8002cae <__srefill_r+0x26>
 8002cdc:	071a      	lsls	r2, r3, #28
 8002cde:	d50b      	bpl.n	8002cf8 <__srefill_r+0x70>
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f7fe ffe2 	bl	8001cac <_fflush_r>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d1e0      	bne.n	8002cae <__srefill_r+0x26>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	60a0      	str	r0, [r4, #8]
 8002cf0:	f023 0308 	bic.w	r3, r3, #8
 8002cf4:	81a3      	strh	r3, [r4, #12]
 8002cf6:	61a0      	str	r0, [r4, #24]
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	81a3      	strh	r3, [r4, #12]
 8002d00:	6923      	ldr	r3, [r4, #16]
 8002d02:	b91b      	cbnz	r3, 8002d0c <__srefill_r+0x84>
 8002d04:	4621      	mov	r1, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	f7ff f916 	bl	8001f38 <__smakebuf_r>
 8002d0c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002d10:	b2be      	uxth	r6, r7
 8002d12:	07b3      	lsls	r3, r6, #30
 8002d14:	d00f      	beq.n	8002d36 <__srefill_r+0xae>
 8002d16:	2301      	movs	r3, #1
 8002d18:	81a3      	strh	r3, [r4, #12]
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <__srefill_r+0x10c>)
 8002d1c:	491e      	ldr	r1, [pc, #120]	; (8002d98 <__srefill_r+0x110>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	f006 0609 	and.w	r6, r6, #9
 8002d24:	f7ff f8aa 	bl	8001e7c <_fwalk>
 8002d28:	2e09      	cmp	r6, #9
 8002d2a:	81a7      	strh	r7, [r4, #12]
 8002d2c:	d103      	bne.n	8002d36 <__srefill_r+0xae>
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7fe ff33 	bl	8001b9c <__sflush_r>
 8002d36:	6922      	ldr	r2, [r4, #16]
 8002d38:	6022      	str	r2, [r4, #0]
 8002d3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002d3c:	6963      	ldr	r3, [r4, #20]
 8002d3e:	6a21      	ldr	r1, [r4, #32]
 8002d40:	4628      	mov	r0, r5
 8002d42:	47b0      	blx	r6
 8002d44:	2800      	cmp	r0, #0
 8002d46:	6060      	str	r0, [r4, #4]
 8002d48:	dc1c      	bgt.n	8002d84 <__srefill_r+0xfc>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	bf17      	itett	ne
 8002d4e:	2200      	movne	r2, #0
 8002d50:	f043 0320 	orreq.w	r3, r3, #32
 8002d54:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002d58:	6062      	strne	r2, [r4, #4]
 8002d5a:	81a3      	strh	r3, [r4, #12]
 8002d5c:	e7a7      	b.n	8002cae <__srefill_r+0x26>
 8002d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d0cd      	beq.n	8002d00 <__srefill_r+0x78>
 8002d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d68:	4299      	cmp	r1, r3
 8002d6a:	d002      	beq.n	8002d72 <__srefill_r+0xea>
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f7ff f92b 	bl	8001fc8 <_free_r>
 8002d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d74:	6063      	str	r3, [r4, #4]
 8002d76:	2000      	movs	r0, #0
 8002d78:	6360      	str	r0, [r4, #52]	; 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0c0      	beq.n	8002d00 <__srefill_r+0x78>
 8002d7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d84:	2000      	movs	r0, #0
 8002d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d88:	08003484 	.word	0x08003484
 8002d8c:	080034a4 	.word	0x080034a4
 8002d90:	08003464 	.word	0x08003464
 8002d94:	08003460 	.word	0x08003460
 8002d98:	08002c75 	.word	0x08002c75

08002d9c <_sbrk_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4c06      	ldr	r4, [pc, #24]	; (8002db8 <_sbrk_r+0x1c>)
 8002da0:	2300      	movs	r3, #0
 8002da2:	4605      	mov	r5, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	f7fd fd1c 	bl	80007e4 <_sbrk>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_sbrk_r+0x1a>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_sbrk_r+0x1a>
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	20000208 	.word	0x20000208

08002dbc <__sccl>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	780b      	ldrb	r3, [r1, #0]
 8002dc0:	2b5e      	cmp	r3, #94	; 0x5e
 8002dc2:	bf13      	iteet	ne
 8002dc4:	1c4a      	addne	r2, r1, #1
 8002dc6:	1c8a      	addeq	r2, r1, #2
 8002dc8:	784b      	ldrbeq	r3, [r1, #1]
 8002dca:	2100      	movne	r1, #0
 8002dcc:	bf08      	it	eq
 8002dce:	2101      	moveq	r1, #1
 8002dd0:	1e44      	subs	r4, r0, #1
 8002dd2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8002dd6:	f804 1f01 	strb.w	r1, [r4, #1]!
 8002dda:	42a5      	cmp	r5, r4
 8002ddc:	d1fb      	bne.n	8002dd6 <__sccl+0x1a>
 8002dde:	b913      	cbnz	r3, 8002de6 <__sccl+0x2a>
 8002de0:	3a01      	subs	r2, #1
 8002de2:	4610      	mov	r0, r2
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	f081 0401 	eor.w	r4, r1, #1
 8002dea:	54c4      	strb	r4, [r0, r3]
 8002dec:	4611      	mov	r1, r2
 8002dee:	780d      	ldrb	r5, [r1, #0]
 8002df0:	2d2d      	cmp	r5, #45	; 0x2d
 8002df2:	f101 0201 	add.w	r2, r1, #1
 8002df6:	d006      	beq.n	8002e06 <__sccl+0x4a>
 8002df8:	2d5d      	cmp	r5, #93	; 0x5d
 8002dfa:	d0f2      	beq.n	8002de2 <__sccl+0x26>
 8002dfc:	b90d      	cbnz	r5, 8002e02 <__sccl+0x46>
 8002dfe:	460a      	mov	r2, r1
 8002e00:	e7ef      	b.n	8002de2 <__sccl+0x26>
 8002e02:	462b      	mov	r3, r5
 8002e04:	e7f1      	b.n	8002dea <__sccl+0x2e>
 8002e06:	784e      	ldrb	r6, [r1, #1]
 8002e08:	2e5d      	cmp	r6, #93	; 0x5d
 8002e0a:	d0fa      	beq.n	8002e02 <__sccl+0x46>
 8002e0c:	42b3      	cmp	r3, r6
 8002e0e:	dcf8      	bgt.n	8002e02 <__sccl+0x46>
 8002e10:	3102      	adds	r1, #2
 8002e12:	3301      	adds	r3, #1
 8002e14:	429e      	cmp	r6, r3
 8002e16:	54c4      	strb	r4, [r0, r3]
 8002e18:	dcfb      	bgt.n	8002e12 <__sccl+0x56>
 8002e1a:	e7e8      	b.n	8002dee <__sccl+0x32>

08002e1c <__sread>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	460c      	mov	r4, r1
 8002e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e24:	f000 fabc 	bl	80033a0 <_read_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	bfab      	itete	ge
 8002e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e30:	181b      	addge	r3, r3, r0
 8002e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e36:	bfac      	ite	ge
 8002e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e3a:	81a3      	strhlt	r3, [r4, #12]
 8002e3c:	bd10      	pop	{r4, pc}

08002e3e <__swrite>:
 8002e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e42:	461f      	mov	r7, r3
 8002e44:	898b      	ldrh	r3, [r1, #12]
 8002e46:	05db      	lsls	r3, r3, #23
 8002e48:	4605      	mov	r5, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4616      	mov	r6, r2
 8002e4e:	d505      	bpl.n	8002e5c <__swrite+0x1e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	2200      	movs	r2, #0
 8002e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e58:	f000 fa4a 	bl	80032f0 <_lseek_r>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	4632      	mov	r2, r6
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e72:	f000 b9e7 	b.w	8003244 <_write_r>

08002e76 <__sseek>:
 8002e76:	b510      	push	{r4, lr}
 8002e78:	460c      	mov	r4, r1
 8002e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7e:	f000 fa37 	bl	80032f0 <_lseek_r>
 8002e82:	1c43      	adds	r3, r0, #1
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	bf15      	itete	ne
 8002e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e92:	81a3      	strheq	r3, [r4, #12]
 8002e94:	bf18      	it	ne
 8002e96:	81a3      	strhne	r3, [r4, #12]
 8002e98:	bd10      	pop	{r4, pc}

08002e9a <__sclose>:
 8002e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9e:	f000 b9e3 	b.w	8003268 <_close_r>

08002ea2 <_strtol_l.isra.0>:
 8002ea2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea6:	4680      	mov	r8, r0
 8002ea8:	4689      	mov	r9, r1
 8002eaa:	4692      	mov	sl, r2
 8002eac:	461f      	mov	r7, r3
 8002eae:	468b      	mov	fp, r1
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002eb8:	f000 fa08 	bl	80032cc <__locale_ctype_ptr_l>
 8002ebc:	4420      	add	r0, r4
 8002ebe:	7846      	ldrb	r6, [r0, #1]
 8002ec0:	f016 0608 	ands.w	r6, r6, #8
 8002ec4:	d10b      	bne.n	8002ede <_strtol_l.isra.0+0x3c>
 8002ec6:	2c2d      	cmp	r4, #45	; 0x2d
 8002ec8:	d10b      	bne.n	8002ee2 <_strtol_l.isra.0+0x40>
 8002eca:	782c      	ldrb	r4, [r5, #0]
 8002ecc:	2601      	movs	r6, #1
 8002ece:	f10b 0502 	add.w	r5, fp, #2
 8002ed2:	b167      	cbz	r7, 8002eee <_strtol_l.isra.0+0x4c>
 8002ed4:	2f10      	cmp	r7, #16
 8002ed6:	d114      	bne.n	8002f02 <_strtol_l.isra.0+0x60>
 8002ed8:	2c30      	cmp	r4, #48	; 0x30
 8002eda:	d00a      	beq.n	8002ef2 <_strtol_l.isra.0+0x50>
 8002edc:	e011      	b.n	8002f02 <_strtol_l.isra.0+0x60>
 8002ede:	46ab      	mov	fp, r5
 8002ee0:	e7e6      	b.n	8002eb0 <_strtol_l.isra.0+0xe>
 8002ee2:	2c2b      	cmp	r4, #43	; 0x2b
 8002ee4:	bf04      	itt	eq
 8002ee6:	782c      	ldrbeq	r4, [r5, #0]
 8002ee8:	f10b 0502 	addeq.w	r5, fp, #2
 8002eec:	e7f1      	b.n	8002ed2 <_strtol_l.isra.0+0x30>
 8002eee:	2c30      	cmp	r4, #48	; 0x30
 8002ef0:	d127      	bne.n	8002f42 <_strtol_l.isra.0+0xa0>
 8002ef2:	782b      	ldrb	r3, [r5, #0]
 8002ef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002ef8:	2b58      	cmp	r3, #88	; 0x58
 8002efa:	d14b      	bne.n	8002f94 <_strtol_l.isra.0+0xf2>
 8002efc:	786c      	ldrb	r4, [r5, #1]
 8002efe:	2710      	movs	r7, #16
 8002f00:	3502      	adds	r5, #2
 8002f02:	2e00      	cmp	r6, #0
 8002f04:	bf0c      	ite	eq
 8002f06:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002f0a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002f0e:	2200      	movs	r2, #0
 8002f10:	fbb1 fef7 	udiv	lr, r1, r7
 8002f14:	4610      	mov	r0, r2
 8002f16:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002f1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002f1e:	2b09      	cmp	r3, #9
 8002f20:	d811      	bhi.n	8002f46 <_strtol_l.isra.0+0xa4>
 8002f22:	461c      	mov	r4, r3
 8002f24:	42a7      	cmp	r7, r4
 8002f26:	dd1d      	ble.n	8002f64 <_strtol_l.isra.0+0xc2>
 8002f28:	1c53      	adds	r3, r2, #1
 8002f2a:	d007      	beq.n	8002f3c <_strtol_l.isra.0+0x9a>
 8002f2c:	4586      	cmp	lr, r0
 8002f2e:	d316      	bcc.n	8002f5e <_strtol_l.isra.0+0xbc>
 8002f30:	d101      	bne.n	8002f36 <_strtol_l.isra.0+0x94>
 8002f32:	45a4      	cmp	ip, r4
 8002f34:	db13      	blt.n	8002f5e <_strtol_l.isra.0+0xbc>
 8002f36:	fb00 4007 	mla	r0, r0, r7, r4
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f40:	e7eb      	b.n	8002f1a <_strtol_l.isra.0+0x78>
 8002f42:	270a      	movs	r7, #10
 8002f44:	e7dd      	b.n	8002f02 <_strtol_l.isra.0+0x60>
 8002f46:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002f4a:	2b19      	cmp	r3, #25
 8002f4c:	d801      	bhi.n	8002f52 <_strtol_l.isra.0+0xb0>
 8002f4e:	3c37      	subs	r4, #55	; 0x37
 8002f50:	e7e8      	b.n	8002f24 <_strtol_l.isra.0+0x82>
 8002f52:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002f56:	2b19      	cmp	r3, #25
 8002f58:	d804      	bhi.n	8002f64 <_strtol_l.isra.0+0xc2>
 8002f5a:	3c57      	subs	r4, #87	; 0x57
 8002f5c:	e7e2      	b.n	8002f24 <_strtol_l.isra.0+0x82>
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f62:	e7eb      	b.n	8002f3c <_strtol_l.isra.0+0x9a>
 8002f64:	1c53      	adds	r3, r2, #1
 8002f66:	d108      	bne.n	8002f7a <_strtol_l.isra.0+0xd8>
 8002f68:	2322      	movs	r3, #34	; 0x22
 8002f6a:	f8c8 3000 	str.w	r3, [r8]
 8002f6e:	4608      	mov	r0, r1
 8002f70:	f1ba 0f00 	cmp.w	sl, #0
 8002f74:	d107      	bne.n	8002f86 <_strtol_l.isra.0+0xe4>
 8002f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f7a:	b106      	cbz	r6, 8002f7e <_strtol_l.isra.0+0xdc>
 8002f7c:	4240      	negs	r0, r0
 8002f7e:	f1ba 0f00 	cmp.w	sl, #0
 8002f82:	d00c      	beq.n	8002f9e <_strtol_l.isra.0+0xfc>
 8002f84:	b122      	cbz	r2, 8002f90 <_strtol_l.isra.0+0xee>
 8002f86:	3d01      	subs	r5, #1
 8002f88:	f8ca 5000 	str.w	r5, [sl]
 8002f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f90:	464d      	mov	r5, r9
 8002f92:	e7f9      	b.n	8002f88 <_strtol_l.isra.0+0xe6>
 8002f94:	2430      	movs	r4, #48	; 0x30
 8002f96:	2f00      	cmp	r7, #0
 8002f98:	d1b3      	bne.n	8002f02 <_strtol_l.isra.0+0x60>
 8002f9a:	2708      	movs	r7, #8
 8002f9c:	e7b1      	b.n	8002f02 <_strtol_l.isra.0+0x60>
 8002f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002fa4 <_strtol_r>:
 8002fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fa6:	4c06      	ldr	r4, [pc, #24]	; (8002fc0 <_strtol_r+0x1c>)
 8002fa8:	4d06      	ldr	r5, [pc, #24]	; (8002fc4 <_strtol_r+0x20>)
 8002faa:	6824      	ldr	r4, [r4, #0]
 8002fac:	6a24      	ldr	r4, [r4, #32]
 8002fae:	2c00      	cmp	r4, #0
 8002fb0:	bf08      	it	eq
 8002fb2:	462c      	moveq	r4, r5
 8002fb4:	9400      	str	r4, [sp, #0]
 8002fb6:	f7ff ff74 	bl	8002ea2 <_strtol_l.isra.0>
 8002fba:	b003      	add	sp, #12
 8002fbc:	bd30      	pop	{r4, r5, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000000c 	.word	0x2000000c
 8002fc4:	20000070 	.word	0x20000070

08002fc8 <_strtoul_l.isra.0>:
 8002fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fcc:	4680      	mov	r8, r0
 8002fce:	4689      	mov	r9, r1
 8002fd0:	4692      	mov	sl, r2
 8002fd2:	461e      	mov	r6, r3
 8002fd4:	460f      	mov	r7, r1
 8002fd6:	463d      	mov	r5, r7
 8002fd8:	9808      	ldr	r0, [sp, #32]
 8002fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002fde:	f000 f975 	bl	80032cc <__locale_ctype_ptr_l>
 8002fe2:	4420      	add	r0, r4
 8002fe4:	7843      	ldrb	r3, [r0, #1]
 8002fe6:	f013 0308 	ands.w	r3, r3, #8
 8002fea:	d10a      	bne.n	8003002 <_strtoul_l.isra.0+0x3a>
 8002fec:	2c2d      	cmp	r4, #45	; 0x2d
 8002fee:	d10a      	bne.n	8003006 <_strtoul_l.isra.0+0x3e>
 8002ff0:	782c      	ldrb	r4, [r5, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	1cbd      	adds	r5, r7, #2
 8002ff6:	b15e      	cbz	r6, 8003010 <_strtoul_l.isra.0+0x48>
 8002ff8:	2e10      	cmp	r6, #16
 8002ffa:	d113      	bne.n	8003024 <_strtoul_l.isra.0+0x5c>
 8002ffc:	2c30      	cmp	r4, #48	; 0x30
 8002ffe:	d009      	beq.n	8003014 <_strtoul_l.isra.0+0x4c>
 8003000:	e010      	b.n	8003024 <_strtoul_l.isra.0+0x5c>
 8003002:	462f      	mov	r7, r5
 8003004:	e7e7      	b.n	8002fd6 <_strtoul_l.isra.0+0xe>
 8003006:	2c2b      	cmp	r4, #43	; 0x2b
 8003008:	bf04      	itt	eq
 800300a:	782c      	ldrbeq	r4, [r5, #0]
 800300c:	1cbd      	addeq	r5, r7, #2
 800300e:	e7f2      	b.n	8002ff6 <_strtoul_l.isra.0+0x2e>
 8003010:	2c30      	cmp	r4, #48	; 0x30
 8003012:	d125      	bne.n	8003060 <_strtoul_l.isra.0+0x98>
 8003014:	782a      	ldrb	r2, [r5, #0]
 8003016:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800301a:	2a58      	cmp	r2, #88	; 0x58
 800301c:	d14a      	bne.n	80030b4 <_strtoul_l.isra.0+0xec>
 800301e:	786c      	ldrb	r4, [r5, #1]
 8003020:	2610      	movs	r6, #16
 8003022:	3502      	adds	r5, #2
 8003024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003028:	2700      	movs	r7, #0
 800302a:	fbb1 f1f6 	udiv	r1, r1, r6
 800302e:	fb06 fe01 	mul.w	lr, r6, r1
 8003032:	ea6f 0e0e 	mvn.w	lr, lr
 8003036:	4638      	mov	r0, r7
 8003038:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800303c:	2a09      	cmp	r2, #9
 800303e:	d811      	bhi.n	8003064 <_strtoul_l.isra.0+0x9c>
 8003040:	4614      	mov	r4, r2
 8003042:	42a6      	cmp	r6, r4
 8003044:	dd1d      	ble.n	8003082 <_strtoul_l.isra.0+0xba>
 8003046:	2f00      	cmp	r7, #0
 8003048:	db18      	blt.n	800307c <_strtoul_l.isra.0+0xb4>
 800304a:	4281      	cmp	r1, r0
 800304c:	d316      	bcc.n	800307c <_strtoul_l.isra.0+0xb4>
 800304e:	d101      	bne.n	8003054 <_strtoul_l.isra.0+0x8c>
 8003050:	45a6      	cmp	lr, r4
 8003052:	db13      	blt.n	800307c <_strtoul_l.isra.0+0xb4>
 8003054:	fb00 4006 	mla	r0, r0, r6, r4
 8003058:	2701      	movs	r7, #1
 800305a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800305e:	e7eb      	b.n	8003038 <_strtoul_l.isra.0+0x70>
 8003060:	260a      	movs	r6, #10
 8003062:	e7df      	b.n	8003024 <_strtoul_l.isra.0+0x5c>
 8003064:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8003068:	2a19      	cmp	r2, #25
 800306a:	d801      	bhi.n	8003070 <_strtoul_l.isra.0+0xa8>
 800306c:	3c37      	subs	r4, #55	; 0x37
 800306e:	e7e8      	b.n	8003042 <_strtoul_l.isra.0+0x7a>
 8003070:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8003074:	2a19      	cmp	r2, #25
 8003076:	d804      	bhi.n	8003082 <_strtoul_l.isra.0+0xba>
 8003078:	3c57      	subs	r4, #87	; 0x57
 800307a:	e7e2      	b.n	8003042 <_strtoul_l.isra.0+0x7a>
 800307c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003080:	e7eb      	b.n	800305a <_strtoul_l.isra.0+0x92>
 8003082:	2f00      	cmp	r7, #0
 8003084:	da09      	bge.n	800309a <_strtoul_l.isra.0+0xd2>
 8003086:	2322      	movs	r3, #34	; 0x22
 8003088:	f8c8 3000 	str.w	r3, [r8]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003090:	f1ba 0f00 	cmp.w	sl, #0
 8003094:	d107      	bne.n	80030a6 <_strtoul_l.isra.0+0xde>
 8003096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800309a:	b103      	cbz	r3, 800309e <_strtoul_l.isra.0+0xd6>
 800309c:	4240      	negs	r0, r0
 800309e:	f1ba 0f00 	cmp.w	sl, #0
 80030a2:	d00c      	beq.n	80030be <_strtoul_l.isra.0+0xf6>
 80030a4:	b127      	cbz	r7, 80030b0 <_strtoul_l.isra.0+0xe8>
 80030a6:	3d01      	subs	r5, #1
 80030a8:	f8ca 5000 	str.w	r5, [sl]
 80030ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b0:	464d      	mov	r5, r9
 80030b2:	e7f9      	b.n	80030a8 <_strtoul_l.isra.0+0xe0>
 80030b4:	2430      	movs	r4, #48	; 0x30
 80030b6:	2e00      	cmp	r6, #0
 80030b8:	d1b4      	bne.n	8003024 <_strtoul_l.isra.0+0x5c>
 80030ba:	2608      	movs	r6, #8
 80030bc:	e7b2      	b.n	8003024 <_strtoul_l.isra.0+0x5c>
 80030be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080030c4 <_strtoul_r>:
 80030c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030c6:	4c06      	ldr	r4, [pc, #24]	; (80030e0 <_strtoul_r+0x1c>)
 80030c8:	4d06      	ldr	r5, [pc, #24]	; (80030e4 <_strtoul_r+0x20>)
 80030ca:	6824      	ldr	r4, [r4, #0]
 80030cc:	6a24      	ldr	r4, [r4, #32]
 80030ce:	2c00      	cmp	r4, #0
 80030d0:	bf08      	it	eq
 80030d2:	462c      	moveq	r4, r5
 80030d4:	9400      	str	r4, [sp, #0]
 80030d6:	f7ff ff77 	bl	8002fc8 <_strtoul_l.isra.0>
 80030da:	b003      	add	sp, #12
 80030dc:	bd30      	pop	{r4, r5, pc}
 80030de:	bf00      	nop
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	20000070 	.word	0x20000070

080030e8 <__submore>:
 80030e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ec:	460c      	mov	r4, r1
 80030ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80030f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030f4:	4299      	cmp	r1, r3
 80030f6:	d11e      	bne.n	8003136 <__submore+0x4e>
 80030f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030fc:	f7fe ffb2 	bl	8002064 <_malloc_r>
 8003100:	b918      	cbnz	r0, 800310a <__submore+0x22>
 8003102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800310a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003110:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003114:	6360      	str	r0, [r4, #52]	; 0x34
 8003116:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800311a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800311e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003122:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003126:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800312a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800312e:	6020      	str	r0, [r4, #0]
 8003130:	2000      	movs	r0, #0
 8003132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003136:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003138:	0077      	lsls	r7, r6, #1
 800313a:	463a      	mov	r2, r7
 800313c:	f000 f909 	bl	8003352 <_realloc_r>
 8003140:	4605      	mov	r5, r0
 8003142:	2800      	cmp	r0, #0
 8003144:	d0dd      	beq.n	8003102 <__submore+0x1a>
 8003146:	eb00 0806 	add.w	r8, r0, r6
 800314a:	4601      	mov	r1, r0
 800314c:	4632      	mov	r2, r6
 800314e:	4640      	mov	r0, r8
 8003150:	f000 f8f2 	bl	8003338 <memcpy>
 8003154:	f8c4 8000 	str.w	r8, [r4]
 8003158:	6365      	str	r5, [r4, #52]	; 0x34
 800315a:	63a7      	str	r7, [r4, #56]	; 0x38
 800315c:	e7e8      	b.n	8003130 <__submore+0x48>
	...

08003160 <_ungetc_r>:
 8003160:	1c4b      	adds	r3, r1, #1
 8003162:	b570      	push	{r4, r5, r6, lr}
 8003164:	4606      	mov	r6, r0
 8003166:	460d      	mov	r5, r1
 8003168:	4614      	mov	r4, r2
 800316a:	d103      	bne.n	8003174 <_ungetc_r+0x14>
 800316c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003170:	4628      	mov	r0, r5
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	b118      	cbz	r0, 800317e <_ungetc_r+0x1e>
 8003176:	6983      	ldr	r3, [r0, #24]
 8003178:	b90b      	cbnz	r3, 800317e <_ungetc_r+0x1e>
 800317a:	f7fe fe13 	bl	8001da4 <__sinit>
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <_ungetc_r+0xd8>)
 8003180:	429c      	cmp	r4, r3
 8003182:	d12c      	bne.n	80031de <_ungetc_r+0x7e>
 8003184:	6874      	ldr	r4, [r6, #4]
 8003186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800318a:	f023 0320 	bic.w	r3, r3, #32
 800318e:	81a3      	strh	r3, [r4, #12]
 8003190:	b29b      	uxth	r3, r3
 8003192:	0759      	lsls	r1, r3, #29
 8003194:	d413      	bmi.n	80031be <_ungetc_r+0x5e>
 8003196:	06da      	lsls	r2, r3, #27
 8003198:	d5e8      	bpl.n	800316c <_ungetc_r+0xc>
 800319a:	071b      	lsls	r3, r3, #28
 800319c:	d50b      	bpl.n	80031b6 <_ungetc_r+0x56>
 800319e:	4621      	mov	r1, r4
 80031a0:	4630      	mov	r0, r6
 80031a2:	f7fe fd83 	bl	8001cac <_fflush_r>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d1e0      	bne.n	800316c <_ungetc_r+0xc>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	60a0      	str	r0, [r4, #8]
 80031ae:	f023 0308 	bic.w	r3, r3, #8
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	61a0      	str	r0, [r4, #24]
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c0:	6862      	ldr	r2, [r4, #4]
 80031c2:	b2ed      	uxtb	r5, r5
 80031c4:	b1e3      	cbz	r3, 8003200 <_ungetc_r+0xa0>
 80031c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031c8:	429a      	cmp	r2, r3
 80031ca:	da12      	bge.n	80031f2 <_ungetc_r+0x92>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	6022      	str	r2, [r4, #0]
 80031d2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80031d6:	6863      	ldr	r3, [r4, #4]
 80031d8:	3301      	adds	r3, #1
 80031da:	6063      	str	r3, [r4, #4]
 80031dc:	e7c8      	b.n	8003170 <_ungetc_r+0x10>
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <_ungetc_r+0xdc>)
 80031e0:	429c      	cmp	r4, r3
 80031e2:	d101      	bne.n	80031e8 <_ungetc_r+0x88>
 80031e4:	68b4      	ldr	r4, [r6, #8]
 80031e6:	e7ce      	b.n	8003186 <_ungetc_r+0x26>
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <_ungetc_r+0xe0>)
 80031ea:	429c      	cmp	r4, r3
 80031ec:	bf08      	it	eq
 80031ee:	68f4      	ldreq	r4, [r6, #12]
 80031f0:	e7c9      	b.n	8003186 <_ungetc_r+0x26>
 80031f2:	4621      	mov	r1, r4
 80031f4:	4630      	mov	r0, r6
 80031f6:	f7ff ff77 	bl	80030e8 <__submore>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d0e6      	beq.n	80031cc <_ungetc_r+0x6c>
 80031fe:	e7b5      	b.n	800316c <_ungetc_r+0xc>
 8003200:	6921      	ldr	r1, [r4, #16]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	b151      	cbz	r1, 800321c <_ungetc_r+0xbc>
 8003206:	4299      	cmp	r1, r3
 8003208:	d208      	bcs.n	800321c <_ungetc_r+0xbc>
 800320a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800320e:	428d      	cmp	r5, r1
 8003210:	d104      	bne.n	800321c <_ungetc_r+0xbc>
 8003212:	3b01      	subs	r3, #1
 8003214:	3201      	adds	r2, #1
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	6062      	str	r2, [r4, #4]
 800321a:	e7a9      	b.n	8003170 <_ungetc_r+0x10>
 800321c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800321e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003222:	6363      	str	r3, [r4, #52]	; 0x34
 8003224:	2303      	movs	r3, #3
 8003226:	63a3      	str	r3, [r4, #56]	; 0x38
 8003228:	4623      	mov	r3, r4
 800322a:	6422      	str	r2, [r4, #64]	; 0x40
 800322c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	2301      	movs	r3, #1
 8003234:	e7d1      	b.n	80031da <_ungetc_r+0x7a>
 8003236:	bf00      	nop
 8003238:	08003484 	.word	0x08003484
 800323c:	080034a4 	.word	0x080034a4
 8003240:	08003464 	.word	0x08003464

08003244 <_write_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4c07      	ldr	r4, [pc, #28]	; (8003264 <_write_r+0x20>)
 8003248:	4605      	mov	r5, r0
 800324a:	4608      	mov	r0, r1
 800324c:	4611      	mov	r1, r2
 800324e:	2200      	movs	r2, #0
 8003250:	6022      	str	r2, [r4, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	f7fd faaa 	bl	80007ac <_write>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_write_r+0x1e>
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	b103      	cbz	r3, 8003262 <_write_r+0x1e>
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000208 	.word	0x20000208

08003268 <_close_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4c06      	ldr	r4, [pc, #24]	; (8003284 <_close_r+0x1c>)
 800326c:	2300      	movs	r3, #0
 800326e:	4605      	mov	r5, r0
 8003270:	4608      	mov	r0, r1
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	f7fd fae2 	bl	800083c <_close>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d102      	bne.n	8003282 <_close_r+0x1a>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	b103      	cbz	r3, 8003282 <_close_r+0x1a>
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	20000208 	.word	0x20000208

08003288 <_fstat_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4c07      	ldr	r4, [pc, #28]	; (80032a8 <_fstat_r+0x20>)
 800328c:	2300      	movs	r3, #0
 800328e:	4605      	mov	r5, r0
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	f7fd fadd 	bl	8000854 <_fstat>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d102      	bne.n	80032a4 <_fstat_r+0x1c>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	b103      	cbz	r3, 80032a4 <_fstat_r+0x1c>
 80032a2:	602b      	str	r3, [r5, #0]
 80032a4:	bd38      	pop	{r3, r4, r5, pc}
 80032a6:	bf00      	nop
 80032a8:	20000208 	.word	0x20000208

080032ac <_isatty_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4c06      	ldr	r4, [pc, #24]	; (80032c8 <_isatty_r+0x1c>)
 80032b0:	2300      	movs	r3, #0
 80032b2:	4605      	mov	r5, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	f7fd fadc 	bl	8000874 <_isatty>
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d102      	bne.n	80032c6 <_isatty_r+0x1a>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	b103      	cbz	r3, 80032c6 <_isatty_r+0x1a>
 80032c4:	602b      	str	r3, [r5, #0]
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	20000208 	.word	0x20000208

080032cc <__locale_ctype_ptr_l>:
 80032cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80032d0:	4770      	bx	lr
	...

080032d4 <__locale_ctype_ptr>:
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <__locale_ctype_ptr+0x14>)
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <__locale_ctype_ptr+0x18>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf08      	it	eq
 80032e0:	4613      	moveq	r3, r2
 80032e2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80032e6:	4770      	bx	lr
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	20000070 	.word	0x20000070

080032f0 <_lseek_r>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4c07      	ldr	r4, [pc, #28]	; (8003310 <_lseek_r+0x20>)
 80032f4:	4605      	mov	r5, r0
 80032f6:	4608      	mov	r0, r1
 80032f8:	4611      	mov	r1, r2
 80032fa:	2200      	movs	r2, #0
 80032fc:	6022      	str	r2, [r4, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	f7fd fac3 	bl	800088a <_lseek>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d102      	bne.n	800330e <_lseek_r+0x1e>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	b103      	cbz	r3, 800330e <_lseek_r+0x1e>
 800330c:	602b      	str	r3, [r5, #0]
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	20000208 	.word	0x20000208

08003314 <__ascii_mbtowc>:
 8003314:	b082      	sub	sp, #8
 8003316:	b901      	cbnz	r1, 800331a <__ascii_mbtowc+0x6>
 8003318:	a901      	add	r1, sp, #4
 800331a:	b142      	cbz	r2, 800332e <__ascii_mbtowc+0x1a>
 800331c:	b14b      	cbz	r3, 8003332 <__ascii_mbtowc+0x1e>
 800331e:	7813      	ldrb	r3, [r2, #0]
 8003320:	600b      	str	r3, [r1, #0]
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	1c10      	adds	r0, r2, #0
 8003326:	bf18      	it	ne
 8003328:	2001      	movne	r0, #1
 800332a:	b002      	add	sp, #8
 800332c:	4770      	bx	lr
 800332e:	4610      	mov	r0, r2
 8003330:	e7fb      	b.n	800332a <__ascii_mbtowc+0x16>
 8003332:	f06f 0001 	mvn.w	r0, #1
 8003336:	e7f8      	b.n	800332a <__ascii_mbtowc+0x16>

08003338 <memcpy>:
 8003338:	b510      	push	{r4, lr}
 800333a:	1e43      	subs	r3, r0, #1
 800333c:	440a      	add	r2, r1
 800333e:	4291      	cmp	r1, r2
 8003340:	d100      	bne.n	8003344 <memcpy+0xc>
 8003342:	bd10      	pop	{r4, pc}
 8003344:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800334c:	e7f7      	b.n	800333e <memcpy+0x6>

0800334e <__malloc_lock>:
 800334e:	4770      	bx	lr

08003350 <__malloc_unlock>:
 8003350:	4770      	bx	lr

08003352 <_realloc_r>:
 8003352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003354:	4607      	mov	r7, r0
 8003356:	4614      	mov	r4, r2
 8003358:	460e      	mov	r6, r1
 800335a:	b921      	cbnz	r1, 8003366 <_realloc_r+0x14>
 800335c:	4611      	mov	r1, r2
 800335e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003362:	f7fe be7f 	b.w	8002064 <_malloc_r>
 8003366:	b922      	cbnz	r2, 8003372 <_realloc_r+0x20>
 8003368:	f7fe fe2e 	bl	8001fc8 <_free_r>
 800336c:	4625      	mov	r5, r4
 800336e:	4628      	mov	r0, r5
 8003370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003372:	f000 f834 	bl	80033de <_malloc_usable_size_r>
 8003376:	4284      	cmp	r4, r0
 8003378:	d90f      	bls.n	800339a <_realloc_r+0x48>
 800337a:	4621      	mov	r1, r4
 800337c:	4638      	mov	r0, r7
 800337e:	f7fe fe71 	bl	8002064 <_malloc_r>
 8003382:	4605      	mov	r5, r0
 8003384:	2800      	cmp	r0, #0
 8003386:	d0f2      	beq.n	800336e <_realloc_r+0x1c>
 8003388:	4631      	mov	r1, r6
 800338a:	4622      	mov	r2, r4
 800338c:	f7ff ffd4 	bl	8003338 <memcpy>
 8003390:	4631      	mov	r1, r6
 8003392:	4638      	mov	r0, r7
 8003394:	f7fe fe18 	bl	8001fc8 <_free_r>
 8003398:	e7e9      	b.n	800336e <_realloc_r+0x1c>
 800339a:	4635      	mov	r5, r6
 800339c:	e7e7      	b.n	800336e <_realloc_r+0x1c>
	...

080033a0 <_read_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4c07      	ldr	r4, [pc, #28]	; (80033c0 <_read_r+0x20>)
 80033a4:	4605      	mov	r5, r0
 80033a6:	4608      	mov	r0, r1
 80033a8:	4611      	mov	r1, r2
 80033aa:	2200      	movs	r2, #0
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7fd fbc0 	bl	8000b34 <_read>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_read_r+0x1e>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	b103      	cbz	r3, 80033be <_read_r+0x1e>
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000208 	.word	0x20000208

080033c4 <__ascii_wctomb>:
 80033c4:	b149      	cbz	r1, 80033da <__ascii_wctomb+0x16>
 80033c6:	2aff      	cmp	r2, #255	; 0xff
 80033c8:	bf85      	ittet	hi
 80033ca:	238a      	movhi	r3, #138	; 0x8a
 80033cc:	6003      	strhi	r3, [r0, #0]
 80033ce:	700a      	strbls	r2, [r1, #0]
 80033d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80033d4:	bf98      	it	ls
 80033d6:	2001      	movls	r0, #1
 80033d8:	4770      	bx	lr
 80033da:	4608      	mov	r0, r1
 80033dc:	4770      	bx	lr

080033de <_malloc_usable_size_r>:
 80033de:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80033e2:	2800      	cmp	r0, #0
 80033e4:	f1a0 0004 	sub.w	r0, r0, #4
 80033e8:	bfbc      	itt	lt
 80033ea:	580b      	ldrlt	r3, [r1, r0]
 80033ec:	18c0      	addlt	r0, r0, r3
 80033ee:	4770      	bx	lr

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
