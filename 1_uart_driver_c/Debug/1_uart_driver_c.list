
1_uart_driver_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001558  08001558  00011558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001580  08001580  00011580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000002c  2000002c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00003e85  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000d0d  00000000  00000000  00023ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003e0  00000000  00000000  00024bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000368  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000018a8  00000000  00000000  00025318  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000196f  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002852f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e34  00000000  00000000  000285ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001540 	.word	0x08001540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001540 	.word	0x08001540

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 fa35 	bl	800094c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f82d 	bl	8000540 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	//MX_GPIO_Init();
	GPIO_Init();
 80004e6:	f000 f895 	bl	8000614 <GPIO_Init>

	USART2_UART_Init();
 80004ea:	f000 f8c7 	bl	800067c <USART2_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t buff[]="Hello";
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x38>)
 80004f0:	463b      	mov	r3, r7
 80004f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f6:	6018      	str	r0, [r3, #0]
 80004f8:	3304      	adds	r3, #4
 80004fa:	8019      	strh	r1, [r3, #0]

	while (1)
	{
		uart_send_data(buff, sizeof("Hello"));
 80004fc:	463b      	mov	r3, r7
 80004fe:	2106      	movs	r1, #6
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f995 	bl	8000830 <uart_send_data>
		// USART2->DR='H';
		udelay(5000);
 8000506:	f241 3088 	movw	r0, #5000	; 0x1388
 800050a:	f000 f803 	bl	8000514 <udelay>
		uart_send_data(buff, sizeof("Hello"));
 800050e:	e7f5      	b.n	80004fc <main+0x24>
 8000510:	08001558 	.word	0x08001558

08000514 <udelay>:
	}
	/* USER CODE END 3 */
}

void udelay(uint32_t timeout_millisecond)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	/* Init tickstart for timeout managment */
	tickstart = HAL_GetTick();
 800051c:	f000 fa7c 	bl	8000a18 <HAL_GetTick>
 8000520:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - tickstart) < timeout_millisecond);
 8000522:	bf00      	nop
 8000524:	f000 fa78 	bl	8000a18 <HAL_GetTick>
 8000528:	4602      	mov	r2, r0
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	1ad2      	subs	r2, r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3f7      	bcc.n	8000524 <udelay+0x10>

	tickstart=0;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f000 ffee 	bl	8001530 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4a28      	ldr	r2, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fb16 	bl	8000bf8 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80005d2:	f000 f947 	bl	8000864 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fd6f 	bl	80010d8 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000600:	f000 f930 	bl	8000864 <Error_Handler>
	}
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <GPIO_Init>:

	/* USER CODE END USART2_Init 2 */

}
static void GPIO_Init(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	/*GPIO clock init */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <GPIO_Init+0x60>)
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <GPIO_Init+0x60>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <GPIO_Init+0x60>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

	/*init gpio as alternative function*/
	GPIOA->MODER|= (0x02UL<<GPIO_MODER_MODER2_Pos)|(0x02UL<<GPIO_MODER_MODER3_Pos);	//alternative function
 8000636:	4a10      	ldr	r2, [pc, #64]	; (8000678 <GPIO_Init+0x64>)
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <GPIO_Init+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000640:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR|= (3<<GPIO_OSPEEDR_OSPEED2_Pos)|(3<<GPIO_OSPEEDR_OSPEED3_Pos);	//Very high speed
 8000642:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <GPIO_Init+0x64>)
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <GPIO_Init+0x64>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800064c:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR|= (1<<GPIO_PUPDR_PUPD2_Pos)|(1<<GPIO_PUPDR_PUPD3_Pos);	//PUll up
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <GPIO_Init+0x64>)
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <GPIO_Init+0x64>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000658:	60d3      	str	r3, [r2, #12]
	GPIOA->AFR[0]|= (7<<GPIO_AFRL_AFSEL2_Pos)|(7<<GPIO_AFRL_AFSEL3_Pos);	//AF7 as uart2
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <GPIO_Init+0x64>)
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <GPIO_Init+0x64>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000664:	6213      	str	r3, [r2, #32]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020000 	.word	0x40020000

0800067c <USART2_UART_Init>:
static void USART2_UART_Init(void)
{
 800067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
	uint32_t pclk=0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
	/*uart clock init */
	__HAL_RCC_USART2_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4a59      	ldr	r2, [pc, #356]	; (80007f4 <USART2_UART_Init+0x178>)
 800068e:	4b59      	ldr	r3, [pc, #356]	; (80007f4 <USART2_UART_Init+0x178>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <USART2_UART_Init+0x178>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
	// tx and rx enable
	USART2->CR1|=USART_CR1_RE|USART_CR1_TE;
 80006a4:	4a54      	ldr	r2, [pc, #336]	; (80007f8 <USART2_UART_Init+0x17c>)
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <USART2_UART_Init+0x17c>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f043 030c 	orr.w	r3, r3, #12
 80006ae:	60d3      	str	r3, [r2, #12]
	//baud rate
	pclk = HAL_RCC_GetPCLK1Freq();
 80006b0:	f000 fedc 	bl	800146c <HAL_RCC_GetPCLK1Freq>
 80006b4:	60f8      	str	r0, [r7, #12]
	USART2->BRR  = UART_BRR_SAMPLING16(pclk, 115200);
 80006b6:	4b50      	ldr	r3, [pc, #320]	; (80007f8 <USART2_UART_Init+0x17c>)
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	460b      	mov	r3, r1
 80006c4:	4614      	mov	r4, r2
 80006c6:	18db      	adds	r3, r3, r3
 80006c8:	eb44 0404 	adc.w	r4, r4, r4
 80006cc:	185b      	adds	r3, r3, r1
 80006ce:	eb44 0402 	adc.w	r4, r4, r2
 80006d2:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80006d6:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80006da:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80006de:	4653      	mov	r3, sl
 80006e0:	465c      	mov	r4, fp
 80006e2:	eb13 0a01 	adds.w	sl, r3, r1
 80006e6:	eb44 0b02 	adc.w	fp, r4, r2
 80006ea:	4650      	mov	r0, sl
 80006ec:	4659      	mov	r1, fp
 80006ee:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	f7ff fd67 	bl	80001c8 <__aeabi_uldivmod>
 80006fa:	4603      	mov	r3, r0
 80006fc:	460c      	mov	r4, r1
 80006fe:	461a      	mov	r2, r3
 8000700:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <USART2_UART_Init+0x180>)
 8000702:	fba3 1302 	umull	r1, r3, r3, r2
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 0200 	mov.w	r2, #0
 8000714:	460b      	mov	r3, r1
 8000716:	4614      	mov	r4, r2
 8000718:	18db      	adds	r3, r3, r3
 800071a:	eb44 0404 	adc.w	r4, r4, r4
 800071e:	185b      	adds	r3, r3, r1
 8000720:	eb44 0402 	adc.w	r4, r4, r2
 8000724:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8000728:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800072c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8000730:	4643      	mov	r3, r8
 8000732:	464c      	mov	r4, r9
 8000734:	eb13 0801 	adds.w	r8, r3, r1
 8000738:	eb44 0902 	adc.w	r9, r4, r2
 800073c:	4640      	mov	r0, r8
 800073e:	4649      	mov	r1, r9
 8000740:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	f7ff fd3e 	bl	80001c8 <__aeabi_uldivmod>
 800074c:	4603      	mov	r3, r0
 800074e:	460c      	mov	r4, r1
 8000750:	461a      	mov	r2, r3
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <USART2_UART_Init+0x180>)
 8000754:	fba3 1302 	umull	r1, r3, r3, r2
 8000758:	095b      	lsrs	r3, r3, #5
 800075a:	2164      	movs	r1, #100	; 0x64
 800075c:	fb01 f303 	mul.w	r3, r1, r3
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	3332      	adds	r3, #50	; 0x32
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <USART2_UART_Init+0x180>)
 8000768:	fba2 1303 	umull	r1, r3, r2, r3
 800076c:	095b      	lsrs	r3, r3, #5
 800076e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000772:	eb0a 0803 	add.w	r8, sl, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	460b      	mov	r3, r1
 8000780:	4614      	mov	r4, r2
 8000782:	18db      	adds	r3, r3, r3
 8000784:	eb44 0404 	adc.w	r4, r4, r4
 8000788:	185b      	adds	r3, r3, r1
 800078a:	eb44 0402 	adc.w	r4, r4, r2
 800078e:	00e6      	lsls	r6, r4, #3
 8000790:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8000794:	00dd      	lsls	r5, r3, #3
 8000796:	462b      	mov	r3, r5
 8000798:	4634      	mov	r4, r6
 800079a:	185d      	adds	r5, r3, r1
 800079c:	eb44 0602 	adc.w	r6, r4, r2
 80007a0:	4628      	mov	r0, r5
 80007a2:	4631      	mov	r1, r6
 80007a4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	f7ff fd0c 	bl	80001c8 <__aeabi_uldivmod>
 80007b0:	4603      	mov	r3, r0
 80007b2:	460c      	mov	r4, r1
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <USART2_UART_Init+0x180>)
 80007b8:	fba3 1302 	umull	r1, r3, r3, r2
 80007bc:	095b      	lsrs	r3, r3, #5
 80007be:	2164      	movs	r1, #100	; 0x64
 80007c0:	fb01 f303 	mul.w	r3, r1, r3
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	3332      	adds	r3, #50	; 0x32
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <USART2_UART_Init+0x180>)
 80007cc:	fba2 1303 	umull	r1, r3, r2, r3
 80007d0:	095b      	lsrs	r3, r3, #5
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	4443      	add	r3, r8
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	6093      	str	r3, [r2, #8]
	/*uart enable*/
	USART2->CR1|=USART_CR1_UE;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <USART2_UART_Init+0x17c>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <USART2_UART_Init+0x17c>)
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40004400 	.word	0x40004400
 80007fc:	51eb851f 	.word	0x51eb851f

08000800 <uart_send_byte>:

uint8_t uart_send_byte(uint8_t ch)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (USART_SR_TXE))){} //TXE
 800080a:	bf00      	nop
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <uart_send_byte+0x2c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f9      	beq.n	800080c <uart_send_byte+0xc>
	USART2->DR=ch;
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <uart_send_byte+0x2c>)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	6053      	str	r3, [r2, #4]
	return ch;
 800081e:	79fb      	ldrb	r3, [r7, #7]
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40004400 	.word	0x40004400

08000830 <uart_send_data>:

void uart_send_data(uint8_t *datap,uint32_t size)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
	while(i<size)
 800083e:	e009      	b.n	8000854 <uart_send_data+0x24>
	{
		uart_send_byte(*datap++);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffd9 	bl	8000800 <uart_send_byte>
		i++;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
	while(i<size)
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	429a      	cmp	r2, r3
 800085a:	d3f1      	bcc.n	8000840 <uart_send_data+0x10>
	}
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 f96c 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f86a 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <SystemInit+0x28>)
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <SystemInit+0x28>)
 8000928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SystemInit+0x28>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	609a      	str	r2, [r3, #8]
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_Init+0x40>)
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_Init+0x40>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_Init+0x40>)
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_Init+0x40>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_Init+0x40>)
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x40>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f90b 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff ff78 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f915 	bl	8000bde <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009cc:	f000 f8eb 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000028 	.word	0x20000028

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000028 	.word	0x20000028

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	4909      	ldr	r1, [pc, #36]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	401a      	ands	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2e:	2101      	movs	r1, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	1e59      	subs	r1, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	f7ff ff90 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff49 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff5e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffb0 	bl	8000b4c <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e25b      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d075      	beq.n	8000d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c16:	4ba3      	ldr	r3, [pc, #652]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d00c      	beq.n	8000c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c22:	4ba0      	ldr	r3, [pc, #640]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d112      	bne.n	8000c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c2e:	4b9d      	ldr	r3, [pc, #628]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c3a:	d10b      	bne.n	8000c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3c:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d05b      	beq.n	8000d00 <HAL_RCC_OscConfig+0x108>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d157      	bne.n	8000d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e236      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5c:	d106      	bne.n	8000c6c <HAL_RCC_OscConfig+0x74>
 8000c5e:	4a91      	ldr	r2, [pc, #580]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	4b90      	ldr	r3, [pc, #576]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e01d      	b.n	8000ca8 <HAL_RCC_OscConfig+0xb0>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x98>
 8000c76:	4a8b      	ldr	r2, [pc, #556]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	4b8a      	ldr	r3, [pc, #552]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4a88      	ldr	r2, [pc, #544]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	4b87      	ldr	r3, [pc, #540]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e00b      	b.n	8000ca8 <HAL_RCC_OscConfig+0xb0>
 8000c90:	4a84      	ldr	r2, [pc, #528]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c92:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4a81      	ldr	r2, [pc, #516]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000c9e:	4b81      	ldr	r3, [pc, #516]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d013      	beq.n	8000cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff feb2 	bl	8000a18 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff feae 	bl	8000a18 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1fb      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	4b76      	ldr	r3, [pc, #472]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f0      	beq.n	8000cb8 <HAL_RCC_OscConfig+0xc0>
 8000cd6:	e014      	b.n	8000d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fe9e 	bl	8000a18 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fe9a 	bl	8000a18 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	; 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e1e7      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	4b6c      	ldr	r3, [pc, #432]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xe8>
 8000cfe:	e000      	b.n	8000d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d063      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d0e:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00b      	beq.n	8000d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1a:	4b62      	ldr	r3, [pc, #392]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d11c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d26:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d116      	bne.n	8000d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	4b5c      	ldr	r3, [pc, #368]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <HAL_RCC_OscConfig+0x152>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e1bb      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4a:	4956      	ldr	r1, [pc, #344]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	4b55      	ldr	r3, [pc, #340]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	e03a      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d020      	beq.n	8000daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d68:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <HAL_RCC_OscConfig+0x2b0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fe53 	bl	8000a18 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d76:	f7ff fe4f 	bl	8000a18 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e19c      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d88:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4943      	ldr	r1, [pc, #268]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <HAL_RCC_OscConfig+0x2b0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db0:	f7ff fe32 	bl	8000a18 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fe2e 	bl	8000a18 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e17b      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d030      	beq.n	8000e44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d016      	beq.n	8000e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_RCC_OscConfig+0x2b4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df0:	f7ff fe12 	bl	8000a18 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fe0e 	bl	8000a18 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e15b      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0x200>
 8000e16:	e015      	b.n	8000e44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <HAL_RCC_OscConfig+0x2b4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fdfb 	bl	8000a18 <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e26:	f7ff fdf7 	bl	8000a18 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e144      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f0      	bne.n	8000e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a0 	beq.w	8000f92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_RCC_OscConfig+0x2b8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d121      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_RCC_OscConfig+0x2b8>)
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_RCC_OscConfig+0x2b8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fdbd 	bl	8000a18 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	e011      	b.n	8000ec6 <HAL_RCC_OscConfig+0x2ce>
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	42470000 	.word	0x42470000
 8000eac:	42470e80 	.word	0x42470e80
 8000eb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb4:	f7ff fdb0 	bl	8000a18 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e0fd      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b81      	ldr	r3, [pc, #516]	; (80010cc <HAL_RCC_OscConfig+0x4d4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d106      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2f0>
 8000eda:	4a7d      	ldr	r2, [pc, #500]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000edc:	4b7c      	ldr	r3, [pc, #496]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee6:	e01c      	b.n	8000f22 <HAL_RCC_OscConfig+0x32a>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x312>
 8000ef0:	4a77      	ldr	r2, [pc, #476]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000ef2:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6713      	str	r3, [r2, #112]	; 0x70
 8000efc:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000efe:	4b74      	ldr	r3, [pc, #464]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6713      	str	r3, [r2, #112]	; 0x70
 8000f08:	e00b      	b.n	8000f22 <HAL_RCC_OscConfig+0x32a>
 8000f0a:	4a71      	ldr	r2, [pc, #452]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f0c:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	6713      	str	r3, [r2, #112]	; 0x70
 8000f16:	4a6e      	ldr	r2, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f18:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d015      	beq.n	8000f56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fd75 	bl	8000a18 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fd71 	bl	8000a18 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e0bc      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0ee      	beq.n	8000f32 <HAL_RCC_OscConfig+0x33a>
 8000f54:	e014      	b.n	8000f80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fd5f 	bl	8000a18 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fd5b 	bl	8000a18 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e0a6      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ee      	bne.n	8000f5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d105      	bne.n	8000f92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f86:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8092 	beq.w	80010c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d05c      	beq.n	8001062 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d141      	bne.n	8001034 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <HAL_RCC_OscConfig+0x4dc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fd2f 	bl	8000a18 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fd2b 	bl	8000a18 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e078      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f0      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fdc:	493c      	ldr	r1, [pc, #240]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	085b      	lsrs	r3, r3, #1
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_RCC_OscConfig+0x4dc>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fd04 	bl	8000a18 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff fd00 	bl	8000a18 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e04d      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x41c>
 8001032:	e045      	b.n	80010c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x4dc>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fced 	bl	8000a18 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fce9 	bl	8000a18 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e036      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x44a>
 8001060:	e02e      	b.n	80010c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e029      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_RCC_OscConfig+0x4d8>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	429a      	cmp	r2, r3
 8001080:	d11c      	bne.n	80010bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108c:	429a      	cmp	r2, r3
 800108e:	d115      	bne.n	80010bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800109c:	4293      	cmp	r3, r2
 800109e:	d10d      	bne.n	80010bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d106      	bne.n	80010bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40007000 	.word	0x40007000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	42470060 	.word	0x42470060

080010d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0cc      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b68      	ldr	r3, [pc, #416]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 020f 	and.w	r2, r3, #15
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d20c      	bcs.n	8001114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b65      	ldr	r3, [pc, #404]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 020f 	and.w	r2, r3, #15
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4a59      	ldr	r2, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800114e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4950      	ldr	r1, [pc, #320]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d119      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	2b03      	cmp	r3, #3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e067      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 0203 	bic.w	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fc26 	bl	8000a18 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fc22 	bl	8000a18 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e04f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 020f 	and.w	r2, r3, #15
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d90c      	bls.n	8001220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 020f 	and.w	r2, r3, #15
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4919      	ldr	r1, [pc, #100]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124a:	4912      	ldr	r1, [pc, #72]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f821 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 8001262:	4601      	mov	r1, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	fa21 f303 	lsr.w	r3, r1, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb86 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00
 8001294:	40023800 	.word	0x40023800
 8001298:	08001560 	.word	0x08001560
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a8:	b08f      	sub	sp, #60	; 0x3c
 80012aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012bc:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d007      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x34>
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d008      	beq.n	80012de <HAL_RCC_GetSysClockFreq+0x3a>
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f040 80b2 	bne.w	8001436 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012d2:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80012d6:	e0b1      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012dc:	e0ae      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012de:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e8:	4b57      	ldr	r3, [pc, #348]	; (8001448 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d04e      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f4:	4b54      	ldr	r3, [pc, #336]	; (8001448 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	099b      	lsrs	r3, r3, #6
 80012fa:	f04f 0400 	mov.w	r4, #0
 80012fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	ea01 0103 	and.w	r1, r1, r3
 800130a:	ea02 0204 	and.w	r2, r2, r4
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	0160      	lsls	r0, r4, #5
 8001314:	6278      	str	r0, [r7, #36]	; 0x24
 8001316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001318:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800131c:	6278      	str	r0, [r7, #36]	; 0x24
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	623b      	str	r3, [r7, #32]
 8001322:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	eb64 0402 	sbc.w	r4, r4, r2
 800132c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001330:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001334:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001338:	ebb8 0803 	subs.w	r8, r8, r3
 800133c:	eb69 0904 	sbc.w	r9, r9, r4
 8001340:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001358:	eb18 0801 	adds.w	r8, r8, r1
 800135c:	eb49 0902 	adc.w	r9, r9, r2
 8001360:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001378:	4640      	mov	r0, r8
 800137a:	4649      	mov	r1, r9
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	f04f 0400 	mov.w	r4, #0
 8001382:	461a      	mov	r2, r3
 8001384:	4623      	mov	r3, r4
 8001386:	f7fe ff1f 	bl	80001c8 <__aeabi_uldivmod>
 800138a:	4603      	mov	r3, r0
 800138c:	460c      	mov	r4, r1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
 8001390:	e043      	b.n	800141a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	ea01 0103 	and.w	r1, r1, r3
 80013a8:	ea02 0204 	and.w	r2, r2, r4
 80013ac:	460b      	mov	r3, r1
 80013ae:	4614      	mov	r4, r2
 80013b0:	0160      	lsls	r0, r4, #5
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	eb64 0402 	sbc.w	r4, r4, r2
 80013ca:	01a6      	lsls	r6, r4, #6
 80013cc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80013d0:	019d      	lsls	r5, r3, #6
 80013d2:	1aed      	subs	r5, r5, r3
 80013d4:	eb66 0604 	sbc.w	r6, r6, r4
 80013d8:	00f3      	lsls	r3, r6, #3
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	00eb      	lsls	r3, r5, #3
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	e897 0060 	ldmia.w	r7, {r5, r6}
 80013ec:	186d      	adds	r5, r5, r1
 80013ee:	eb46 0602 	adc.w	r6, r6, r2
 80013f2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80013f6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80013fa:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80013fe:	4655      	mov	r5, sl
 8001400:	465e      	mov	r6, fp
 8001402:	4628      	mov	r0, r5
 8001404:	4631      	mov	r1, r6
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	f04f 0400 	mov.w	r4, #0
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	f7fe feda 	bl	80001c8 <__aeabi_uldivmod>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	0c1b      	lsrs	r3, r3, #16
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	3301      	adds	r3, #1
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800142a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001434:	e002      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800143a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800143e:	4618      	mov	r0, r3
 8001440:	373c      	adds	r7, #60	; 0x3c
 8001442:	46bd      	mov	sp, r7
 8001444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	00f42400 	.word	0x00f42400
 8001450:	007a1200 	.word	0x007a1200

08001454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_RCC_GetHCLKFreq+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001470:	f7ff fff0 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001474:	4601      	mov	r1, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0a9b      	lsrs	r3, r3, #10
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	08001570 	.word	0x08001570

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800149a:	e003      	b.n	80014a4 <LoopCopyDataInit>

0800149c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800149e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014a2:	3104      	adds	r1, #4

080014a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014ac:	d3f6      	bcc.n	800149c <CopyDataInit>
  ldr  r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b0:	e002      	b.n	80014b8 <LoopFillZerobss>

080014b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b4:	f842 3b04 	str.w	r3, [r2], #4

080014b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014bc:	d3f9      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014be:	f7ff fa2f 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f000 f811 	bl	80014e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff f807 	bl	80004d8 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014d0:	08001588 	.word	0x08001588
  ldr  r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80014dc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80014e0:	2000002c 	.word	0x2000002c

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <__libc_init_array>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	4e0d      	ldr	r6, [pc, #52]	; (8001520 <__libc_init_array+0x38>)
 80014ec:	4c0d      	ldr	r4, [pc, #52]	; (8001524 <__libc_init_array+0x3c>)
 80014ee:	1ba4      	subs	r4, r4, r6
 80014f0:	10a4      	asrs	r4, r4, #2
 80014f2:	2500      	movs	r5, #0
 80014f4:	42a5      	cmp	r5, r4
 80014f6:	d109      	bne.n	800150c <__libc_init_array+0x24>
 80014f8:	4e0b      	ldr	r6, [pc, #44]	; (8001528 <__libc_init_array+0x40>)
 80014fa:	4c0c      	ldr	r4, [pc, #48]	; (800152c <__libc_init_array+0x44>)
 80014fc:	f000 f820 	bl	8001540 <_init>
 8001500:	1ba4      	subs	r4, r4, r6
 8001502:	10a4      	asrs	r4, r4, #2
 8001504:	2500      	movs	r5, #0
 8001506:	42a5      	cmp	r5, r4
 8001508:	d105      	bne.n	8001516 <__libc_init_array+0x2e>
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001510:	4798      	blx	r3
 8001512:	3501      	adds	r5, #1
 8001514:	e7ee      	b.n	80014f4 <__libc_init_array+0xc>
 8001516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800151a:	4798      	blx	r3
 800151c:	3501      	adds	r5, #1
 800151e:	e7f2      	b.n	8001506 <__libc_init_array+0x1e>
 8001520:	08001580 	.word	0x08001580
 8001524:	08001580 	.word	0x08001580
 8001528:	08001580 	.word	0x08001580
 800152c:	08001584 	.word	0x08001584

08001530 <memset>:
 8001530:	4402      	add	r2, r0
 8001532:	4603      	mov	r3, r0
 8001534:	4293      	cmp	r3, r2
 8001536:	d100      	bne.n	800153a <memset+0xa>
 8001538:	4770      	bx	lr
 800153a:	f803 1b01 	strb.w	r1, [r3], #1
 800153e:	e7f9      	b.n	8001534 <memset+0x4>

08001540 <_init>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr

0800154c <_fini>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	bf00      	nop
 8001550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001552:	bc08      	pop	{r3}
 8001554:	469e      	mov	lr, r3
 8001556:	4770      	bx	lr
